---
// Garden management interface for booking schedule and holidays
// Moved from /admin to /garden-mgmt for security
---

<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Garden Management - BG Bouquet</title>

	<!-- Prevent search engine indexing - CRITICAL SECURITY -->
	<meta name="robots" content="noindex, nofollow, noarchive, nosnippet, noimageindex">
	<meta name="googlebot" content="noindex, nofollow, noarchive, nosnippet, noimageindex">
	<meta name="bingbot" content="noindex, nofollow, noarchive, nosnippet, noimageindex">
	<meta name="slurp" content="noindex, nofollow, noarchive, nosnippet, noimageindex">
	<meta name="duckduckbot" content="noindex, nofollow, noarchive, nosnippet, noimageindex">

	<!-- Prevent caching -->
	<meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
	<meta http-equiv="Pragma" content="no-cache">
	<meta http-equiv="Expires" content="0">

	<link rel="icon" type="image/svg+xml" href="/favicon.svg">
	<link rel="stylesheet" href="/styles/admin.css">

</head>
<body>
	<!-- Clean Header (hidden until login) -->
	<header class="header" id="admin-header" style="display: none;">
		<div class="header-content">
			<h1>Garden Management</h1>
			<div class="header-actions">
				<a href="/garden-mgmt/bookings" class="btn btn-secondary">View Bookings</a>
				<button id="logoutBtn" class="btn btn-secondary" onclick="logout()">Logout</button>
			</div>
		</div>
	</header>

	<!-- Login Form (shown initially) -->
	<div id="login-container" class="login-container">
		<div class="login-form">
			<h2>Admin Access</h2>
			<div id="login-error" class="error" style="display: none;"></div>
			<form id="login-form">
				<div class="form-group">
					<label for="admin-password">Password:</label>
					<input type="password" id="admin-password" required>
				</div>
				<button type="submit" class="btn btn-primary">Login</button>
			</form>
		</div>
	</div>

	<!-- Main Admin Container -->
	<div id="adminContent" class="admin-container hidden">
		<div class="admin-sections">
				<!-- Holiday Management -->
				<div class="admin-section">
					<h2>Holiday Management</h2>
					
					<div class="form-group">
						<label for="holidayDate">Add Holiday Date:</label>
						<input type="date" id="holidayDate">
					</div>
					
					<div class="form-group">
						<label for="holidayName">Holiday Name:</label>
						<input type="text" id="holidayName" placeholder="e.g., Day Off">
					</div>
					
					<div class="holiday-actions mb-4">
						<button class="btn btn-primary" id="addHolidayBtn" onclick="addHoliday()">
							<span class="btn-text">Add Holiday</span>
							<span class="btn-spinner" style="display: none;">
								<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
									<path d="M21 12a9 9 0 11-6.219-8.56"/>
								</svg>
								Adding...
							</span>
						</button>
						<button class="btn btn-secondary" id="generateHolidaysBtn" onclick="generateFutureHolidays()">
							<span class="btn-text">Generate Future Holidays</span>
							<span class="btn-spinner" style="display: none;">
								<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
									<path d="M21 12a9 9 0 11-6.219-8.56"/>
								</svg>
								Generating...
							</span>
						</button>
					</div>
					
					<div id="holidayMessage" class="hidden"></div>
					
					<div class="holiday-table-container">
						<table class="holiday-table" id="holidayTable">
							<thead>
								<tr>
									<th>Date</th>
									<th>Holiday Name</th>
									<th>Type</th>
									<th>Status</th>
									<th>Actions</th>
								</tr>
							</thead>
							<tbody id="holidayTableBody">
								<tr>
									<td colspan="5" class="loading-cell">Loading holidays...</td>
								</tr>
							</tbody>
						</table>
					</div>
				</div>

				<!-- Schedule Settings -->
				<div class="admin-section">
					<h2>Schedule Settings</h2>
					
					<div class="form-group">
						<label for="maxBookings">Max Bookings per Slot:</label>
						<input type="number" id="maxBookings" min="1" max="20" value="3">
					</div>

					<div class="form-group">
						<label for="maxVisitors">Max Bouquets per Slot:</label>
						<input type="number" id="maxVisitors" min="1" max="50" value="10">
					</div>

					<div class="form-group">
						<label>Season Range:</label>
						<div class="season-range-group">
							<div class="season-date">
								<label for="seasonStartMonth">Start:</label>
								<select id="seasonStartMonth" name="seasonStartMonth">
									<option value="1">January</option>
									<option value="2">February</option>
									<option value="3">March</option>
									<option value="4">April</option>
									<option value="5">May</option>
									<option value="6">June</option>
									<option value="7">July</option>
									<option value="8">August</option>
									<option value="9">September</option>
									<option value="10">October</option>
									<option value="11">November</option>
									<option value="12">December</option>
								</select>
								<input type="number" id="seasonStartDay" name="seasonStartDay" min="1" max="31" placeholder="Day">
							</div>
							<div class="season-date">
								<label for="seasonEndMonth">End:</label>
								<select id="seasonEndMonth" name="seasonEndMonth">
									<option value="1">January</option>
									<option value="2">February</option>
									<option value="3">March</option>
									<option value="4">April</option>
									<option value="5">May</option>
									<option value="6">June</option>
									<option value="7">July</option>
									<option value="8">August</option>
									<option value="9">September</option>
									<option value="10">October</option>
									<option value="11">November</option>
									<option value="12">December</option>
								</select>
								<input type="number" id="seasonEndDay" name="seasonEndDay" min="1" max="31" placeholder="Day">
							</div>
						</div>
						<p class="help-text">Define when your garden is open for the season (e.g., May 15 - September 30)</p>
					</div>

					<div class="form-group">
						<label>Operating Days:</label>
						<div class="toggle-chips-group" id="operatingDays">
							<button type="button" class="toggle-chip" data-day="monday">Monday</button>
							<button type="button" class="toggle-chip" data-day="tuesday">Tuesday</button>
							<button type="button" class="toggle-chip" data-day="wednesday">Wednesday</button>
							<button type="button" class="toggle-chip" data-day="thursday">Thursday</button>
							<button type="button" class="toggle-chip" data-day="friday">Friday</button>
							<button type="button" class="toggle-chip" data-day="saturday">Saturday</button>
							<button type="button" class="toggle-chip" data-day="sunday">Sunday</button>
						</div>
					</div>

					<div class="form-group">
						<label>Active Time Slots:</label>
						<div class="time-slots-grid" id="timeSlotsGrid">
							<!-- Time slots will be generated by JavaScript -->
						</div>
					</div>
					
					<button class="btn btn-primary" id="saveScheduleBtn" onclick="updateScheduleSettings()">
						<span class="btn-text">Save Schedule</span>
						<span class="btn-spinner" style="display: none;">
							<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
								<path d="M21 12a9 9 0 11-6.219-8.56"/>
							</svg>
							Saving...
						</span>
					</button>
					
					<div id="scheduleMessage" class="hidden"></div>
				</div>

				<!-- Pricing Settings -->
				<div class="admin-section">
					<h2>Pricing Settings</h2>

					<div class="form-group">
						<label for="pricePerBouquet">Price per Bouquet (CAD):</label>
						<input type="number" id="pricePerBouquet" min="1" max="200" step="0.01"
							   placeholder="35.00" required>
						<p class="help-text">Price charged per bouquet (1.00 - 200.00 CAD)</p>
					</div>

					<div class="form-group">
						<label for="pricePerVisitorPass">Visitor Pass Price (CAD):</label>
						<input type="number" id="pricePerVisitorPass" min="0" max="100" step="0.01"
							   placeholder="5.00" required>
						<p class="help-text">Price for additional guests age 13+ not picking bouquets (0.00 - 100.00 CAD)</p>
					</div>

					<div class="form-group">
						<label for="maxVisitorPassesPerBooking">Max Visitor Passes per Booking:</label>
						<input type="number" id="maxVisitorPassesPerBooking" min="0" max="50" step="1"
							   placeholder="20" required>
						<p class="help-text">Maximum number of visitor passes allowed per booking (0 - 50)</p>
					</div>

					<button class="btn btn-primary" id="savePricingBtn" onclick="updatePricingSettings()">
						<span class="btn-text">Save Pricing</span>
						<span class="btn-spinner" style="display: none;">
							<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
								<path d="M21 12a9 9 0 11-6.219-8.56"/>
							</svg>
							Saving...
						</span>
					</button>

					<div id="pricingMessage" class="hidden"></div>
				</div>

				<!-- Booking Range Monitoring -->
				<div class="admin-section">
					<h2>Booking Range Status</h2>

					<div class="booking-range-status">
						<div class="status-grid">
							<div class="status-item">
								<label>Current Date:</label>
								<span id="currentDate">Loading...</span>
							</div>
							<div class="status-item">
								<label>Bookings Available Until:</label>
								<span id="maxFutureDate">Loading...</span>
							</div>
							<div class="status-item">
								<label>Days Remaining:</label>
								<span id="daysRemaining" class="days-remaining">Loading...</span>
							</div>
							<div class="status-item">
								<label>Total Open Days:</label>
								<span id="totalOpenDays">Loading...</span>
							</div>
							<div class="status-item">
								<label>Total Time Slots:</label>
								<span id="totalTimeSlots">Loading...</span>
							</div>
							<div class="status-item">
								<label>Extension Status:</label>
								<span id="extensionStatus" class="extension-status">Loading...</span>
							</div>
						</div>

						<div class="range-actions">
							<button id="refreshRangeStatus" class="btn btn-secondary">
								<span class="btn-text">Refresh Status</span>
								<span class="btn-spinner hidden">⟳</span>
							</button>
							<button id="extendRange" class="btn btn-primary">
								<span class="btn-text">Extend Range</span>
								<span class="btn-spinner hidden">⟳</span>
							</button>
						</div>

						<div id="rangeMessage" class="hidden"></div>
					</div>
				</div>
			</div>
		</div>
	</div>
	</div>

	<script>
		let isLoggedIn = false;

		// DOM elements
		const loginContainer = document.getElementById('login-container') as HTMLElement;
		const adminContent = document.getElementById('adminContent') as HTMLElement;
		const adminHeader = document.getElementById('admin-header') as HTMLElement;
		const loginForm = document.getElementById('login-form') as HTMLFormElement;
		const loginError = document.getElementById('login-error') as HTMLElement;
		const adminPassword = document.getElementById('admin-password') as HTMLInputElement;
		// const logoutBtn = document.getElementById('logoutBtn') as HTMLButtonElement;

		// Event listeners
		if (loginForm) loginForm.addEventListener('submit', handleLogin);

		// Login handler
		async function handleLogin(event: Event): Promise<void> {
			event.preventDefault();

			if (!adminPassword || !loginError) {
				console.error('Required elements not found');
				return;
			}

			const password = adminPassword.value;

			try {
				// Get admin password from settings
				const response = await fetch('/api/admin/verify-password', {
					method: 'POST',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({ password })
				});

				const result = await response.json();

				if (result.success) {
					isLoggedIn = true;

					if (loginContainer) loginContainer.style.display = 'none';
					if (adminContent) {
						adminContent.classList.remove('hidden');
						adminContent.style.display = 'block';
					}
					if (adminHeader) adminHeader.style.display = 'block';

					loadHolidays();
					loadBookingRangeStatus();
					// Add a small delay to ensure DOM is ready
					setTimeout(() => {
						// Test: Manually activate Thursday chip to test CSS
						const thursdayChip = document.querySelector('[data-day="thursday"]') as HTMLElement;
						if (thursdayChip) {
							thursdayChip.classList.add('active');
							console.log('Test: Manually activated Thursday chip for CSS testing');
						}

						loadScheduleSettings();
						loadPricingSettings();
						setupOperatingDaysHandlers();
					}, 100);
				} else {
					showLoginError('Invalid password');
				}
			} catch (error) {
				console.error('Login error:', error);
				showLoginError('Login failed. Please try again.');
			}
		}

		// Show login error
		function showLoginError(message: string): void {
			if (loginError) {
				loginError.textContent = message;
				loginError.style.display = 'block';
			}
		}

		function logout(): void {
			isLoggedIn = false;

			if (adminContent) {
				adminContent.classList.add('hidden');
				adminContent.style.display = 'none';
			}
			if (adminHeader) adminHeader.style.display = 'none';
			if (loginContainer) loginContainer.style.display = 'flex';
			if (adminPassword) adminPassword.value = '';
			if (loginError) loginError.style.display = 'none';
		}



		async function loadHolidays(): Promise<void> {
			try {
				const response = await fetch('/api/admin/holidays');
				const holidays = await response.json();

				const holidayTableBody = document.getElementById('holidayTableBody');

				if (!holidayTableBody) {
					console.error('Holiday table body element not found');
					return;
				}

				if (holidays.length === 0) {
					holidayTableBody.innerHTML = '<tr><td colspan="5" class="no-data-cell">No holidays configured.</td></tr>';
					return;
				}

				holidayTableBody.innerHTML = holidays.map((holiday: any) => {
					const isDisabled = holiday.is_disabled || false;
					const isAutoGenerated = holiday.is_auto_generated || false;
					// Fix timezone issue by parsing date as local date
					const dateParts = holiday.date.split('-');
					const localDate = new Date(parseInt(dateParts[0]), parseInt(dateParts[1]) - 1, parseInt(dateParts[2]));
					const formattedDate = localDate.toLocaleDateString('en-US', {
						weekday: 'short',
						month: 'short',
						day: 'numeric',
						year: 'numeric'
					});

					return `
						<tr class="${isDisabled ? 'holiday-disabled' : ''}">
							<td class="date-cell">${formattedDate}</td>
							<td class="name-cell">
								${isDisabled ? '<span class="disabled-indicator">🚫</span>' : ''}
								${holiday.name}
							</td>
							<td class="type-cell">
								<span class="badge ${isAutoGenerated ? 'badge-auto' : 'badge-manual'}">
									${isAutoGenerated ? 'Auto' : 'Manual'}
								</span>
							</td>
							<td class="status-cell">
								<span class="badge ${isDisabled ? 'badge-disabled' : 'badge-active'}">
									${isDisabled ? 'Disabled' : 'Active'}
								</span>
							</td>
							<td class="actions-cell">
								${isAutoGenerated ?
									(isDisabled ?
										`<button class="btn btn-sm btn-success" onclick="enableHoliday('${holiday.id}')">Enable</button>` :
										`<button class="btn btn-sm btn-warning" onclick="disableHoliday('${holiday.id}')">Disable</button>`
									) :
									`<button class="btn btn-sm btn-danger" onclick="removeHoliday('${holiday.id}')">Remove</button>`
								}
							</td>
						</tr>
					`;
				}).join('');
			} catch (error) {
				console.error('Error loading holidays:', error);
				const holidayList = document.getElementById('holidayList');
				if (holidayList) {
					holidayList.innerHTML = '<p>Error loading holidays.</p>';
				}
			}
		}

		async function addHoliday(): Promise<void> {
			const dateElement = document.getElementById('holidayDate') as HTMLInputElement;
			const nameElement = document.getElementById('holidayName') as HTMLInputElement;
			const messageDiv = document.getElementById('holidayMessage');

			if (!dateElement || !nameElement || !messageDiv) {
				console.error('Required elements not found');
				return;
			}

			const date = dateElement.value;
			const name = nameElement.value;

			if (!date || !name) {
				showMessage(messageDiv, 'Please enter both date and name.', 'error');
				return;
			}

			// Show loading state
			setButtonLoading('addHolidayBtn', true);

			try {
				const response = await fetch('/api/admin/holidays', {
					method: 'POST',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({ date, name })
				});

				const result = await response.json();

				if (result.success) {
					showMessage(messageDiv, 'Holiday added successfully!', 'success');
					dateElement.value = '';
					nameElement.value = '';
					loadHolidays();
				} else {
					showMessage(messageDiv, result.error || 'Failed to add holiday.', 'error');
				}
			} catch (error) {
				console.error('Error adding holiday:', error);
				showMessage(messageDiv, 'Error adding holiday.', 'error');
			} finally {
				// Hide loading state
				setButtonLoading('addHolidayBtn', false);
			}
		}

		async function generateFutureHolidays(): Promise<void> {
			const messageDiv = document.getElementById('holidayMessage');
			if (!messageDiv) return;

			if (!confirm('This will generate automatic holidays for the next 3 years. Continue?')) {
				return;
			}

			// Show loading state
			setButtonLoading('generateHolidaysBtn', true);

			try {
				showMessage(messageDiv, 'Generating holidays...', 'success');

				const response = await fetch('/api/admin/holidays/generate', {
					method: 'POST',
					headers: { 'Content-Type': 'application/json' }
				});

				const result = await response.json();

				if (result.success) {
					showMessage(messageDiv, `Successfully generated holidays for ${result.years_generated} years!`, 'success');
					loadHolidays(); // Refresh the list
				} else {
					showMessage(messageDiv, result.error || 'Failed to generate holidays.', 'error');
				}
			} catch (error) {
				console.error('Error generating holidays:', error);
				showMessage(messageDiv, 'An error occurred while generating holidays.', 'error');
			} finally {
				// Hide loading state
				setButtonLoading('generateHolidaysBtn', false);
			}
		}

		async function removeHoliday(holidayId: string): Promise<void> {
			if (!confirm('Are you sure you want to remove this holiday? This action cannot be undone.')) return;

			try {
				const response = await fetch(`/api/admin/holidays/${holidayId}`, {
					method: 'DELETE'
				});

				const result = await response.json();

				if (result.success) {
					loadHolidays();
				} else {
					alert('Failed to remove holiday: ' + (result.error || 'Unknown error'));
				}
			} catch (error) {
				console.error('Error removing holiday:', error);
				alert('Error removing holiday.');
			}
		}

		async function disableHoliday(holidayId: string): Promise<void> {
			if (!confirm('Are you sure you want to disable this automatic holiday? It can be re-enabled later.')) return;

			// Find the button that was clicked and show loading state
			const button = document.querySelector(`button[onclick="disableHoliday('${holidayId}')"]`) as HTMLButtonElement;
			if (button) {
				button.disabled = true;
				button.innerHTML = '<span class="btn-spinner"><svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 12a9 9 0 11-6.219-8.56"/></svg></span> Disabling...';
			}

			try {
				const response = await fetch(`/api/admin/holidays/${holidayId}`, {
					method: 'DELETE'
				});

				const result = await response.json();

				if (result.success) {
					loadHolidays();
				} else {
					alert('Failed to disable holiday: ' + (result.error || 'Unknown error'));
				}
			} catch (error) {
				console.error('Error disabling holiday:', error);
				alert('Error disabling holiday.');
			} finally {
				// Reset button state (will be replaced by loadHolidays anyway)
				if (button) {
					button.disabled = false;
					button.innerHTML = 'Disable';
				}
			}
		}

		async function enableHoliday(holidayId: string): Promise<void> {
			// Find the button that was clicked and show loading state
			const button = document.querySelector(`button[onclick="enableHoliday('${holidayId}')"]`) as HTMLButtonElement;
			if (button) {
				button.disabled = true;
				button.innerHTML = '<span class="btn-spinner"><svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 12a9 9 0 11-6.219-8.56"/></svg></span> Enabling...';
			}

			try {
				const response = await fetch(`/api/admin/holidays/${holidayId}/enable`, {
					method: 'POST'
				});

				const result = await response.json();

				if (result.success) {
					loadHolidays();
				} else {
					alert('Failed to enable holiday: ' + (result.error || 'Unknown error'));
				}
			} catch (error) {
				console.error('Error enabling holiday:', error);
				alert('Error enabling holiday.');
			} finally {
				// Reset button state (will be replaced by loadHolidays anyway)
				if (button) {
					button.disabled = false;
					button.innerHTML = 'Enable';
				}
			}
		}

		// Generate 24-hour time slots grid
		function generateTimeSlotsGrid(): void {
			console.log('generateTimeSlotsGrid called'); // Debug log
			const timeSlotsGrid = document.getElementById('timeSlotsGrid');
			if (!timeSlotsGrid) {
				console.error('timeSlotsGrid element not found!'); // Debug log
				return;
			}
			console.log('timeSlotsGrid element found:', timeSlotsGrid); // Debug log

			const hours: Array<{ value: string; hour24: number }> = [];
			for (let i = 0; i < 24; i++) {
				const hour12 = i === 0 ? 12 : i > 12 ? i - 12 : i;
				const ampm = i < 12 ? 'AM' : 'PM';
				const timeString = `${hour12}:00 ${ampm}`;
				hours.push({ value: timeString, hour24: i });
			}

			timeSlotsGrid.innerHTML = hours.map(time => `
				<button type="button" class="time-slot-chip" data-time="${time.value}">
					${time.value}
				</button>
			`).join('');

			console.log('Generated', hours.length, 'time slot chips'); // Debug log

			// Test: Manually activate a few chips to test CSS
			const testChips = timeSlotsGrid.querySelectorAll('.time-slot-chip');
			if (testChips.length > 0) {
				testChips[0].classList.add('active'); // 12:00 AM
				testChips[10].classList.add('active'); // 10:00 AM
				console.log('Test: Manually activated first two chips for CSS testing');
			}

			// Add click handlers for time slots
			timeSlotsGrid.addEventListener('click', handleTimeSlotToggle);
		}

		async function handleTimeSlotToggle(event: Event): Promise<void> {
			const target = event.target as HTMLElement;
			if (!target.classList.contains('time-slot-chip')) return;

			const timeValue = target.dataset.time;
			const isActive = target.classList.contains('active');
			const action = isActive ? 'remove' : 'add';

			if (!confirm(`Are you sure you want to ${action} ${timeValue} ${isActive ? 'from' : 'to'} the available time slots?`)) {
				return;
			}

			target.classList.toggle('active');
		}

		async function loadScheduleSettings(): Promise<void> {
			try {
				const response = await fetch('/api/admin/settings');
				const settings = await response.json();

				console.log('Loaded settings:', settings); // Debug log

				// Generate time slots grid first
				generateTimeSlotsGrid();

				// Load operating days
				console.log('Raw operating_days from DB:', settings.operating_days, 'Type:', typeof settings.operating_days); // Debug log
				let operatingDays = [];

				if (Array.isArray(settings.operating_days)) {
					// Data is already an array
					operatingDays = settings.operating_days;
					console.log('Operating days already an array:', operatingDays); // Debug log
				} else if (typeof settings.operating_days === 'string') {
					// Data is a JSON string, parse it
					try {
						operatingDays = JSON.parse(settings.operating_days || '[]');
						console.log('Parsed operating days from JSON:', operatingDays); // Debug log
					} catch (error) {
						console.error('Error parsing operating_days JSON:', error);
						operatingDays = [];
					}
				} else {
					console.log('Operating days is neither array nor string, using empty array');
					operatingDays = [];
				}

				const dayChips = document.querySelectorAll('#operatingDays .toggle-chip');
				console.log('Found', dayChips.length, 'day chips'); // Debug log
				dayChips.forEach((chip: Element) => {
					const chipElement = chip as HTMLElement;
					const dayValue = chipElement.dataset.day;
					chipElement.classList.remove('active'); // Clear existing state
					if (operatingDays.includes(dayValue)) {
						chipElement.classList.add('active');
						console.log('Activated day:', dayValue, 'Classes:', chipElement.className); // Debug log
					} else {
						console.log('Day not active:', dayValue); // Debug log
					}
				});

				// Load and set active time slots
				console.log('Raw time_slots from DB:', settings.time_slots, 'Type:', typeof settings.time_slots); // Debug log
				let timeSlots = [];

				if (Array.isArray(settings.time_slots)) {
					// Data is already an array
					timeSlots = settings.time_slots;
					console.log('Time slots already an array:', timeSlots); // Debug log
				} else if (typeof settings.time_slots === 'string') {
					// Data is a JSON string, parse it
					try {
						timeSlots = JSON.parse(settings.time_slots || '[]');
						console.log('Parsed time slots from JSON:', timeSlots); // Debug log
					} catch (error) {
						console.error('Error parsing time_slots JSON:', error);
						timeSlots = [];
					}
				} else {
					console.log('Time slots is neither array nor string, using empty array');
					timeSlots = [];
				}

				const timeSlotChips = document.querySelectorAll('#timeSlotsGrid .time-slot-chip');
				console.log('Found', timeSlotChips.length, 'time slot chips'); // Debug log
				timeSlotChips.forEach((chip: Element) => {
					const chipElement = chip as HTMLElement;
					const timeValue = chipElement.dataset.time;
					chipElement.classList.remove('active'); // Clear existing state
					if (timeSlots.includes(timeValue)) {
						chipElement.classList.add('active');
						console.log('Activated time slot:', timeValue, 'Classes:', chipElement.className); // Debug log
					} else {
						console.log('Time slot not active:', timeValue); // Debug log
					}
				});

				// Load capacity settings
				const maxBookingsElement = document.getElementById('maxBookings') as HTMLInputElement;
				const maxVisitorsElement = document.getElementById('maxVisitors') as HTMLInputElement;

				if (maxBookingsElement && settings.max_bookings_per_slot) {
					maxBookingsElement.value = settings.max_bookings_per_slot;
				}

				if (maxVisitorsElement && settings.max_bouquets_per_slot) {
					maxVisitorsElement.value = settings.max_bouquets_per_slot;
				}

				// Load seasonal settings
				const seasonStartMonthElement = document.getElementById('seasonStartMonth') as HTMLSelectElement;
				const seasonStartDayElement = document.getElementById('seasonStartDay') as HTMLInputElement;
				const seasonEndMonthElement = document.getElementById('seasonEndMonth') as HTMLSelectElement;
				const seasonEndDayElement = document.getElementById('seasonEndDay') as HTMLInputElement;

				if (seasonStartMonthElement && settings.season_start_month) {
					seasonStartMonthElement.value = settings.season_start_month;
				}
				if (seasonStartDayElement && settings.season_start_day) {
					seasonStartDayElement.value = settings.season_start_day;
				}
				if (seasonEndMonthElement && settings.season_end_month) {
					seasonEndMonthElement.value = settings.season_end_month;
				}
				if (seasonEndDayElement && settings.season_end_day) {
					seasonEndDayElement.value = settings.season_end_day;
				}

			} catch (error) {
				console.error('Error loading settings:', error);
			}
		}

		// Add click handlers for operating days
		function setupOperatingDaysHandlers(): void {
			const operatingDaysContainer = document.getElementById('operatingDays');
			if (!operatingDaysContainer) return;

			operatingDaysContainer.addEventListener('click', async (event: Event) => {
				const target = event.target as HTMLElement;
				if (!target.classList.contains('toggle-chip')) return;

				const dayValue = target.dataset.day;
				const isActive = target.classList.contains('active');
				const action = isActive ? 'close' : 'open';

				if (!confirm(`Are you sure you want to ${action} the business on ${dayValue}s?`)) {
					return;
				}

				target.classList.toggle('active');
			});
		}

		async function updateScheduleSettings(): Promise<void> {
			const messageDiv = document.getElementById('scheduleMessage');

			if (!messageDiv) {
				console.error('Schedule message element not found');
				return;
			}

			// Show loading state
			setButtonLoading('saveScheduleBtn', true);

			try {
				// Get operating days from active chips
				const operatingDays: string[] = [];
				const activeDayChips = document.querySelectorAll('#operatingDays .toggle-chip.active');
				activeDayChips.forEach((chip: Element) => {
					const chipElement = chip as HTMLElement;
					const dayValue = chipElement.dataset.day;
					if (dayValue) operatingDays.push(dayValue);
				});

				// Get time slots from active chips
				const timeSlots: string[] = [];
				const activeTimeChips = document.querySelectorAll('#timeSlotsGrid .time-slot-chip.active');
				activeTimeChips.forEach((chip: Element) => {
					const chipElement = chip as HTMLElement;
					const timeValue = chipElement.dataset.time;
					if (timeValue) timeSlots.push(timeValue);
				});

				const maxBookingsInput = document.getElementById('maxBookings') as HTMLInputElement;
				const maxVisitorsInput = document.getElementById('maxVisitors') as HTMLInputElement;
				const seasonStartMonthInput = document.getElementById('seasonStartMonth') as HTMLSelectElement;
				const seasonStartDayInput = document.getElementById('seasonStartDay') as HTMLInputElement;
				const seasonEndMonthInput = document.getElementById('seasonEndMonth') as HTMLSelectElement;
				const seasonEndDayInput = document.getElementById('seasonEndDay') as HTMLInputElement;

				if (!maxBookingsInput || !maxVisitorsInput) {
					showMessage(messageDiv, 'Capacity elements not found.', 'error');
					return;
				}

				if (!seasonStartMonthInput || !seasonStartDayInput || !seasonEndMonthInput || !seasonEndDayInput) {
					showMessage(messageDiv, 'Season range elements not found.', 'error');
					return;
				}

				const maxBookings = maxBookingsInput.value;
				const maxVisitors = maxVisitorsInput.value;
				const seasonStartMonth = seasonStartMonthInput.value;
				const seasonStartDay = seasonStartDayInput.value;
				const seasonEndMonth = seasonEndMonthInput.value;
				const seasonEndDay = seasonEndDayInput.value;

				if (operatingDays.length === 0) {
					showMessage(messageDiv, 'Please select at least one operating day.', 'error');
					return;
				}

				if (timeSlots.length === 0) {
					showMessage(messageDiv, 'Please enter at least one time slot.', 'error');
					return;
				}

				// Debug logging
				console.log('Submitting schedule settings:');
				console.log('Operating days:', operatingDays);
				console.log('Time slots:', timeSlots);
				console.log('Max bookings:', maxBookings);
				console.log('Max visitors:', maxVisitors);
				console.log('Season start:', seasonStartMonth, seasonStartDay);
				console.log('Season end:', seasonEndMonth, seasonEndDay);

				const response = await fetch('/api/admin/settings', {
					method: 'POST',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({
						operating_days: operatingDays,
						time_slots: timeSlots,
						max_bookings_per_slot: parseInt(maxBookings),
						max_visitors_per_slot: parseInt(maxVisitors), // Keep for API compatibility
						season_start_month: parseInt(seasonStartMonth),
						season_start_day: parseInt(seasonStartDay),
						season_end_month: parseInt(seasonEndMonth),
						season_end_day: parseInt(seasonEndDay)
					})
				});

				const result = await response.json();

				if (result.success) {
					showMessage(messageDiv, 'Schedule settings updated successfully! Future bookings will use the new schedule.', 'success');
				} else {
					showMessage(messageDiv, result.error || 'Failed to update settings.', 'error');
				}
			} catch (error) {
				console.error('Error updating settings:', error);
				showMessage(messageDiv, 'Error updating settings.', 'error');
			} finally {
				// Hide loading state
				setButtonLoading('saveScheduleBtn', false);
			}
		}

		function showMessage(element: HTMLElement, message: string, type: 'error' | 'success'): void {
			element.textContent = message;
			element.className = type === 'error' ? 'error-message' : 'success-message';
			element.classList.remove('hidden');

			setTimeout(() => {
				element.classList.add('hidden');
			}, 5000);
		}

		// Button loading state helpers
		function setButtonLoading(buttonId: string, loading: boolean): void {
			const button = document.getElementById(buttonId) as HTMLButtonElement;
			if (!button) return;

			const textSpan = button.querySelector('.btn-text') as HTMLElement;
			const spinnerSpan = button.querySelector('.btn-spinner') as HTMLElement;

			if (loading) {
				button.disabled = true;
				if (textSpan) textSpan.style.display = 'none';
				if (spinnerSpan) spinnerSpan.style.display = 'flex';
			} else {
				button.disabled = false;
				if (textSpan) textSpan.style.display = 'inline';
				if (spinnerSpan) spinnerSpan.style.display = 'none';
			}
		}

		// Booking Range Status Functions
		async function loadBookingRangeStatus(): Promise<void> {
			try {
				const response = await fetch('/api/admin/extend-booking-range');
				const result = await response.json();

				if (result.success) {
					updateBookingRangeDisplay(result.status);
				} else {
					console.error('Failed to load booking range status:', result.error);
					showRangeMessage('Failed to load booking range status.', 'error');
				}
			} catch (error) {
				console.error('Error loading booking range status:', error);
				showRangeMessage('Error loading booking range status.', 'error');
			}
		}

		function updateBookingRangeDisplay(status: any): void {
			// Update display elements
			const currentDate = document.getElementById('currentDate');
			const maxFutureDate = document.getElementById('maxFutureDate');
			const daysRemaining = document.getElementById('daysRemaining');
			const totalOpenDays = document.getElementById('totalOpenDays');
			const totalTimeSlots = document.getElementById('totalTimeSlots');
			const extensionStatus = document.getElementById('extensionStatus');

			if (currentDate) currentDate.textContent = status.current_date;
			if (maxFutureDate) maxFutureDate.textContent = status.max_future_date;
			if (totalOpenDays) totalOpenDays.textContent = status.total_open_days.toString();
			if (totalTimeSlots) totalTimeSlots.textContent = status.total_time_slots.toString();

			// Update days remaining with color coding
			if (daysRemaining) {
				daysRemaining.textContent = `${status.days_remaining} days`;
				daysRemaining.className = 'days-remaining';

				if (status.days_remaining < 180) {
					daysRemaining.classList.add('danger');
				} else if (status.days_remaining < 300) {
					daysRemaining.classList.add('warning');
				}
			}

			// Update extension status
			if (extensionStatus) {
				if (status.needs_extension) {
					extensionStatus.textContent = 'Extension Needed';
					extensionStatus.className = 'extension-status danger';
				} else if (status.days_remaining < 300) {
					extensionStatus.textContent = 'Monitor Closely';
					extensionStatus.className = 'extension-status warning';
				} else {
					extensionStatus.textContent = 'Healthy Range';
					extensionStatus.className = 'extension-status good';
				}
			}
		}

		async function refreshRangeStatus(): Promise<void> {
			setButtonLoading('refreshRangeStatus', true);
			await loadBookingRangeStatus();
			setButtonLoading('refreshRangeStatus', false);
		}

		async function extendBookingRange(): Promise<void> {
			const messageDiv = document.getElementById('rangeMessage');
			if (!messageDiv) return;

			setButtonLoading('extendRange', true);

			try {
				const response = await fetch('/api/admin/extend-booking-range', {
					method: 'POST'
				});

				const result = await response.json();

				if (result.success) {
					showRangeMessage(result.message, 'success');
					// Refresh the status display
					await loadBookingRangeStatus();
				} else {
					showRangeMessage(result.error || 'Failed to extend booking range.', 'error');
				}
			} catch (error) {
				console.error('Error extending booking range:', error);
				showRangeMessage('Error extending booking range.', 'error');
			} finally {
				setButtonLoading('extendRange', false);
			}
		}

		function showRangeMessage(message: string, type: 'error' | 'success'): void {
			const messageDiv = document.getElementById('rangeMessage');
			if (!messageDiv) return;

			messageDiv.textContent = message;
			messageDiv.className = type === 'error' ? 'error-message' : 'success-message';
			messageDiv.classList.remove('hidden');

			setTimeout(() => {
				messageDiv.classList.add('hidden');
			}, 5000);
		}



		// Add event listeners for booking range buttons
		const refreshRangeBtn = document.getElementById('refreshRangeStatus');
		const extendRangeBtn = document.getElementById('extendRange');

		if (refreshRangeBtn) refreshRangeBtn.addEventListener('click', refreshRangeStatus);
		if (extendRangeBtn) extendRangeBtn.addEventListener('click', extendBookingRange);

		// Pricing Settings Functions
		async function loadPricingSettings(): Promise<void> {
			try {
				const response = await fetch('/api/settings/pricing');
				const data = await response.json();

				const bouquetPriceInput = document.getElementById('pricePerBouquet') as HTMLInputElement;
				const visitorPassPriceInput = document.getElementById('pricePerVisitorPass') as HTMLInputElement;
				const maxVisitorPassesInput = document.getElementById('maxVisitorPassesPerBooking') as HTMLInputElement;

				if (bouquetPriceInput) {
					bouquetPriceInput.value = data.price_per_bouquet || '35.00';
				}

				if (visitorPassPriceInput) {
					visitorPassPriceInput.value = data.price_per_visitor_pass || '5.00';
				}

				if (maxVisitorPassesInput) {
					maxVisitorPassesInput.value = data.max_visitor_passes_per_booking || '20';
				}

				console.log('Loaded pricing settings:', data);
			} catch (error) {
				console.error('Error loading pricing settings:', error);
				// Set fallback values
				const bouquetPriceInput = document.getElementById('pricePerBouquet') as HTMLInputElement;
				const visitorPassPriceInput = document.getElementById('pricePerVisitorPass') as HTMLInputElement;
				const maxVisitorPassesInput = document.getElementById('maxVisitorPassesPerBooking') as HTMLInputElement;

				if (bouquetPriceInput) {
					bouquetPriceInput.value = '35.00';
				}
				if (visitorPassPriceInput) {
					visitorPassPriceInput.value = '5.00';
				}
				if (maxVisitorPassesInput) {
					maxVisitorPassesInput.value = '20';
				}
			}
		}

		async function updatePricingSettings(): Promise<void> {
			const bouquetPriceInput = document.getElementById('pricePerBouquet') as HTMLInputElement;
			const visitorPassPriceInput = document.getElementById('pricePerVisitorPass') as HTMLInputElement;
			const maxVisitorPassesInput = document.getElementById('maxVisitorPassesPerBooking') as HTMLInputElement;
			const messageDiv = document.getElementById('pricingMessage');

			if (!bouquetPriceInput || !visitorPassPriceInput || !maxVisitorPassesInput || !messageDiv) return;

			const bouquetPrice = parseFloat(bouquetPriceInput.value);
			const visitorPassPrice = parseFloat(visitorPassPriceInput.value);
			const maxVisitorPasses = parseInt(maxVisitorPassesInput.value);

			// Validate bouquet price
			if (isNaN(bouquetPrice) || bouquetPrice < 1 || bouquetPrice > 200) {
				showMessage(messageDiv, 'Bouquet price must be between $1.00 and $200.00', 'error');
				return;
			}

			// Validate visitor pass price
			if (isNaN(visitorPassPrice) || visitorPassPrice < 0 || visitorPassPrice > 100) {
				showMessage(messageDiv, 'Visitor pass price must be between $0.00 and $100.00', 'error');
				return;
			}

			// Validate visitor pass limit
			if (isNaN(maxVisitorPasses) || maxVisitorPasses < 0 || maxVisitorPasses > 50) {
				showMessage(messageDiv, 'Visitor pass limit must be between 0 and 50', 'error');
				return;
			}

			setButtonLoading('savePricingBtn', true);

			try {
				const response = await fetch('/api/settings/pricing', {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json'
					},
					body: JSON.stringify({
						price_per_bouquet: bouquetPrice.toFixed(2),
						price_per_visitor_pass: visitorPassPrice.toFixed(2),
						max_visitor_passes_per_booking: maxVisitorPasses
					})
				});

				const result = await response.json();

				if (result.success) {
					const bouquetMsg = result.price_per_bouquet ? `Bouquet: $${result.price_per_bouquet}` : '';
					const visitorMsg = result.price_per_visitor_pass ? `Visitor Pass: $${result.price_per_visitor_pass}` : '';
					const limitMsg = result.max_visitor_passes_per_booking ? `Max Visitor Passes: ${result.max_visitor_passes_per_booking}` : '';
					const messages = [bouquetMsg, visitorMsg, limitMsg].filter(Boolean).join(', ');
					showMessage(messageDiv, `Pricing updated successfully! ${messages}`, 'success');
				} else {
					showMessage(messageDiv, result.error || 'Failed to update pricing.', 'error');
				}
			} catch (error) {
				console.error('Error updating pricing:', error);
				showMessage(messageDiv, 'Failed to update pricing. Please try again.', 'error');
			} finally {
				setButtonLoading('savePricingBtn', false);
			}
		}

		// Make functions globally available for onclick handlers
		(window as any).logout = logout;
		(window as any).addHoliday = addHoliday;
		(window as any).removeHoliday = removeHoliday;
		(window as any).disableHoliday = disableHoliday;
		(window as any).enableHoliday = enableHoliday;
		(window as any).updateScheduleSettings = updateScheduleSettings;
		(window as any).updatePricingSettings = updatePricingSettings;
		(window as any).refreshRangeStatus = refreshRangeStatus;
		(window as any).extendBookingRange = extendBookingRange;

		console.log('Garden management page JavaScript loaded');
	</script>
</body>
</html>
