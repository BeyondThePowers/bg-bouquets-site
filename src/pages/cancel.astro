---
// src/pages/cancel.astro
---

<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Cancel Booking - BG Bouquet</title>

	<style>
		:root {
			--shabby-pink: #F8E7E8;
			--shabby-blue: #EFF9FA;
			--cream: #FEFCF8;
			--charcoal: #333333;
			--rose: #E8B4B8;
		}

		* {
			margin: 0;
			padding: 0;
			box-sizing: border-box;
		}

		body {
			font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;
			background-color: var(--cream);
			color: var(--charcoal);
			line-height: 1.6;
			min-height: 100vh;
			display: flex;
			align-items: center;
			justify-content: center;
			padding: 20px;
		}

		.container {
			max-width: 600px;
			width: 100%;
			background: white;
			border-radius: 12px;
			box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
			overflow: hidden;
		}

		.header {
			background: linear-gradient(135deg, var(--shabby-pink), var(--shabby-blue));
			padding: 40px 30px;
			text-align: center;
		}

		.header h1 {
			font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;
			font-size: 3rem;
			font-weight: 700;
			color: var(--charcoal);
			margin-bottom: 10px;
		}

		.header p {
			font-size: 1.1rem;
			opacity: 0.8;
		}

		.content {
			padding: 40px 30px;
		}

		.loading {
			text-align: center;
			padding: 40px 0;
		}

		.spinner {
			width: 40px;
			height: 40px;
			border: 4px solid var(--shabby-pink);
			border-top: 4px solid var(--rose);
			border-radius: 50%;
			animation: spin 1s linear infinite;
			margin: 0 auto 20px;
		}

		@keyframes spin {
			0% { transform: rotate(0deg); }
			100% { transform: rotate(360deg); }
		}

		.booking-details {
			background: var(--shabby-blue);
			padding: 25px;
			border-radius: 8px;
			margin-bottom: 30px;
		}

		.booking-details h3 {
			font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;
			font-size: 1.5rem;
			font-weight: 600;
			margin-bottom: 15px;
			color: var(--charcoal);
		}

		.detail-row {
			display: flex;
			justify-content: space-between;
			margin-bottom: 10px;
			padding: 8px 0;
			border-bottom: 1px solid rgba(51, 51, 51, 0.1);
		}

		.detail-row:last-child {
			border-bottom: none;
		}

		.detail-label {
			font-weight: 500;
			color: var(--charcoal);
		}

		.detail-value {
			font-weight: 400;
			text-align: right;
		}

		.form-group {
			margin-bottom: 25px;
		}

		.form-group label {
			display: block;
			margin-bottom: 8px;
			font-weight: 500;
			color: var(--charcoal);
		}

		.form-group textarea {
			width: 100%;
			padding: 12px;
			border: 2px solid #e1e5e9;
			border-radius: 6px;
			font-family: inherit;
			font-size: 1rem;
			resize: vertical;
			min-height: 100px;
		}

		.form-group textarea:focus {
			outline: none;
			border-color: var(--rose);
		}

		.button-group {
			display: flex;
			gap: 15px;
			flex-wrap: wrap;
		}

		.btn {
			padding: 12px 24px;
			border: none;
			border-radius: 6px;
			font-family: inherit;
			font-size: 1rem;
			font-weight: 600;
			cursor: pointer;
			transition: all 0.3s ease;
			text-decoration: none;
			display: inline-flex;
			align-items: center;
			justify-content: center;
			min-width: 140px;
		}

		.btn-cancel {
			background-color: #dc3545;
			color: white;
		}

		.btn-cancel:hover {
			background-color: #c82333;
			transform: translateY(-2px);
		}

		.btn-cancel:disabled {
			background-color: #6c757d;
			cursor: not-allowed;
			transform: none;
		}

		.btn-primary {
			background-color: var(--rose);
			color: white;
		}

		.btn-primary:hover {
			background-color: #d49ca0;
			transform: translateY(-2px);
		}

		.btn-primary:disabled {
			background-color: #6c757d;
			cursor: not-allowed;
			transform: none;
		}

		.btn-secondary {
			background-color: var(--cream);
			color: var(--charcoal);
			border: 2px solid var(--charcoal);
		}

		.btn-secondary:hover {
			background-color: var(--shabby-pink);
		}

		.error {
			background-color: #f8d7da;
			color: #721c24;
			padding: 15px;
			border-radius: 6px;
			margin-bottom: 20px;
			border: 1px solid #f5c6cb;
		}

		.success {
			background-color: #d4edda;
			color: #155724;
			padding: 20px;
			border-radius: 6px;
			text-align: center;
			border: 1px solid #c3e6cb;
		}

		.success h3 {
			font-family: inherit;
			font-weight: 600;
			margin-bottom: 10px;
		}

		/* Modern Reschedule Form Styles - Aligned with Shabby Chic Theme */
		.reschedule-header {
			text-align: center;
			margin-bottom: 24px;
		}

		.reschedule-header h3 {
			font-size: 1.5rem;
			font-weight: 600;
			color: var(--color-charcoal); /* Use consistent charcoal color */
			margin-bottom: 4px;
			font-family: var(--font-playfair); /* Use Playfair Display */
		}

		.reschedule-header p {
			color: #64748b; /* Keep existing subtle color for description */
			font-size: 0.9rem;
			font-family: var(--font-roboto); /* Use Roboto for body text */
		}

		.current-booking-card {
			background: rgba(248, 231, 232, 0.15); /* Light dusty rose background */
			border: 1px solid var(--color-dusty-rose-light); /* Match shabby chic border */
			border-radius: 0.5rem;
			padding: 1rem;
			margin-bottom: 24px;
			text-align: center;
		}

		.current-booking-label {
			font-size: 0.8rem;
			color: #64748b; /* Keep existing subtle color */
			margin-bottom: 4px;
			text-transform: uppercase;
			letter-spacing: 0.5px;
			font-family: var(--font-roboto); /* Use Roboto for labels */
		}

		.current-booking-details {
			font-weight: 600;
			color: var(--color-charcoal); /* Use consistent charcoal color */
			display: flex;
			justify-content: center;
			gap: 12px;
			flex-wrap: wrap;
			font-family: var(--font-playfair); /* Use Playfair Display for emphasis */
		}

		/* Calendar Styles - Aligned with Main Booking Calendar (Shabby Chic Theme) */
		.calendar-section {
			background: white;
			border: 2px solid var(--color-dusty-rose); /* Match main calendar border */
			border-radius: 12px;
			padding: 24px; /* Increase padding to match main calendar */
			margin-bottom: 24px;
			box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04); /* Match main calendar shadow */
		}

		.calendar-header {
			display: flex;
			justify-content: space-between;
			align-items: center;
			margin-bottom: 24px; /* Increase margin to match main calendar */
		}

		.calendar-title {
			font-size: 1.25rem; /* Increase size to match main calendar */
			font-weight: 600;
			color: var(--color-charcoal); /* Use consistent charcoal color */
			margin: 0;
			font-family: var(--font-playfair); /* Ensure Playfair Display is used */
		}

		.calendar-nav {
			background: rgba(248, 231, 232, 0.1) !important; /* Match main calendar nav buttons */
			border: 1px solid transparent !important;
			border-radius: 50% !important; /* Round shape like main calendar */
			width: 2.5rem !important; /* Fixed width like main calendar */
			height: 2.5rem !important; /* Fixed height like main calendar */
			padding: 0 !important; /* Override any padding */
			cursor: pointer;
			color: var(--color-charcoal); /* Match main calendar icon color */
			transition: all 0.2s ease; /* Match main calendar transition */
			display: flex !important;
			align-items: center !important;
			justify-content: center !important;
			flex-shrink: 0 !important; /* Prevent shrinking */
		}

		.calendar-nav:hover {
			background: var(--color-dusty-rose) !important; /* Match main calendar hover */
			border-color: var(--color-dusty-rose) !important;
			color: white !important; /* Match main calendar hover text color */
		}

		.calendar-nav:disabled {
			opacity: 0.5; /* Match main calendar disabled opacity */
			cursor: not-allowed;
		}

		.calendar-nav:disabled:hover {
			background: rgba(248, 231, 232, 0.1) !important; /* Revert to default on disabled hover */
			color: var(--color-charcoal) !important;
		}

		.calendar-weekdays {
			display: grid;
			grid-template-columns: repeat(7, 1fr);
			gap: 0.25rem; /* Match main calendar gap */
			margin-bottom: 8px;
		}

		.weekday {
			text-align: center;
			font-size: 0.75rem;
			font-weight: 500;
			color: #64748b; /* Keep existing weekday color for consistency */
			padding: 8px 4px;
			text-transform: uppercase;
			letter-spacing: 0.5px;
			font-family: var(--font-roboto); /* Use Roboto for weekday headers like main calendar */
			pointer-events: none; /* Allow touch events to pass through like main calendar */
		}

		.calendar-grid {
			display: grid;
			grid-template-columns: repeat(7, 1fr);
			gap: 0.25rem; /* Match main calendar gap */
			justify-content: center; /* Match main calendar centering */
			max-width: 100%;
			width: 100%;
			touch-action: pan-x; /* Enable horizontal swipe gestures like main calendar */
			user-select: none; /* Prevent text selection during swipes */
			position: relative;
			z-index: 1;
		}

		.calendar-day {
			aspect-ratio: 1;
			display: flex;
			align-items: center;
			justify-content: center;
			border-radius: 0.375rem; /* Match main calendar border radius */
			cursor: pointer;
			transition: all 0.2s ease; /* Match main calendar transition */
			font-weight: 600; /* Match main calendar font weight */
			font-family: var(--font-playfair); /* Use Playfair Display like main calendar */
			width: 100%;
			min-height: 42px; /* Match main calendar minimum height */
			position: relative;
			margin: 1px; /* Small margin like main calendar */
			justify-self: center;
			box-sizing: border-box;
		}

		.calendar-day.available {
			border: 1px solid var(--color-dusty-rose); /* Match main calendar available border */
			color: var(--color-charcoal); /* Match main calendar text color */
			background-color: white;
		}

		.calendar-day.available:hover {
			background-color: rgba(232, 180, 184, 0.2); /* Match main calendar hover */
			transform: scale(1.05); /* Match main calendar hover transform */
		}

		.calendar-day.selected {
			background-color: var(--color-dusty-rose-dark) !important; /* Match main calendar selected */
			border: 3px solid var(--color-dusty-rose-darker) !important;
			color: white !important;
			transform: scale(1.05) !important;
			font-weight: 700 !important; /* Bolder text for better contrast */
			font-size: 1.1em !important; /* Slightly larger text */
			box-shadow: 0 6px 16px rgba(184, 120, 126, 0.4); /* Match main calendar shadow */
			z-index: 10 !important; /* Ensure selected date appears above others */
		}

		.calendar-day.unavailable {
			background-color: #f9fafb; /* Match main calendar unavailable background */
			color: #d1d5db; /* Match main calendar unavailable text */
			cursor: not-allowed;
			border: 1px solid #e5e7eb; /* Match main calendar unavailable border */
		}

		.calendar-day.current-booking {
			background: #fef3c7;
			color: #92400e;
			border-color: #fbbf24;
			cursor: not-allowed;
			font-weight: 600;
		}

		.calendar-day-empty {
			aspect-ratio: 1;
			min-height: 44px;
		}

		/* Calendar Help Text Styling - Match Main Calendar */
		.calendar-help-text {
			display: flex;
			flex-direction: column;
			gap: 0.5rem;
			padding: 1rem;
			background: rgba(248, 231, 232, 0.3); /* Very light dusty rose background */
			border-radius: 0.5rem;
			border: 1px solid var(--color-dusty-rose-light);
			margin-top: 0.5rem;
			font-family: var(--font-roboto);
		}

		.help-step {
			display: flex;
			align-items: center;
			gap: 0.75rem;
			font-size: 0.875rem;
			color: var(--color-charcoal);
		}

		.step-number {
			display: flex;
			align-items: center;
			justify-content: center;
			width: 1.5rem;
			height: 1.5rem;
			background: var(--color-dusty-rose);
			color: white;
			border-radius: 50%;
			font-weight: 600;
			font-size: 0.75rem;
			flex-shrink: 0;
		}

		.step-text {
			font-weight: 500;
		}

		/* Mobile optimization for help text */
		@media (max-width: 767px) {
			.calendar-help-text {
				padding: 0.75rem;
				gap: 0.375rem;
			}

			.help-step {
				font-size: 0.8rem;
				gap: 0.5rem;
			}

			.step-number {
				width: 1.25rem;
				height: 1.25rem;
				font-size: 0.7rem;
			}
		}

		/* Time Selection - Aligned with Main Booking Calendar */
		.time-section {
			margin-bottom: 24px;
		}

		.time-section-title {
			font-size: 1rem;
			font-weight: 600;
			color: var(--color-charcoal); /* Use consistent charcoal color */
			margin-bottom: 12px;
			font-family: var(--font-playfair); /* Use Playfair Display for consistency */
		}

		.time-grid {
			display: grid;
			grid-template-columns: 1fr; /* Single column on mobile like main calendar */
			gap: 0.75rem; /* Match main calendar time slot gap */
		}

		/* Desktop: Two columns for time slots like main calendar */
		@media (min-width: 768px) {
			.time-grid {
				grid-template-columns: 1fr 1fr; /* Two columns on desktop */
			}
		}

		.time-slot {
			border: 2px solid var(--color-shabby-pink); /* Match main calendar time slot border */
			background: var(--color-cream); /* Match main calendar time slot background */
			padding: 0.625rem; /* More compact like main calendar */
			border-radius: 0.5rem;
			cursor: pointer;
			transition: all 0.3s ease; /* Match main calendar transition */
			text-align: center;
			min-height: 60px; /* Match main calendar time slot height */
			display: flex;
			align-items: center;
			justify-content: center;
			font-family: var(--font-playfair); /* Use Playfair Display */
			font-weight: 600; /* Match main calendar font weight */
		}

		.time-slot:hover {
			background-color: rgba(232, 180, 184, 0.2); /* Match main calendar hover */
			border-color: var(--color-dusty-rose); /* Match main calendar hover border */
			transform: scale(1.02); /* Subtle hover transform */
		}

		.time-slot.selected {
			background-color: var(--color-dusty-rose-dark) !important; /* Match main calendar selected */
			color: white !important;
			border-color: var(--color-dusty-rose-darker) !important;
			transform: scale(1.02) !important;
			box-shadow: 0 4px 8px rgba(184, 120, 126, 0.3); /* Match main calendar shadow */
		}

		.time-slot.unavailable {
			background: #f9fafb; /* Match main calendar unavailable background */
			color: #d1d5db; /* Match main calendar unavailable text */
			cursor: not-allowed;
			border: 1px solid #e5e7eb; /* Match main calendar unavailable border */
		}

		.time-slot.current-booking {
			background: #fef3c7; /* Keep existing current booking styling */
			color: #92400e;
			border-color: #fbbf24;
			cursor: not-allowed;
		}

		/* Selection Summary - Aligned with Shabby Chic Theme */
		.selection-summary {
			background: rgba(248, 231, 232, 0.3); /* Light dusty rose background like main calendar help text */
			border: 1px solid var(--color-dusty-rose-light); /* Match main calendar border */
			border-radius: 0.5rem;
			padding: 1rem;
			margin-bottom: 24px;
		}

		.summary-content {
			display: flex;
			align-items: center;
			justify-content: center;
			gap: 8px;
			flex-wrap: wrap;
		}

		.summary-label {
			font-size: 0.9rem;
			color: var(--color-charcoal); /* Use consistent charcoal color */
			font-weight: 500;
			font-family: var(--font-roboto); /* Use Roboto for consistency */
		}

		.summary-text {
			font-size: 0.9rem;
			color: var(--color-charcoal); /* Use consistent charcoal color */
			font-weight: 600;
			font-family: var(--font-playfair); /* Use Playfair Display for emphasis */
		}

		/* Mobile Responsive - Aligned with Main Calendar Design */
		@media (max-width: 767px) {
			.container {
				margin: 10px;
				max-width: none;
			}

			.header h1 {
				font-size: 2rem;
			}

			.content {
				padding: 24px 20px;
			}

			.button-group {
				flex-direction: column;
			}

			.btn {
				width: 100%;
				min-height: 48px; /* Better touch target */
			}

			.calendar-section {
				padding: 0.5rem; /* More compact padding on mobile like main calendar */
				margin: 0; /* Remove any margins */
			}

			.calendar-grid {
				grid-template-columns: repeat(7, minmax(0, 1fr)); /* Prevent column overflow like main calendar */
				gap: 1px; /* Minimal gap for mobile like main calendar */
				width: 100%; /* Use full available width */
				padding: 0 2px; /* Reduced side padding */
				margin: 0; /* Remove any margins */
			}

			.calendar-day {
				min-height: 32px; /* Reduced for better mobile fit like main calendar */
				height: 32px; /* Fixed height for consistency */
				max-width: 32px; /* Prevent horizontal overflow */
				font-size: 0.75rem; /* Smaller font for compact layout */
				border-width: 1px; /* Thinner borders on mobile */
			}

			.weekday {
				padding: 4px 1px; /* Reduced padding for compact layout like main calendar */
				font-size: 0.65rem; /* Smaller font size */
			}

			.time-grid {
				grid-template-columns: 1fr; /* Single column on mobile like main calendar */
				gap: 0.75rem;
			}

			.time-slot {
				padding: 0.625rem; /* More compact like main calendar */
				font-size: 0.9rem;
				min-height: 60px; /* Match main calendar time slot height */
			}

			.current-booking-details {
				flex-direction: column;
				gap: 4px;
			}

			.reschedule-header h3 {
				font-size: 1.25rem;
			}

			.form-group textarea {
				min-height: 120px; /* Easier to use on mobile */
			}
		}

		/* Galaxy S25 and similar phone optimizations - Match Main Calendar */
		@media (max-width: 430px) {
			.container {
				margin: 5px;
			}

			.content {
				padding: 20px 16px;
			}

			.calendar-section {
				padding: 0.25rem; /* Minimal padding */
			}

			.calendar-day {
				min-height: 45px; /* Ultra-compact for very small phones */
				height: 45px;
				max-width: 45px; /* Strict width limit */
				font-size: 0.8rem; /* Smaller but still readable */
				border-width: 0.5px; /* Thinner borders to save space */
			}

			.weekday {
				padding: 2px 0px; /* Minimal padding */
				font-size: 0.6rem; /* Very small headers */
			}

			.calendar-grid {
				gap: 0px; /* No gaps at all */
				padding: 0; /* No side padding */
			}
		}

		/* Ultra-small phones (iPhone SE, etc.) - Match Main Calendar */
		@media (max-width: 375px) {
			.calendar-day {
				min-height: 42px; /* Maximum compactness */
				height: 42px;
				max-width: 42px;
				font-size: 0.8rem;
				border-radius: 0.25rem; /* Smaller border radius */
			}

			.weekday {
				font-size: 0.55rem;
				padding: 1px 0;
			}
		}

		/* Extra small phones - Match Main Calendar */
		@media (max-width: 320px) {
			.calendar-day {
				min-height: 22px; /* Absolute minimum */
				height: 22px;
				max-width: 22px;
				font-size: 0.55rem;
			}
		}

		/* Swipe gesture visual feedback - Match Main Calendar */
		.calendar-grid {
			touch-action: pan-y; /* Allow vertical scrolling but capture horizontal swipes */
			user-select: none; /* Prevent text selection during swipes */
			position: relative;
			overflow: hidden;
		}

		/* Calendar container for slide animations */
		.calendar-section {
			position: relative;
			overflow: hidden;
		}

		/* Slide animation states with smooth, gentle transitions */
		.calendar-grid.slide-left {
			animation: slideOutLeft 0.3s ease-out;
		}

		.calendar-grid.slide-right {
			animation: slideOutRight 0.3s ease-out;
		}

		.calendar-grid.slide-in-left {
			animation: slideInLeft 0.3s ease-out;
		}

		.calendar-grid.slide-in-right {
			animation: slideInRight 0.3s ease-out;
		}

		/* Smooth slide animations without jarring effects */
		@keyframes slideOutLeft {
			0% {
				transform: translateX(0);
				opacity: 1;
			}
			100% {
				transform: translateX(-100%);
				opacity: 0.3;
			}
		}

		@keyframes slideOutRight {
			0% {
				transform: translateX(0);
				opacity: 1;
			}
			100% {
				transform: translateX(100%);
				opacity: 0.3;
			}
		}

		@keyframes slideInLeft {
			0% {
				transform: translateX(100%);
				opacity: 0.3;
			}
			100% {
				transform: translateX(0);
				opacity: 1;
			}
		}

		@keyframes slideInRight {
			0% {
				transform: translateX(-100%);
				opacity: 0.3;
			}
			100% {
				transform: translateX(0);
				opacity: 1;
			}
		}

		/* Swipe feedback pulse animation */
		.swipe-feedback {
			animation: swipePulse 0.1s ease-out;
		}

		@keyframes swipePulse {
			0% {
				transform: scale(1);
			}
			50% {
				transform: scale(1.005);
			}
			100% {
				transform: scale(1);
			}
		}

		/* Mobile swipe hint - only show on touch devices */
		@media (hover: none) and (pointer: coarse) {
			.calendar-help-text::after {
				content: "💡 Tip: Swipe left or right to navigate months";
				display: block;
				margin-top: 0.5rem;
				padding-top: 0.5rem;
				border-top: 1px solid rgba(232, 180, 184, 0.3);
				font-size: 0.75rem;
				color: #64748b;
				font-style: italic;
				text-align: center;
			}
		}
	</style>
</head>
<body>
	<div class="container">
		<div class="header">
			<h1>BG Bouquet</h1>
			<p id="header-subtitle">Booking Management</p>
		</div>
		
		<div class="content">
			<!-- Loading State -->
			<div id="loading-state" class="loading">
				<div class="spinner"></div>
				<p>Verifying your cancellation request...</p>
			</div>

			<!-- Error State -->
			<div id="error-state" class="error" style="display: none;">
				<p id="error-message"></p>
			</div>

			<!-- Action Selection -->
			<div id="action-selection" style="display: none;">
				<div class="booking-details">
					<h3>Current Booking Details</h3>
					<div class="detail-row">
						<span class="detail-label">Customer:</span>
						<span class="detail-value" id="customer-name"></span>
					</div>
					<div class="detail-row">
						<span class="detail-label">Email:</span>
						<span class="detail-value" id="customer-email"></span>
					</div>
					<div class="detail-row">
						<span class="detail-label">Date:</span>
						<span class="detail-value" id="visit-date"></span>
					</div>
					<div class="detail-row">
						<span class="detail-label">Time:</span>
						<span class="detail-value" id="visit-time"></span>
					</div>
					<div class="detail-row">
						<span class="detail-label">Visitors:</span>
						<span class="detail-value" id="visitor-count"></span>
					</div>
					<div class="detail-row">
						<span class="detail-label">Total Amount:</span>
						<span class="detail-value" id="total-amount"></span>
					</div>
				</div>

				<div style="text-align: center; margin: 30px 0;">
					<p style="font-size: 1.1rem; margin-bottom: 25px; color: var(--charcoal);">
						What would you like to do with your booking?
					</p>
				</div>

				<div class="button-group">
					<button id="reschedule-btn" class="btn btn-primary">
						Reschedule Booking
					</button>
					<button id="cancel-btn" class="btn btn-cancel">
						Cancel Booking
					</button>
					<a href="/" class="btn btn-secondary">
						Keep Booking
					</a>
				</div>
			</div>

			<!-- Cancellation Form -->
			<div id="cancellation-form" style="display: none;">
				<div class="form-group">
					<label for="cancellation-reason">Reason for Cancellation (Optional):</label>
					<textarea
						id="cancellation-reason"
						placeholder="Please let us know why you're cancelling (optional)..."
					></textarea>
				</div>

				<div class="button-group">
					<button id="confirm-cancel" class="btn btn-cancel">
						Cancel Booking
					</button>
					<button id="back-to-selection" class="btn btn-secondary">
						Back
					</button>
				</div>
			</div>

			<!-- Reschedule Form -->
			<div id="reschedule-form" style="display: none;">
				<div class="reschedule-header">
					<h3>Reschedule Your Visit</h3>
					<p>Select a new date and time for your booking</p>
				</div>

				<!-- Current Booking Display -->
				<div id="current-booking-display" class="current-booking-card">
					<div class="current-booking-label">Currently scheduled for:</div>
					<div class="current-booking-details">
						<span id="current-date-display"></span>
						<span id="current-time-display"></span>
					</div>
				</div>

				<!-- Calendar Section -->
				<div class="calendar-section">
					<div class="calendar-header">
						<button type="button" id="prev-month" class="calendar-nav" aria-label="Previous month">
							<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
								<polyline points="15,18 9,12 15,6"></polyline>
							</svg>
						</button>
						<h4 id="current-month" class="calendar-title"></h4>
						<button type="button" id="next-month" class="calendar-nav" aria-label="Next month">
							<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
								<polyline points="9,6 15,12 9,18"></polyline>
							</svg>
						</button>
					</div>

					<!-- Calendar Grid -->
					<div class="calendar-weekdays">
						<div class="weekday" aria-label="Sunday">Sun</div>
						<div class="weekday" aria-label="Monday">Mon</div>
						<div class="weekday" aria-label="Tuesday">Tue</div>
						<div class="weekday" aria-label="Wednesday">Wed</div>
						<div class="weekday" aria-label="Thursday">Thu</div>
						<div class="weekday" aria-label="Friday">Fri</div>
						<div class="weekday" aria-label="Saturday">Sat</div>
					</div>
					<div id="calendar-days" class="calendar-grid" role="grid" aria-label="Calendar"></div>

					<!-- Calendar Help Text for Rescheduling -->
					<div class="calendar-help-text">
						<div class="help-step">
							<span class="step-number">1</span>
							<span class="step-text">Select a new date</span>
						</div>
						<div class="help-step">
							<span class="step-number">2</span>
							<span class="step-text">Choose a new time slot</span>
						</div>
						<div class="help-step">
							<span class="step-number">3</span>
							<span class="step-text">Confirm your changes</span>
						</div>
					</div>
				</div>

				<!-- Time Selection -->
				<div id="time-selection" class="time-section" style="display: none;">
					<h4 class="time-section-title">Available Times</h4>
					<div id="time-slots" class="time-grid"></div>
				</div>

				<!-- Selected Summary -->
				<div id="selection-summary" class="selection-summary" style="display: none;">
					<div class="summary-content">
						<span class="summary-label">New booking:</span>
						<span id="selected-summary-text" class="summary-text"></span>
					</div>
				</div>

				<!-- Reason (at bottom as requested) -->
				<div class="form-group">
					<label for="reschedule-reason">Reason for rescheduling (optional)</label>
					<textarea
						id="reschedule-reason"
						placeholder="Let us know why you're rescheduling..."
						rows="3"
					></textarea>
				</div>

				<!-- Action Buttons -->
				<div class="button-group">
					<button id="confirm-reschedule" class="btn btn-primary" style="display: none;">
						Confirm Reschedule
					</button>
					<button id="back-to-selection-2" class="btn btn-secondary">
						Back
					</button>
				</div>
			</div>

			<!-- Success State -->
			<div id="success-state" class="success" style="display: none;">
				<h3>Booking Cancelled Successfully</h3>
				<p>Your booking has been cancelled and you will receive a confirmation email shortly.</p>
				<p style="margin-top: 15px;">
					<a href="/" class="btn btn-secondary">Return to Homepage</a>
				</p>
			</div>
		</div>
	</div>

	<script>
		// Get cancellation token from URL
		const urlParams = new URLSearchParams(window.location.search);
		const cancellationToken = urlParams.get('token');

		// DOM elements
		const loadingState = document.getElementById('loading-state') as HTMLElement;
		const errorState = document.getElementById('error-state') as HTMLElement;
		const errorMessage = document.getElementById('error-message') as HTMLElement;
		const actionSelection = document.getElementById('action-selection') as HTMLElement;
		const cancellationForm = document.getElementById('cancellation-form') as HTMLElement;
		const rescheduleForm = document.getElementById('reschedule-form') as HTMLElement;
		const successState = document.getElementById('success-state') as HTMLElement;
		const headerSubtitle = document.getElementById('header-subtitle') as HTMLElement;

		// Action buttons
		const rescheduleBtn = document.getElementById('reschedule-btn') as HTMLButtonElement;
		const cancelBtn = document.getElementById('cancel-btn') as HTMLButtonElement;
		const confirmCancelBtn = document.getElementById('confirm-cancel') as HTMLButtonElement;
		const confirmRescheduleBtn = document.getElementById('confirm-reschedule') as HTMLButtonElement;
		const backToSelectionBtn = document.getElementById('back-to-selection') as HTMLButtonElement;
		const backToSelection2Btn = document.getElementById('back-to-selection-2') as HTMLButtonElement;

		// Form elements
		const reasonTextarea = document.getElementById('cancellation-reason') as HTMLTextAreaElement;
		const rescheduleReasonTextarea = document.getElementById('reschedule-reason') as HTMLTextAreaElement;

		// Modern calendar elements
		const currentDateDisplay = document.getElementById('current-date-display') as HTMLElement;
		const currentTimeDisplay = document.getElementById('current-time-display') as HTMLElement;
		const prevMonthBtn = document.getElementById('prev-month') as HTMLButtonElement;
		const nextMonthBtn = document.getElementById('next-month') as HTMLButtonElement;
		const currentMonthEl = document.getElementById('current-month') as HTMLElement;
		const calendarDays = document.getElementById('calendar-days') as HTMLElement;
		const timeSelection = document.getElementById('time-selection') as HTMLElement;
		const timeSlots = document.getElementById('time-slots') as HTMLElement;
		const selectionSummary = document.getElementById('selection-summary') as HTMLElement;
		const selectedSummaryText = document.getElementById('selected-summary-text') as HTMLElement;

		// State variables
		interface BookingData {
			customerName: string;
			email: string;
			date: string;
			time: string;
			visitors: number;
			amount: number;
			rescheduleCount?: number;
		}

		let currentBookingData: BookingData | null = null;
		let availabilityData: Record<string, string[]> | null = null;
		let selectedDate: string | null = null;
		let selectedTime: string | null = null;

		// Calendar state
		let currentDate = new Date();

		// Initialize page
		async function initializePage(): Promise<void> {
			if (!cancellationToken) {
				showError('Invalid cancellation link. Please check your email for the correct link.');
				return;
			}

			// Test mode for development
			if (cancellationToken === 'test') {
				showBookingDetails({
					customerName: 'Test Customer',
					email: 'test@example.com',
					date: '2024-07-15',
					time: '10:00 AM',
					visitors: 2,
					amount: 50
				});
				return;
			}

			try {
				// Validate cancellation token
				const response = await fetch(`/api/cancel-booking?token=${encodeURIComponent(cancellationToken)}`);
				const data = await response.json();

				if (!response.ok) {
					showError(data.error || 'Invalid cancellation link.');
					return;
				}

				// Show booking details
				showBookingDetails(data.booking);
			} catch (error) {
				console.error('Error validating cancellation token:', error);
				showError('Unable to load booking details. Please try again.');
			}
		}

		function showError(message: string): void {
			if (loadingState) loadingState.style.display = 'none';
			if (errorMessage) errorMessage.textContent = message;
			if (errorState) errorState.style.display = 'block';
		}

		function showBookingDetails(booking: BookingData): void {
			if (loadingState) loadingState.style.display = 'none';
			currentBookingData = booking;

			// Populate booking details
			const customerNameEl = document.getElementById('customer-name');
			const customerEmailEl = document.getElementById('customer-email');
			const visitDateEl = document.getElementById('visit-date');
			const visitTimeEl = document.getElementById('visit-time');
			const visitorCountEl = document.getElementById('visitor-count');
			const totalAmountEl = document.getElementById('total-amount');

			if (customerNameEl) customerNameEl.textContent = booking.customerName;
			if (customerEmailEl) customerEmailEl.textContent = booking.email;
			if (visitDateEl) {
				// Parse the date string as local date to avoid timezone issues
				const [year, month, day] = booking.date.split('-').map(Number);
				const visitDate = new Date(year, month - 1, day); // month is 0-indexed
				visitDateEl.textContent = visitDate.toLocaleDateString('en-US', {
					weekday: 'long',
					year: 'numeric',
					month: 'long',
					day: 'numeric'
				});
			}
			if (visitTimeEl) visitTimeEl.textContent = booking.time;
			if (visitorCountEl) visitorCountEl.textContent = booking.visitors.toString();
			if (totalAmountEl) totalAmountEl.textContent = `$${booking.amount}`;

			// Show reschedule count if any
			if (booking.rescheduleCount && booking.rescheduleCount > 0 && headerSubtitle) {
				headerSubtitle.textContent = `Booking Management (Rescheduled ${booking.rescheduleCount} time${booking.rescheduleCount > 1 ? 's' : ''})`;
			}

			if (actionSelection) actionSelection.style.display = 'block';
		}

		// Event Listeners
		if (rescheduleBtn) {
			rescheduleBtn.addEventListener('click', () => {
				if (actionSelection) actionSelection.style.display = 'none';
				if (headerSubtitle) headerSubtitle.textContent = 'Reschedule Booking';
				if (rescheduleForm) rescheduleForm.style.display = 'block';

				// Show current booking info
				if (currentBookingData && currentDateDisplay && currentTimeDisplay) {
					// Parse the date string as local date to avoid timezone issues
					const [year, month, day] = currentBookingData.date.split('-').map(Number);
					const visitDate = new Date(year, month - 1, day); // month is 0-indexed
					const formattedDate = visitDate.toLocaleDateString('en-US', {
						weekday: 'long',
						month: 'long',
						day: 'numeric'
					});
					currentDateDisplay.textContent = formattedDate;
					currentTimeDisplay.textContent = currentBookingData.time;
				}

				loadAvailability();
			});
		}

		if (cancelBtn) {
			cancelBtn.addEventListener('click', () => {
				if (actionSelection) actionSelection.style.display = 'none';
				if (headerSubtitle) headerSubtitle.textContent = 'Cancel Booking';
				if (cancellationForm) cancellationForm.style.display = 'block';
			});
		}

		if (backToSelectionBtn) {
			backToSelectionBtn.addEventListener('click', () => {
				if (cancellationForm) cancellationForm.style.display = 'none';
				if (headerSubtitle) headerSubtitle.textContent = 'Booking Management';
				if (actionSelection) actionSelection.style.display = 'block';
			});
		}

		if (backToSelection2Btn) {
			backToSelection2Btn.addEventListener('click', () => {
				if (rescheduleForm) rescheduleForm.style.display = 'none';
				if (headerSubtitle) headerSubtitle.textContent = 'Booking Management';
				if (actionSelection) actionSelection.style.display = 'block';

				// Reset calendar state
				selectedDate = null;
				selectedTime = null;

				// Hide time selection and summary
				if (timeSelection) timeSelection.style.display = 'none';
				if (selectionSummary) selectionSummary.style.display = 'none';
				if (confirmRescheduleBtn) confirmRescheduleBtn.style.display = 'none';
			});
		}

		// Handle cancellation confirmation
		if (confirmCancelBtn) {
			confirmCancelBtn.addEventListener('click', async () => {
				if (!confirm('Are you sure you want to cancel this booking? This action cannot be undone.')) {
					return;
				}

				confirmCancelBtn.disabled = true;
				confirmCancelBtn.textContent = 'Cancelling...';

				try {
					const reasonValue = reasonTextarea ? reasonTextarea.value.trim() || null : null;

					const response = await fetch('/api/cancel-booking', {
						method: 'POST',
						headers: {
							'Content-Type': 'application/json',
						},
						body: JSON.stringify({
							cancellationToken,
							reason: reasonValue
						})
					});

					const data = await response.json();

					if (!response.ok) {
						throw new Error(data.error || 'Cancellation failed');
					}

					// Show success state
					if (cancellationForm) cancellationForm.style.display = 'none';
					if (headerSubtitle) headerSubtitle.textContent = 'Booking Cancelled';
					if (successState) successState.style.display = 'block';

					const successTitle = document.querySelector('#success-state h3');
					const successText = document.querySelector('#success-state p');
					if (successTitle) successTitle.textContent = 'Booking Cancelled Successfully';
					if (successText) successText.textContent = 'Your booking has been cancelled and you will receive a confirmation email shortly.';

				} catch (error: unknown) {
					console.error('Cancellation error:', error);
					const errorMessage = error instanceof Error ? error.message : 'Failed to cancel booking. Please try again.';
					showError(errorMessage);
					confirmCancelBtn.disabled = false;
					confirmCancelBtn.textContent = 'Cancel Booking';
				}
			});
		}

		// Handle reschedule confirmation
		if (confirmRescheduleBtn) {
			confirmRescheduleBtn.addEventListener('click', async () => {
				if (!selectedDate || !selectedTime) {
					showError('Please select a new date and time for your booking.');
					return;
				}

				if (!confirm(`Are you sure you want to reschedule your booking to ${selectedDate} at ${selectedTime}?`)) {
					return;
				}

				confirmRescheduleBtn.disabled = true;
				confirmRescheduleBtn.textContent = 'Rescheduling...';

				try {
					// Test mode - simulate success
					if (cancellationToken === 'test') {
						// Simulate API delay
						await new Promise(resolve => setTimeout(resolve, 1000));

						// Show success state
						if (rescheduleForm) rescheduleForm.style.display = 'none';
						if (headerSubtitle) headerSubtitle.textContent = 'Booking Rescheduled';
						if (successState) successState.style.display = 'block';

						const successTitle = document.querySelector('#success-state h3');
						const successText = document.querySelector('#success-state p');
						if (successTitle) successTitle.textContent = 'Booking Rescheduled Successfully (Test Mode)';
						if (successText) {
							// Parse the date string as local date to avoid timezone issues
							const [year, month, day] = selectedDate.split('-').map(Number);
							const visitDate = new Date(year, month - 1, day); // month is 0-indexed
							const formattedDate = visitDate.toLocaleDateString('en-US', {
								weekday: 'long',
								year: 'numeric',
								month: 'long',
								day: 'numeric'
							});
							successText.textContent = `Your booking has been rescheduled to ${formattedDate} at ${selectedTime}. You will receive a confirmation email shortly.`;
						}
						return;
					}

					const reasonValue = rescheduleReasonTextarea ? rescheduleReasonTextarea.value.trim() || null : null;

					const response = await fetch('/api/reschedule-booking', {
						method: 'POST',
						headers: {
							'Content-Type': 'application/json',
						},
						body: JSON.stringify({
							cancellationToken,
							newDate: selectedDate,
							newTime: selectedTime,
							reason: reasonValue
						})
					});

					const data = await response.json();

					if (!response.ok) {
						throw new Error(data.error || 'Reschedule failed');
					}

					// Show success state
					if (rescheduleForm) rescheduleForm.style.display = 'none';
					if (headerSubtitle) headerSubtitle.textContent = 'Booking Rescheduled';
					if (successState) successState.style.display = 'block';

					const successTitle = document.querySelector('#success-state h3');
					const successText = document.querySelector('#success-state p');
					if (successTitle) successTitle.textContent = 'Booking Rescheduled Successfully';
					if (successText) {
						// Parse the date string as local date to avoid timezone issues
						const [year, month, day] = selectedDate.split('-').map(Number);
						const visitDate = new Date(year, month - 1, day); // month is 0-indexed
						const formattedDate = visitDate.toLocaleDateString('en-US', {
							weekday: 'long',
							year: 'numeric',
							month: 'long',
							day: 'numeric'
						});
						successText.textContent = `Your booking has been rescheduled to ${formattedDate} at ${selectedTime}. You will receive a confirmation email shortly.`;
					}

				} catch (error: unknown) {
					console.error('Reschedule error:', error);
					const errorMessage = error instanceof Error ? error.message : 'Failed to reschedule booking. Please try again.';
					showError(errorMessage);
					confirmRescheduleBtn.disabled = false;
					confirmRescheduleBtn.textContent = 'Confirm Reschedule';
				}
			});
		}

		// Load availability data and initialize calendar
		async function loadAvailability(): Promise<void> {
			try {
				const response = await fetch('/api/availability');
				const data = await response.json();

				if (!response.ok) {
					throw new Error(data.error || 'Failed to load availability');
				}

				availabilityData = data;
				initializeCalendar();

			} catch (error) {
				console.error('Error loading availability:', error);
				showError('Failed to load available dates. Please try again.');
			}
		}

		// Initialize modern calendar
		function initializeCalendar(): void {
			if (!availabilityData) return;

			// Set up calendar state
			const validDates = Object.keys(availabilityData);
			if (validDates.length > 0) {
				const firstValidDate = new Date(validDates[0]);
				currentDate = new Date(firstValidDate.getFullYear(), firstValidDate.getMonth(), 1);
			}

			// Set up event listeners
			setupCalendarEventListeners();

			// Render calendar
			renderCalendar();
		}

		// Set up calendar event listeners
		function setupCalendarEventListeners(): void {
			if (prevMonthBtn) {
				prevMonthBtn.addEventListener('click', () => {
					if (!prevMonthBtn.disabled && !prevMonthBtn.classList.contains('cursor-not-allowed')) {
						animateMonthChange(-1, 'right');
					}
				});
			}

			if (nextMonthBtn) {
				nextMonthBtn.addEventListener('click', () => {
					if (!nextMonthBtn.disabled && !nextMonthBtn.classList.contains('cursor-not-allowed')) {
						animateMonthChange(1, 'left');
					}
				});
			}

			// Set up swipe navigation for mobile
			setupSwipeNavigation();
		}

		// Swipe navigation setup
		function setupSwipeNavigation(): void {
			const calendarGrid = document.getElementById('calendar-days');
			if (!calendarGrid) return;

			let touchStartX = 0;
			let touchStartY = 0;
			let touchEndX = 0;
			let touchEndY = 0;

			// Minimum swipe distance (in pixels) - reduced for easier detection
			const minSwipeDistance = 30;
			// Maximum vertical movement allowed for horizontal swipe
			const maxVerticalMovement = 150;

			calendarGrid.addEventListener('touchstart', (e: TouchEvent) => {
				touchStartX = e.changedTouches[0].clientX;
				touchStartY = e.changedTouches[0].clientY;
				calendarGrid.classList.add('swiping');
			}, { passive: true });

			calendarGrid.addEventListener('touchend', (e: TouchEvent) => {
				touchEndX = e.changedTouches[0].clientX;
				touchEndY = e.changedTouches[0].clientY;
				calendarGrid.classList.remove('swiping');
				handleSwipeGesture();
			}, { passive: true });

			calendarGrid.addEventListener('touchcancel', () => {
				calendarGrid.classList.remove('swiping');
			}, { passive: true });

			function handleSwipeGesture(): void {
				const horizontalDistance = touchEndX - touchStartX;
				const verticalDistance = Math.abs(touchEndY - touchStartY);

				// Check if this is a horizontal swipe (not vertical scroll)
				if (Math.abs(horizontalDistance) < minSwipeDistance || verticalDistance > maxVerticalMovement) {
					return;
				}

				// Determine swipe direction and navigate with animation
				if (horizontalDistance > 0) {
					// Swipe right - go to previous month
					if (prevMonthBtn && !prevMonthBtn.disabled && !prevMonthBtn.classList.contains('cursor-not-allowed')) {
						animateMonthChange(-1, 'right');
					}
				} else if (horizontalDistance < 0) {
					// Swipe left - go to next month
					if (nextMonthBtn && !nextMonthBtn.disabled && !nextMonthBtn.classList.contains('cursor-not-allowed')) {
						animateMonthChange(1, 'left');
					}
				}
			}

		}

		// Animate month change with slide effect (shared function)
		function animateMonthChange(direction: number, swipeDirection: string): void {
			const calendarGrid = document.getElementById('calendar-days');
			if (!calendarGrid) return;

			const currentMonthEl = document.getElementById('currentMonth');
			const calendarContainer = calendarGrid.closest('.bg-white');

			// Add pulse feedback to calendar container
			if (calendarContainer) {
				calendarContainer.classList.add('swipe-feedback');
				setTimeout(() => {
					calendarContainer.classList.remove('swipe-feedback');
				}, 100);
			}

			// Add changing class to month header
			if (currentMonthEl) {
				currentMonthEl.classList.add('changing');
			}

			// Add slide out animation
			const slideOutClass = swipeDirection === 'left' ? 'slide-left' : 'slide-right';
			calendarGrid.classList.add(slideOutClass);

			// After slide out animation, change month and slide in
			setTimeout(() => {
				if (!calendarGrid) return;

				// Remove slide out class
				calendarGrid.classList.remove(slideOutClass);

				// Navigate to new month
				navigateToMonth(direction);

				// Add slide in animation
				const slideInClass = swipeDirection === 'left' ? 'slide-in-left' : 'slide-in-right';
				calendarGrid.classList.add(slideInClass);

				// Remove month header changing class
				if (currentMonthEl) {
					currentMonthEl.classList.remove('changing');
				}

				// Clean up slide in animation
				setTimeout(() => {
					if (calendarGrid) {
						calendarGrid.classList.remove(slideInClass);
					}
				}, 300);
			}, 300);
		}

		// Render calendar for current month
		function renderCalendar(): void {
			if (!availabilityData || !calendarDays || !currentMonthEl) return;

			const year = currentDate.getFullYear();
			const month = currentDate.getMonth();

			// Update month header
			currentMonthEl.textContent = new Date(year, month).toLocaleDateString('en-US', {
				month: 'long',
				year: 'numeric'
			});

			// Update navigation button states
			updateNavigationButtons();

			// Clear previous days
			calendarDays.innerHTML = '';

			// Get first day of month and number of days
			const firstDay = new Date(year, month, 1).getDay();
			const daysInMonth = new Date(year, month + 1, 0).getDate();

			// Add empty cells for days before month starts
			for (let i = 0; i < firstDay; i++) {
				const emptyDay = document.createElement('div');
				emptyDay.className = 'calendar-day-empty';
				calendarDays.appendChild(emptyDay);
			}

			// Add days of the month
			for (let day = 1; day <= daysInMonth; day++) {
				const dayEl = document.createElement('button');
				dayEl.type = 'button';
				dayEl.textContent = day.toString();

				const dateStr = `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
				const dateObj = new Date(year, month, day);
				const formattedDate = dateObj.toLocaleDateString('en-US', {
					weekday: 'long',
					month: 'long',
					day: 'numeric'
				});

				// Base styling for all day buttons
				dayEl.className = 'calendar-day';
				dayEl.setAttribute('role', 'gridcell');

				// Check if date is available
				if (availabilityData[dateStr]) {
					// Check if this is the current booking date
					if (currentBookingData && dateStr === currentBookingData.date) {
						dayEl.className += ' current-booking';
						dayEl.title = `Current booking date: ${formattedDate}`;
						dayEl.setAttribute('aria-label', `Current booking date: ${formattedDate}`);
						dayEl.disabled = true;
					} else {
						dayEl.className += ' available';
						dayEl.setAttribute('aria-label', `Select ${formattedDate}`);
						dayEl.addEventListener('click', () => selectDate(dateStr));

						// Highlight selected date
						if (dateStr === selectedDate) {
							dayEl.className += ' selected';
							dayEl.setAttribute('aria-pressed', 'true');
						} else {
							dayEl.setAttribute('aria-pressed', 'false');
						}
					}
				} else {
					// Unavailable date styling
					dayEl.className += ' unavailable';
					dayEl.disabled = true;
					dayEl.setAttribute('aria-label', `${formattedDate} - unavailable`);
				}

				calendarDays.appendChild(dayEl);
			}
		}

		// Navigate to next/previous month with available dates
		function navigateToMonth(direction: number): void {
			const maxAttempts = 24; // Prevent infinite loops (2 years)
			let attempts = 0;

			do {
				currentDate.setMonth(currentDate.getMonth() + direction);
				attempts++;

				// Check if this month has any available dates
				if (monthHasAvailableDates(currentDate) || attempts >= maxAttempts) {
					break;
				}
			} while (attempts < maxAttempts);

			renderCalendar();
		}

		// Check if a month has any available dates
		function monthHasAvailableDates(date: Date): boolean {
			if (!availabilityData) return false;

			const year = date.getFullYear();
			const month = date.getMonth();
			const daysInMonth = new Date(year, month + 1, 0).getDate();

			// Check each day of the month
			for (let day = 1; day <= daysInMonth; day++) {
				const dateStr = `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
				if (availabilityData[dateStr]) {
					return true;
				}
			}

			return false;
		}

		// Update navigation button states
		function updateNavigationButtons(): void {
			if (!availabilityData || !prevMonthBtn || !nextMonthBtn) return;

			const validDates = Object.keys(availabilityData);
			if (validDates.length === 0) {
				prevMonthBtn.disabled = true;
				nextMonthBtn.disabled = true;
				return;
			}

			// Get the range of available months
			const firstDate = new Date(validDates[0]);
			const lastDate = new Date(validDates[validDates.length - 1]);

			const currentYear = currentDate.getFullYear();
			const currentMonth = currentDate.getMonth();

			// Check if we can go to previous month
			const canGoPrev = currentYear > firstDate.getFullYear() ||
							 (currentYear === firstDate.getFullYear() && currentMonth > firstDate.getMonth());

			// Check if we can go to next month
			const canGoNext = currentYear < lastDate.getFullYear() ||
							 (currentYear === lastDate.getFullYear() && currentMonth < lastDate.getMonth());

			prevMonthBtn.disabled = !canGoPrev;
			nextMonthBtn.disabled = !canGoNext;
		}

		// Select date and show time slots
		function selectDate(date: string): void {
			selectedDate = date;
			selectedTime = null;

			// Update calendar UI
			renderCalendar();

			// Show time slots for selected date
			showTimeSlots(date);
		}

		// Show available time slots for selected date
		function showTimeSlots(date: string): void {
			if (!availabilityData || !timeSlots || !timeSelection) return;

			const availableTimes = availabilityData[date] || [];

			// Clear existing time slots
			timeSlots.innerHTML = '';

			// Show time selection section
			timeSelection.style.display = 'block';

			availableTimes.forEach((time: string) => {
				const timeButton = document.createElement('button');
				timeButton.type = 'button';
				timeButton.className = 'time-slot';
				timeButton.textContent = time;

				// Check if this is the current booking time
				if (currentBookingData && date === currentBookingData.date && time === currentBookingData.time) {
					timeButton.className += ' current-booking';
					timeButton.title = 'Current booking time';
					timeButton.disabled = true;
				} else {
					timeButton.addEventListener('click', () => selectTime(time));
				}

				timeSlots.appendChild(timeButton);
			});
		}

		// Select time slot
		function selectTime(time: string): void {
			selectedTime = time;

			// Update time selection UI
			document.querySelectorAll('.time-slot').forEach((btn: Element) => {
				btn.classList.remove('selected');
			});

			// Find and highlight selected time
			const timeButtons = timeSlots.querySelectorAll('.time-slot');
			timeButtons.forEach((btn: Element) => {
				if (btn.textContent === time) {
					btn.classList.add('selected');
				}
			});

			// Show selection summary
			updateSelectionSummary();

			// Show confirm button
			if (confirmRescheduleBtn) {
				confirmRescheduleBtn.style.display = 'inline-flex';
			}
		}

		// Update selection summary
		function updateSelectionSummary(): void {
			if (!selectedDate || !selectedTime || !selectionSummary || !selectedSummaryText) return;

			// Parse the date string as local date to avoid timezone issues
			const [year, month, day] = selectedDate.split('-').map(Number);
			const visitDate = new Date(year, month - 1, day); // month is 0-indexed
			const formattedDate = visitDate.toLocaleDateString('en-US', {
				weekday: 'long',
				month: 'long',
				day: 'numeric'
			});

			selectedSummaryText.textContent = `${formattedDate} at ${selectedTime}`;
			selectionSummary.style.display = 'block';
		}

		// Initialize page when DOM is loaded
		document.addEventListener('DOMContentLoaded', initializePage);
	</script>
</body>
</html>
