---
import Layout from '../layouts/Layout.astro';
---

<Layout
	title="Beautiful Cut-Your-Own Bouquet Farm in Southern Alberta"
	description="Visit BG Bouquet Garden near Waterton National Park. Create stunning bouquets from our seasonal flower fields. Open daily 9AM-6PM. Book your visit today!"
	image="/og-image.jpg"
>
	<!-- Hero Section -->
	<section id="home" class="min-h-screen flex items-center py-20 texture-background-home">
		<div class="max-w-7xl mx-auto px-4 w-full">
			<div class="grid lg:grid-cols-5 gap-12 items-center">

				<!-- Left Column - Content -->
				<div class="lg:col-span-3 space-y-8 flex flex-col justify-between h-full">

						<h1 class="text-4xl md:text-6xl lg:text-7xl xl:text-[8.5rem] font-allura text-charcoal leading-none hero-header-text center-mobile-text keep-centered">
							Wander, Snip <br>& Gather
						</h1>

						<p class="text-xl md:text-2xl font-roboto text-charcoal leading-relaxed center-mobile-text">
							A U-pick fresh-cut flower bouquet experience for everyone! Perfect for relaxing, having fun, and making joyful memories near the sunny foothills of Southern Alberta.
						</p>

					<!-- Key Information -->
					<div class="shabby-card p-6 distressed-shadow">
						<h3 class="text-xl font-playfair font-bold text-charcoal mb-4 relative center-mobile-text keep-centered">
							Visit Information
						</h3>
						<div class="grid sm:grid-cols-2 gap-4 text-sm">
							<div class="flex items-top space-x-3">
								<div class="w-10 h-10 rounded-lg flex items-center justify-center vintage-border">
									<svg class="w-5 h-5" style="color: #E8B4B8;" fill="currentColor" viewBox="0 0 20 20">
										<path fill-rule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clip-rule="evenodd"></path>
									</svg>
								</div>
								<div>
									<p class="font-playfair font-semibold" style="color: #333333;">Location</p>
									<a href="https://maps.google.com/?q=49.333472,-113.634417" target="_blank" class="font-roboto hover:underline transition-all duration-300 flex items-center space-x-1 group" style="color: #333333;">
										<span>Hill Spring Area, Southern Alberta</span>
										<svg class="w-4 h-4 opacity-60 group-hover:opacity-100 transition-opacity duration-300" style="color: #E8B4B8;" fill="currentColor" viewBox="0 0 20 20">
											<path d="M11 3a1 1 0 100 2h2.586l-6.293 6.293a1 1 0 101.414 1.414L15 6.414V9a1 1 0 102 0V4a1 1 0 00-1-1h-5z"></path>
											<path d="M5 5a2 2 0 00-2 2v6a2 2 0 002 2h6a2 2 0 002-2v-2a1 1 0 10-2 0v2H5V7h2a1 1 0 000-2H5z"></path>
										</svg>
									</a>
								</div>
							</div>
							<div class="flex items-top space-x-3">
								<div class="w-10 h-10 rounded-lg flex items-center justify-center vintage-border">
									<svg class="w-5 h-5" style="color: #E8B4B8;" fill="currentColor" viewBox="0 0 20 20">
										<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clip-rule="evenodd"></path>
									</svg>
								</div>
								<div>
									<p class="font-playfair font-semibold" style="color: #333333;">Hours</p>
									<p class="font-roboto" style="color: #333333;">Open Thursday, Friday & Saturday</p>
									<p class="text-gray-600">10:00 AM - 1:00 PM & 6:00 PM - 9:00 PM</p>
								</div>
							</div>
							<div class="flex items-top space-x-3">
								<div class="w-10 h-10 rounded-lg flex items-center justify-center vintage-border">
									<svg class="w-5 h-5" style="color: #E8B4B8;" fill="currentColor" viewBox="0 0 20 20">
										<path d="M2 3a1 1 0 011-1h2.153a1 1 0 01.986.836l.74 4.435a1 1 0 01-.54 1.06l-1.548.773a11.037 11.037 0 006.105 6.105l.774-1.548a1 1 0 011.059-.54l4.435.74a1 1 0 01.836.986V17a1 1 0 01-1 1h-2C7.82 18 2 12.18 2 5V3z"></path>
									</svg>
								</div>
								<div>
									<p class="font-playfair font-semibold" style="color: #333333;">Phone</p>
									<p class="font-roboto" style="color: #333333;">(403) 393-8285</p>
								</div>
							</div>
							<div class="flex items-top space-x-3">
								<div class="w-10 h-10 rounded-lg flex items-center justify-center vintage-border">
									<svg class="w-5 h-5" style="color: #E8B4B8;" fill="currentColor" viewBox="0 0 20 20">
										<path fill-rule="evenodd" d="M19 7l-.867 12.142A2 2 0 0116.138 21H3.862a2 2 0 01-1.995-1.858L1 7m18 0l-2-4H3l-2 4m18 0H1m11 0V5a1 1 0 00-1-1H9a1 1 0 00-1 1v2h4z" clip-rule="evenodd"></path>
									</svg>
								</div>
								<div>
									<p class="font-playfair font-semibold" style="color: #333333;">Email</p>
									<p class="font-roboto" style="color: #333333;">bev@bgbouquet.com</p>
								</div>
							</div>
						</div>
					</div>
				</div>

				<div class="shabby-card p-8 lg:p-12 distressed-shadow text-center lg:col-span-2" style="height: 100%;">
					<h2 class="text-3xl md:text-4xl font-playfair font-bold mb-6" style="color: #333333;">
						Simple Pricing
					</h2>

					<div class="mb-8">
						<div class="font-allura mb-4 base-price" style="color: #E8B4B8;">
							$35
						</div>
						<div class="text-xl font-playfair font-semibold mb-2" style="color: #333333;">
							Per Bouquet
						</div>
						<p class="text-lg font-roboto max-w-2xl mx-auto" style="color: #333333;">
							Each bouquet can have up to 25 stems from our beautiful selection of flowers.
						</p>
					</div>

					<div class="grid md:grid-cols-2 gap-6 mb-8">
						<div class="flex flex-col items-center">
							<div class="w-12 h-12 rounded-full flex items-center justify-center mb-3" style="background-color: #F8E7E8;">
								<svg class="w-6 h-6" style="color: #E8B4B8;" fill="currentColor" viewBox="0 0 24 24">
									<path d="M12 2C13.1 2 14 2.9 14 4V5H16C17.1 5 18 5.9 18 7V19C18 20.1 17.1 21 16 21H8C6.9 21 6 20.1 6 19V7C6 5.9 6.9 5 8 5H10V4C10 2.9 10.9 2 12 2ZM12 4V5H12V4ZM8 7V19H16V7H8Z"></path>
								</svg>
							</div>
							<h3 class="font-playfair font-semibold mb-2" style="color: #333333;">Bouquet Vessels</h3>
							<p class="text-sm font-roboto text-center" style="color: #333333;">Free wrapping paper, or bring your own vessel or buy one for a small fee.</p>
						</div>

						<div class="flex flex-col items-center">
							<div class="w-12 h-12 rounded-full flex items-center justify-center mb-3" style="background-color: #F8E7E8;">
								<svg class="w-6 h-6" style="color: #E8B4B8;" fill="currentColor" viewBox="0 0 20 20">
									<path fill-rule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clip-rule="evenodd"></path>
								</svg>
							</div>
							<h3 class="font-playfair font-semibold mb-2" style="color: #333333;">Beautiful Location</h3>
							<p class="text-sm font-roboto text-center" style="color: #333333;">Stunning mountain views in the country side of rural southern alberta</p>
						</div>
					</div>

					<a href="#pricing" class="vintage-button px-8 py-4 text-lg font-playfair font-semibold inline-block rounded-sm">
						Book Your Bouquet Experience
					</a>
				</div>

				</div>
			</div>
		</div>
		<img loading="lazy" aria-hidden="true" src="/images/bg-bouquet-left-flower.webp" aria-hidden="true" alt="" pointer-events-none class="hero-decorative-flower-left-bottom desktop-decoration" />
		<img loading="lazy" src="/images/bg-bouquet-right-flower.webp" aria-hidden="true" alt="" pointer-events-none class="hero-decorative-flower-right-bottom desktop-decoration" />
		<img loading="lazy" src="/images/bg-bouguet-top-flowers.webp" aria-hidden="true" alt="" pointer-events-none class="hero-decorative-flower-left-top desktop-decoration" />
		<img loading="lazy" src="/images/bg-bouguet-top-flowers.webp" aria-hidden="true" alt="" pointer-events-none class="hero-decorative-flower-left-top-2 desktop-decoration" />
		<img loading="lazy" src="/images/bg-bouguet-top-flowers.webp" aria-hidden="true" alt="" pointer-events-none class="hero-decorative-flower-right-top-2 desktop-decoration" />
		<img loading="lazy" src="/images/bg-bouguet-top-flowers.webp" aria-hidden="true" alt="" pointer-events-none class="hero-decorative-flower-right-top desktop-decoration" />
	</section>

	<!-- Pricing Banner Section -->
	<section id="pricing" class="py-20" style="position: relative;">

		<!--- WTF -->
		<div class="py-20 white-background-container">
		</div>
		<!--- WTF -->	

		<div class="max-w-[75rem] mx-auto px-4 pricing-content" style="z-index: 2; position: relative;">

				<!-- Right Column - Booking Form -->
				<div class="lg:col-span-2" style="height: 100%;">


						<div class="text-center mb-4 lg:mb-6">
							<h2 class="text-xl lg:text-2xl font-playfair font-bold text-charcoal mb-1 lg:mb-2">
								Plan Your Visit
							</h2>
							<p class="text-sm lg:text-base font-roboto text-charcoal">Reserve your perfect flower picking experience.</p>
						</div>

						<!-- Vintage Wheelbarrow Illustration Placeholder - Smaller on desktop -->
						<!--<div class="wheel-barrow">
						</div> -->

						<!-- Modern Multi-Step Booking Form - Unified Width -->
						<div id="booking-form-container" class="transition-all duration-500 ease-in-out">
							<!-- Step Progress Indicator - Streamlined 2-Step Flow -->
							<div id="step-progress" class="mb-8" role="progressbar" aria-label="Booking progress" aria-valuenow="1" aria-valuemin="1" aria-valuemax="2">
								<div class="flex items-center justify-center space-x-4 mb-4">
									<div class="flex items-center">
										<div id="step-1-indicator" class="step-indicator active flex items-center justify-center w-8 h-8 rounded-full border-2 border-dusty-rose bg-dusty-rose text-white font-playfair font-semibold text-sm transition-all duration-300" aria-label="Step 1: Date and Time Selection">
											1
										</div>
										<span id="step-1-label" class="ml-2 text-sm font-playfair font-medium text-charcoal">Date & Time</span>
									</div>
									<div class="flex-1 h-0.5 bg-shabby-pink mx-4" aria-hidden="true"></div>
									<div class="flex items-center">
										<div id="step-2-indicator" class="step-indicator flex items-center justify-center w-8 h-8 rounded-full border-2 border-shabby-pink bg-white text-charcoal font-playfair font-semibold text-sm transition-all duration-300" aria-label="Step 2: Details and Payment">
											2
										</div>
										<span id="step-2-label" class="ml-2 text-sm font-playfair font-medium text-gray-400">Details & Payment</span>
									</div>
								</div>
							</div>

							<form id="booking-form" class="space-y-6">
								<!-- Sliding Container for Modern Transitions -->
								<div class="booking-steps-container show-step-1">
									<!-- Step 1: Date & Time Selection -->
									<div id="step-1" class="booking-step step-1 active" role="tabpanel" aria-labelledby="step-1-label" aria-hidden="false">

									<!-- Two-Column Layout: Calendar + Time Slots (Flexible Content-Driven) -->
									<div id="booking-columns" class="booking-columns mb-6">
										<!-- Left Column: Always-Visible Calendar (50% width) -->
										<div class="calendar-column">
											<div class="bg-white border border-dusty-rose-dark rounded-lg p-6 shadow-md">
												<!-- Month Navigation Header -->
												<div class="flex items-center justify-between mb-6">
													<button type="button" id="prevMonth" class="hover:bg-dusty-rose hover:bg-opacity-20 rounded-full transition-colors duration-200" aria-label="Previous month">
														<svg class="w-5 h-5 text-charcoal" fill="none" stroke="currentColor" viewBox="0 0 24 24">
															<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
														</svg>
													</button>
													<h3 id="currentMonth" class="font-playfair font-semibold text-lg text-charcoal flex-1 text-center"></h3>
													<button type="button" id="nextMonth" class="hover:bg-dusty-rose hover:bg-opacity-20 rounded-full transition-colors duration-200" aria-label="Next month">
														<svg class="w-5 h-5 text-charcoal" fill="none" stroke="currentColor" viewBox="0 0 24 24">
															<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
														</svg>
													</button>
												</div>

												<!-- Combined Calendar Grid: Headers + Days -->
												<div id="calendarGrid" class="calendar-grid mb-4">
													<!-- Weekday Headers (first row) -->
													<div class="weekday-header">Sun</div>
													<div class="weekday-header">Mon</div>
													<div class="weekday-header">Tue</div>
													<div class="weekday-header">Wed</div>
													<div class="weekday-header">Thu</div>
													<div class="weekday-header">Fri</div>
													<div class="weekday-header">Sat</div>

													<!-- Calendar Days Container (populated by JavaScript) -->
													<div id="calendarDaysContainer">
														<!-- Days will be populated by JavaScript -->
													</div>
												</div>

												<!-- Calendar Help Text -->
												<div class="calendar-help-text">
													<div class="help-step">
														<span class="step-number">1</span>
														<span class="step-text">Select a date</span>
													</div>
													<div class="help-step">
														<span class="step-number">2</span>
														<span class="step-text">Choose a time slot</span>
													</div>
													<div class="help-step">
														<span class="step-number">3</span>
														<span class="step-text">Continue to complete booking</span>
													</div>
												</div>

												<!-- Legend -->
												<div class="pt-4 border-t border-gray-200">
													<div class="flex items-center justify-center space-x-4 text-xs font-roboto">
														<div class="flex items-center space-x-1">
															<div class="w-3 h-3 border-2 rounded" style="border-color: var(--color-dusty-rose);"></div>
															<span class="text-gray-600">Available</span>
														</div>
														<div class="flex items-center space-x-1">
															<div class="w-3 h-3 bg-dusty-rose rounded"></div>
															<span class="text-gray-600">Selected</span>
														</div>
														<div class="flex items-center space-x-1">
															<div class="w-3 h-3 bg-gray-200 rounded"></div>
															<span class="text-gray-600">Unavailable</span>
														</div>
													</div>
												</div>
											</div>
										</div>

										<!-- Right Column: Time Slots -->
										<div class="time-slots-column">
											<div id="time-slots-container" class="bg-white p-6 rounded-lg shadow-md border border-dusty-rose-dark">
												<!-- Mobile Back Button -->
												<button type="button" id="mobile-back-btn" class="mobile-back-button">
													<svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
														<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
													</svg>
													Back to Calendar
												</button>

												<fieldset>
													<legend class="w-full block text-base font-playfair font-medium text-charcoal mb-4 text-center">Available Time Slots</legend>
													<div id="time-slots-content">
														<!-- Default state: No date selected -->
														<div id="no-date-selected" class="text-center py-12 px-4">
															<div class="text-gray-400 mb-4">
																<svg class="w-16 h-16 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
																	<path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
																</svg>
															</div>
															<h4 class="font-playfair font-medium text-charcoal mb-2">Select a date</h4>
															<p class="text-sm font-roboto text-gray-500">Choose a date from the calendar to see available time slots</p>
														</div>
														<!-- Time slot cards will be populated here by JavaScript -->
														<div id="time-slots" class="hidden" role="radiogroup" aria-label="Select a time slot">
														</div>
													</div>
												</fieldset>
												<input type="hidden" id="preferredTime" name="preferredTime" required>
												<input type="hidden" id="visitDate" name="visitDate" required>
											</div>
										</div>
									</div>

									<!-- Step 1 Navigation - Right Aligned -->
									<div class="flex justify-end">
										<button
											type="button"
											id="step-1-next"
											class="px-6 py-3 vintage-button bg-dusty-rose text-white font-playfair font-semibold rounded-lg transition-all duration-300 hover:bg-opacity-90 hover:shadow-lg transform hover:-translate-y-0.5 focus:outline-none focus:ring-2 focus:ring-dusty-rose focus:ring-opacity-50 disabled:opacity-50 disabled:cursor-not-allowed"
											disabled
										>
											Continue to Details
											<svg class="w-4 h-4 ml-2 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
												<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
											</svg>
										</button>
									</div>
								</div>

								<!-- Step 2: Personal Details -->
								<div id="step-2" class="booking-step step-2" role="tabpanel" aria-labelledby="step-2-label" aria-hidden="true">
									<!-- Personal Information -->
									<div class="grid grid-cols-1 lg:grid-cols-3 gap-4 mb-6">
										<div>
											<label for="fullName" class="block text-sm font-playfair font-medium text-charcoal mb-2">Full Name *</label>
											<input
												type="text"
												id="fullName"
												name="fullName"
												required
												class="w-full px-4 py-3 shabby-input text-base font-roboto rounded-lg"
												placeholder="Your full name"
											>
										</div>
										<div>
											<label for="email" class="block text-sm font-playfair font-medium text-charcoal mb-2">Email *</label>
											<input
												type="email"
												id="email"
												name="email"
												required
												class="w-full px-4 py-3 shabby-input text-base font-roboto rounded-lg"
												placeholder="your@email.com"
											>
										</div>
										<div>
											<label for="phone" class="block text-sm font-playfair font-medium text-charcoal mb-2">Phone Number <span class="text-gray-500 font-normal">(optional)</span></label>
											<input
												type="tel"
												id="phone"
												name="phone"
												class="w-full px-4 py-3 shabby-input text-base font-roboto rounded-lg"
												placeholder="(555) 123-4567"
											>
										</div>
									</div>

									<!-- Bouquet Selection -->
									<div class="mb-6">
										<label for="numberOfVisitors" class="block text-sm font-playfair font-medium text-charcoal mb-3">Number of Bouquets *</label>
										<div class="bouquet-counter">
											<div class="counter-row">
												<div class="counter-controls">
													<button type="button" id="counter-minus" class="counter-btn minus" aria-label="Decrease bouquet count">−</button>
													<input
														type="number"
														id="numberOfVisitors"
														name="numberOfVisitors"
														value="1"
														min="1"
														max="30"
														readonly
														required
														class="counter-input"
														aria-label="Number of bouquets"
													>
													<button type="button" id="counter-plus" class="counter-btn plus" aria-label="Increase bouquet count">+</button>
												</div>
												<div class="counter-price" id="counter-price">$35 CAD</div>
												<div class="counter-message hidden" id="counter-message">For 30+ bouquets, please call us to confirm availability</div>
											</div>
										</div>

									</div>

									<!-- Payment Method Choice -->
									<div class="space-y-4 mb-6">
										<label class="block text-base font-playfair font-medium text-charcoal mb-3">How would you like to pay?</label>

										<!-- Payment Options -->
										<div class="space-y-3">
											<label class="flex items-center p-4 rounded-lg border-2 cursor-pointer transition-all duration-200 hover:bg-shabby-pink" style="border-color: #E8B4B8;">
												<input
													type="radio"
													name="paymentMethod"
													value="pay_on_arrival"
													checked
													class="sr-only"
												>
												<div class="payment-radio-custom mr-3"></div>
												<div class="flex-1">
													<div class="flex items-center">
														<span class="font-playfair font-semibold text-charcoal">Pay on Arrival</span>
													</div>
													<p class="text-sm font-roboto text-charcoal mt-1">Cash or card accepted at the garden</p>
												</div>
											</label>

											<label class="flex items-center p-4 rounded-lg border-2 cursor-pointer transition-all duration-200 hover:bg-shabby-pink payment-now-option" style="border-color: #E8B4B8;">
												<input
													type="radio"
													name="paymentMethod"
													value="pay_now"
													class="sr-only"
												>
												<div class="payment-radio-custom mr-3"></div>
												<div class="flex-1">
													<div class="flex items-center">
														<span class="font-playfair font-semibold text-charcoal">Pay Now</span>
														<span class="ml-2 px-2 py-1 text-xs rounded-full font-roboto" style="background-color: #F8E7E8; color: #333">Recommended</span>
													</div>
													<p class="text-sm font-roboto text-charcoal mt-1">Secure online payment for faster check-in</p>
												</div>
											</label>
										</div>
									</div>

									<!-- Policy Notice -->
									<div class="text-center text-xs text-gray-500 mb-4">
										<p class="font-roboto">
											By booking, you agree to our
											<a href="/refund-policy" class="text-dusty-rose hover:underline">refund policy</a>
										</p>
									</div>

									<!-- Step 2 Navigation -->
									<div class="flex justify-between">
										<button
											type="button"
											id="step-2-back"
											class="px-6 py-3 border-2 border-charcoal text-charcoal font-playfair font-semibold rounded-lg transition-all duration-300 hover:bg-charcoal hover:text-white focus:outline-none focus:border-charcoal active:border-charcoal"
										>
											<svg class="w-4 h-4 mr-2 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
												<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
											</svg>
											Back
										</button>
										<button
											type="submit"
											id="bookNowBtn"
											class="px-6 py-3 vintage-button bg-dusty-rose text-white font-playfair font-semibold rounded-lg transition-all duration-300 hover:bg-opacity-90 hover:shadow-lg transform hover:-translate-y-0.5 focus:outline-none focus:ring-2 focus:ring-dusty-rose focus:ring-opacity-50"
										>
											<span id="bookingBtnText">Complete Booking</span>
											<span id="bookingSpinner" class="hidden">
												<svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
													<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
													<path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
												</svg>
												Processing...
											</span>
										</button>
									</div>

									<p class="text-xs font-roboto text-charcoal text-center mt-4">
										Secure payment powered by Square. Your information is protected.
									</p>
								</div>


							</div>
							<!-- End of sliding container -->
							</div>
						</form>

						<!-- Success Message (Hidden by default) -->
						<div id="booking-success" class="hidden transition-all duration-500 ease-in-out opacity-0 transform translate-y-4">
							<div class="text-center space-y-6 py-8">
								<!-- Success Icon -->
								<div class="w-16 h-16 mx-auto rounded-full flex items-center justify-center" style="background-color: #F8E7E8;">
									<svg class="w-8 h-8" style="color: #E8B4B8;" fill="currentColor" viewBox="0 0 20 20">
										<path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 13.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
									</svg>
								</div>

								<!-- Success Message -->
								<div class="space-y-3">
									<h3 class="text-2xl font-playfair font-bold text-charcoal">You're All Set!</h3>
									<div id="booking-details" class="space-y-2">
										<p class="font-roboto text-charcoal">
											Your bouquet experience is confirmed for:
										</p>
										<div class="bg-white p-4 rounded-lg border-2" style="border-color: #E8B4B8;">
											<p class="font-playfair font-semibold text-lg text-charcoal" id="success-date-time">
												<!-- Date and time will be inserted here -->
											</p>
											<p class="font-roboto text-sm text-charcoal mt-1" id="success-visitors">
												<!-- Visitor count will be inserted here -->
											</p>
										</div>
									</div>
									<p class="font-roboto text-charcoal" id="success-email-message">
										<!-- Email confirmation message will be inserted here -->
									</p>
								</div>

								<!-- Call-to-Action Buttons -->
								<div class="grid grid-cols-1 lg:grid-cols-2 gap-3 pt-4">
									<button
										id="make-another-booking"
										class="vintage-button px-6 py-3 text-sm lg:text-base font-playfair font-semibold rounded-sm transition-all duration-200 hover:transform hover:scale-105"
									>
										Make Another Booking
									</button>
									<a
										href="#contact"
										class="border-2 border-charcoal bg-cream px-6 py-3 rounded-sm font-playfair font-semibold hover:bg-shabby-pink transition-all duration-300 text-center text-sm lg:text-base"
									>
										Contact Us
									</a>
								</div>

								<!-- Policy Information -->
								<div class="mt-4 text-center text-sm text-gray-600">
									<p class="font-roboto">
										Need to cancel or reschedule? View our
										<a href="/refund-policy" class="text-dusty-rose hover:underline font-medium">refund policy</a>
										for terms and options.
									</p>
								</div>
							</div>
						</div>
					</div>

		</div>

	</section>

	<!-- What to Expect Section -->
	<section id="what-to-expect" class="py-20" style="position: relative;">

		<!--- WTF -->
		<div id="wood-background-container" class="py-20 texture-background-wood">
		</div>
		<!--- WTF -->

		<div class="max-w-7xl mx-auto px-4" style="z-index: 2; position: relative;">
			<div class="text-center mb-16">
				<h2 class="text-4xl md:text-5xl font-playfair font-bold mb-6" style="color: #333333;">What to Expect</h2>
				<p class="text-xl font-roboto max-w-3xl mx-auto" style="color: #333333;">
					Your perfect garden experience awaits! Here's everything you need to know for a magical visit.
				</p>
			</div>

			<!-- Main Content Grid -->
			<div class="grid lg:grid-cols-3 gap-12 mb-16">

				<!-- What to Bring -->
				<div class="shabby-card-blue p-8">
					<div class="text-center">
						<h3 class="text-xl font-playfair font-bold mb-4 text-center card-heading" style="color: #333333;">What to Bring</h3>
						<img src="/images/bg-bouquet-cherry-blossoms.webp" aria-hidden="true" alt="" class="what-to-expect-card-decorative-flower" loading="lazy" />
					</div>
					<ul class="space-y-3 font-roboto" style="color: #333333;">
						<li class="text-center">
							<div class="flex flex-col">
								<span><strong>Comfortable walking shoes</strong></span>
								<span>Ground can be uneven</span>
							</div>
						</li>
						<li class="text-center">
							<div class="flex flex-col">
								<span><strong>Weather protection</strong></span>
								<span>Hat, sunglasses, light jacket, sunscreen</span>
							</div>
						</li>
						<li class="text-center">
							<div class="flex flex-col">
								<span><strong>Water bottle</strong></span>
								<span>Stay hydrated during your visit</span>
							</div>
						</li>
						<li class="text-center">
							<div class="flex flex-col">
								<span><strong>Camera or phone</strong></span>
								<span>Capture beautiful memories</span>
							</div>
						</li>
					</ul>
				</div>

				<!-- What's Included -->
				<div class="shabby-card-blue p-8">
					<div class="text-center">
						<h3 class="text-xl font-playfair font-bold mb-4 text-center card-heading" style="color: #333333;">What's Included</h3>
						<img src="/images/bg-bouquet-yellow-flowers.webp" aria-hidden="true" alt="" class="what-to-expect-card-decorative-flower" loading="lazy" />
					</div>
					<ul class="space-y-3 font-roboto text-center" style="color: #333333;">
						<li>
							<div class="flex flex-col">
								<span><strong>Cutting tools</strong></span>
								<span>Shears/Scissors provided</span>
							</div>
						</li>
						<li>
							<div class="flex flex-col">
								<span><strong>Collection vessel</strong></span>
								<span>Perfect for gathering your blooms</span>
							</div>
						</li>
						<li>
							<div class="flex flex-col">
								<span><strong>Care instructions</strong></span>
								<span>Keep your flowers fresh longer</span>
							</div>
						</li>
						<li>
							<div class="flex flex-col">
								<span><strong>Free parking</strong></span>
								<span>Convenient on-site parking</span>
							</div>
						</li>
					</ul>
				</div>

				<!-- Farm Guidelines -->
				<div class="shabby-card-blue p-8">
					<div class="text-center">
						<h3 class="text-xl font-playfair font-bold mb-4 text-center card-heading" style="color: #333333;">Gentle Guidelines</h3>
						<img src="/images/bg-bouquet-bluebells.webp" aria-hidden="true" alt="" class="what-to-expect-card-decorative-flower" loading="lazy" />
					</div>
					<ul class="space-y-3 font-roboto text-center" style="color: #333333;">
						<li>
							<div class="flex flex-col">
								<span><strong>Stay on marked paths</strong></span>
								<span>Protects both you and the flowers</span>
							</div>
						</li>
						<li>
							<div class="flex flex-col">
								<span><strong>Cut stems cleanly</strong></span>
								<span>Use provided tools for best results</span>
							</div>
						</li>
						<li>
							<div class="flex flex-col">
								<span><strong>Children welcome</strong></span>
								<span>Please supervise little ones</span>
							</div>
						</li>
						<li>
							<div class="flex flex-col">
								<span><strong>Pet supervision</strong></span>
								<span>Keep in parking area to protect flowers</span>
							</div>
						</li>
					</ul>
				</div>
			</div>

			<!-- Experience Highlights -->
			<div class="grid lg:grid-cols-3 gap-12 mb-12">
				<div class="text-center">
					<div class="w-16 h-16 rounded-sm flex items-center justify-center mx-auto mb-4">
					<svg
						viewBox="0 0 457.378 457.378"
						class="w-16 h-16"
						fill="currentColor"
						style="color: #E8B4B8;"
						>
						<g>
							<path d="M78.856,208.152c3.542-1.944,7.191-3.746,11.003-5.337c15.102-6.291,32.065-9.488,50.396-9.488 c10.17,0,20.056,1.014,29.424,2.575l-56.048-37.98l91.612,46.942c6.522,2.214,12.181,4.422,16.745,6.343 c0.016-0.044,0.038-0.105,0.06-0.166c-5.997-23.929-23.275-75.6-64.672-100.116c-20.312-12.024-43.581-15.808-64.83-15.808 c-36.164,0-66.489,10.959-66.489,10.959S36.402,171.537,78.856,208.152z" />
							<path d="M107.582,281.036l60.732-29.775c13.909-13.609,27.675-23.548,36.488-29.274 c-16.236-5.886-39.708-12.37-64.554-12.37c-14.659,0-29.792,2.252-44.128,8.233c-58.871,24.523-82.477,102.309-82.477,102.309 s41.088,21.745,86.575,21.745c7.019,0,14.148-0.556,21.243-1.756c0.344-3.641,0.75-7.288,1.448-10.959 c4.871-25.649,18.194-47.5,33.208-64.981L107.582,281.036z" />
							<path d="M197.97,357.403l15.492-121.606c-19.268,12.587-65.197,47.169-74.558,96.431 c-11.904,62.653,40.084,125.15,40.084,125.15s69.109-38.02,82.499-99.082c-26.198-27.996-36.248-65.85-39.964-93.631 L197.97,357.403z" />
							<path d="M363.337,260.049c-2.117-1.914-4.427-3.475-6.666-5.187c-12.632,3.814-26.293,5.855-40.945,5.855 c-15.403,0-29.995-2.2-42.898-5.052l58.474,60.019l-83.259-66.842c-4.682-1.568-8.879-3.07-12.085-4.347 c1.411,25.694,8.624,77.148,43.011,108.397c30.571,27.772,75.082,32.667,102.661,32.667c15.005,0,24.995-1.45,24.995-1.45 S410.529,302.924,363.337,260.049z" />
							<path d="M351.492,171.612l-94.997,51.507c-4.21,3.258-7.851,5.809-10.688,7.686 c14.45,5.426,40.954,13.631,69.92,13.631c16.536,0,33.776-2.703,49.81-10.171c57.812-26.917,78.198-105.618,78.198-105.618 s-38.273-18.277-81.313-18.277c-16.221,0.008-33.096,2.665-48.873,9.803c-1.367,34.002-15.89,60.191-31.819,78.889L351.492,171.612 z" />
							<path d="M229.579,180.53l4.804-78.77l4.375,71.578c0,0,0.007-0.008,0.007-0.016l-0.24,7.859l-0.675,34.753 C283.832,184.091,344.771,99.134,234.383,0c0,0-53.759,44.398-61.664,101.647C202.384,122.313,219.836,154.618,229.579,180.53z" />
						</g>
					</svg>

					</div>
					<h3 class="text-xl font-playfair font-bold mb-2" style="color: #333333;">Seasonal Blooms</h3>
					<p class="font-roboto text-md" style="color: #333333;">Different flowers bloom throughout the year - spring tulips, summer sunflowers, fall dahlias</p>
				</div>
				<div class="text-center">
					<div class="w-16 h-16 rounded-sm flex items-center justify-center mx-auto mb-4" >
						<svg
							viewBox="0 0 64 64"
							class="w-16 h-16"
							fill="currentColor"
							style="color: #E8B4B8;"
							>
							<path d="M32,48c6.627,0,12-5.373,12-12s-5.373-12-12-12s-12,5.373-12,12S25.373,48,32,48z M32,28c4.418,0,8,3.582,8,8
								c0,0.553-0.447,1-1,1s-1-0.447-1-1c0-3.313-2.687-6-6-6c-0.553,0-1-0.447-1-1S31.447,28,32,28z"/>
							<path d="M32,52c8.837,0,16-7.162,16-16c0-8.837-7.163-16-16-16s-16,7.163-16,16C16,44.838,23.163,52,32,52z M32,22
								c7.732,0,14,6.268,14,14s-6.268,14-14,14s-14-6.268-14-14S24.268,22,32,22z"/>
							<circle cx="55" cy="21" r="1"/>
							<path d="M60,12c0,0-7,0-8,0s-1.582,0.004-2.793-1.207s-5.538-5.538-5.538-5.538C43.481,5.067,42.33,4,41,4S24.453,4,23,4
								s-2.498,1.084-2.686,1.271c0,0-4.326,4.326-5.521,5.521S13.018,12,12,12V9c0-0.553-0.447-1-1-1H5C4.447,8,4,8.447,4,9v3
								c-2.211,0-4,1.789-4,4v12h15.893C18.84,22.078,24.937,18,32,18s13.16,4.078,16.107,10H64V16C64,13.789,62.211,12,60,12z
								M10,12c-1.24,0-2.782,0-4,0v-2h4V12z M55,24c-1.657,0-3-1.344-3-3s1.343-3,3-3s3,1.344,3,3S56.657,24,55,24z"/>
							<path d="M50,36c0,9.941-8.059,18-18,18s-18-8.059-18-18c0-2.107,0.381-4.121,1.046-6H0v26c0,2.211,1.789,4,4,4h56
								c2.211,0,4-1.789,4-4V30H48.954C49.619,31.879,50,33.893,50,36z"/>
						</svg>

					</div>
					<h3 class="text-xl font-playfair font-bold mb-2" style="color: #333333;">Perfect Photos</h3>
					<p class="font-roboto text-md" style="color: #333333;">Instagram-worthy backdrop - The Rocky Mountains offer a magnificent view</p>
				</div>
				<div class="text-center">
					<div class="w-16 h-16 rounded-sm flex items-center justify-center mx-auto mb-4">
						<svg

							viewBox="0 0 64 64"
							class="w-16 h-16"
							fill="currentColor"
							style="color: #E8B4B8;"
							>
							<path d="M36.169,34.754c-0.372,0.562-0.854,1.043-1.415,1.415l7.853,7.853c0.391,0.391,1.023,0.391,1.414-0.001
								c0.391-0.391,0.391-1.023,0-1.414L36.169,34.754z"/>
							<path d="M33,27.101V14c0-0.553-0.447-1-1-1s-1,0.447-1,1v13.101C31.323,27.035,31.657,27,32,27S32.677,27.035,33,27.101z"/>
							<path d="M32,29c-1.657,0-3,1.343-3,3s1.343,3,3,3s3-1.343,3-3S33.657,29,32,29z M32,33c-0.553,0-1-0.447-1-1s0.447-1,1-1
								s1,0.447,1,1S32.553,33,32,33z"/>
							<path d="M54,32c0-0.553,0.447-1,1-1h2.975c-0.243-6.425-2.815-12.252-6.899-16.661l-2.105,2.104
								c-0.391,0.391-1.023,0.391-1.414,0s-0.391-1.023,0-1.414l2.104-2.104C45.251,8.84,39.424,6.269,32.999,6.025V9
								c0,0.553-0.447,1-1,1s-1-0.447-1-1V6.025c-6.425,0.243-12.252,2.815-16.661,6.9l2.104,2.104c0.391,0.391,0.391,1.022,0,1.414
								c-0.391,0.391-1.023,0.391-1.414,0l-2.104-2.104C8.84,18.75,6.269,24.577,6.025,31.002h2.974c0.553,0,0.999,0.446,1,1
								c0,0.552-0.447,0.999-1,1H6.025c0.244,6.425,2.816,12.251,6.9,16.66l2.104-2.104c0.391-0.391,1.021-0.391,1.414,0
								c0.39,0.39,0.39,1.022,0,1.414l-2.104,2.104c4.409,4.084,10.235,6.655,16.66,6.898l0.001-2.974c0-0.553,0.446-0.999,1-1
								c0.551,0,0.998,0.447,1,1l-0.001,2.974c6.425-0.243,12.251-2.815,16.66-6.9l-2.104-2.104c-0.391-0.392-0.391-1.023,0-1.415
								c0.39-0.39,1.022-0.39,1.415,0l2.103,2.104c4.085-4.409,6.656-10.235,6.899-16.66H55C54.447,33,54,32.553,54,32z
								M45.435,45.435c-1.172,1.172-3.07,1.173-4.242,0.001l-8.505-8.505C32.461,36.962,32.235,37,32,37c-2.762,0-5-2.238-5-5
								c0-1.631,0.792-3.064,2-3.978V14c0-1.657,1.343-3,3-3s3,1.343,3,3v14.022c1.208,0.913,2,2.347,2,3.978
								c0,0.236-0.038,0.461-0.069,0.688l8.504,8.504C46.606,42.364,46.606,44.263,45.435,45.435z"/>
							<path d="M32,0C14.327,0,0,14.327,0,32s14.327,32,32,32s32-14.327,32-32S49.673,0,32,0z M32,60
								C16.536,60,4,47.464,4,32S16.536,4,32,4s28,12.536,28,28S47.464,60,32,60z"/>
						</svg>
					</div>
					<h3 class="text-xl font-playfair font-bold mb-2" style="color: #333333;">Take Your Time</h3>
					<p class="font-roboto text-md" style="color: #333333;">No rush - take your time enjoying the peaceful garden atmosphere</p>
				</div>
			</div>

			<!-- Call to Action -->
			<div class="text-center mt-12">
				<p class="font-roboto text-lg mb-6" style="color: #333333;">Ready to create your perfect bouquet?</p>
				<a href="#pricing" class="vintage-button px-8 py-4 text-lg font-playfair font-semibold inline-block rounded-sm">
					Book My Bouquet Experience!
				</a>
			</div>
		</div>

	</section>

	<!-- Flowers Section -->
	<section id="flowers" class="py-20" style="position: relative;">
		<!--- WTF -->
		<div id="pink-background-container" class="py-20">
		</div>
		<!--- WTF -->

		<div class="max-w-7xl mx-auto px-4" style="z-index:2; position: relative;">
			<!-- Header -->
			<div class="text-center mb-8">
				<h2 class="text-4xl md:text-5xl font-playfair font-bold mb-6" style="color: #333333;">Our Beautiful Flowers</h2>
				<p class="text-xl font-roboto max-w-3xl mx-auto" style="color: #333333;">
					Discover our carefully curated collection of seasonal blooms, perfect for creating your dream bouquet.
				</p>
			</div>

			<!-- Seasonal Information -->
			<div class="max-w-4xl mx-auto mb-12">
				<div class="shabby-card p-6 text-center">
					<div class="flex items-center justify-center gap-2 mb-4">
						<svg class="w-5 h-5" style="color: #E8B4B8;" fill="currentColor" viewBox="0 0 20 20">
							<path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd"></path>
						</svg>
						<h3 class="text-lg font-playfair font-semibold" style="color: #333333;">Southern Alberta Growing Season</h3>
					</div>
					<p class="text-sm font-roboto mb-4" style="color: #666;">
						Our flowers bloom naturally with Alberta's climate. Each flower has its own peak season when it's at its most beautiful and abundant.
					</p>
					<div class="grid grid-cols-2 md:grid-cols-5 gap-3 text-xs font-roboto">
						<div class="flex flex-col items-center p-2 rounded" style="background-color: #F0F9FF;">
							<span class="font-semibold" style="color: #0369A1;">June</span>
							<span style="color: #666;">Peonies, Lupins</span>
						</div>
						<div class="flex flex-col items-center p-2 rounded" style="background-color: #F0FDF4;">
							<span class="font-semibold" style="color: #166534;">July</span>
							<span style="color: #666;">Peak Season</span>
						</div>
						<div class="flex flex-col items-center p-2 rounded" style="background-color: #FFFBEB;">
							<span class="font-semibold" style="color: #92400E;">August</span>
							<span style="color: #666;">Sunflowers, Zinnias</span>
						</div>
						<div class="flex flex-col items-center p-2 rounded" style="background-color: #FEF3F2;">
							<span class="font-semibold" style="color: #B91C1C;">September</span>
							<span style="color: #666;">Fall Blooms</span>
						</div>
						<div class="flex flex-col items-center p-2 rounded" style="background-color: #F5F3FF;">
							<span class="font-semibold" style="color: #7C3AED;">October</span>
							<span style="color: #666;">Asters, Marigolds</span>
						</div>
					</div>
				</div>
			</div>

			<!-- Search and Controls -->
			<div class="mb-12">
				<div class="max-w-6xl mx-auto">
					<!-- Desktop: Side by side layout -->
					<div class="flex flex-col lg:flex-row lg:items-end gap-6">

						<!-- Search Section -->
						<div class="flex-1">
							<div class="mb-3">
								<h3 class="text-lg font-playfair font-semibold" style="color: #333333;">Search Flowers</h3>
							</div>
							<div class="relative">
								<label for="flowerSearch" class="sr-only">Search for flowers</label>
								<input
									type="text"
									id="flowerSearch"
									name="flowerSearch"
									placeholder="Search for flowers (e.g., roses, tulips, sunflowers...)"
									class="inset-input w-full px-4 py-3 pl-14 pr-12 font-roboto text-base"
									autocomplete="off"
									aria-label="Search for flowers"
									aria-describedby="search-help"
								>
								<div class="absolute left-4 top-1/2 transform -translate-y-1/2">
									<svg class="w-5 h-5" style="color: #999;" fill="currentColor" viewBox="0 0 20 20">
										<path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd"></path>
									</svg>
								</div>
								<div id="searchClear" class="absolute right-4 top-1/2 transform -translate-y-1/2 cursor-pointer hidden p-1 rounded-full hover:bg-gray-100 transition-colors duration-200">
									<svg class="w-4 h-4" style="color: #999;" fill="currentColor" viewBox="0 0 20 20">
										<path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
									</svg>
								</div>

								<!-- Autocomplete Suggestions -->
								<div id="searchSuggestions" class="absolute top-full left-0 right-0 bg-white rounded border border-gray-300 shadow-lg hidden z-10 max-h-60 overflow-y-auto mt-1">
									<!-- Suggestions will be populated by JavaScript -->
								</div>
							</div>
						</div>

						<!-- Filters Section -->
						<div class="flex flex-col sm:flex-row gap-4 lg:gap-6">


							<!-- Filter Dropdowns -->
							<div class="flex flex-row gap-3">
								<div>
									<div class="mb-2">
										<label for="colorFilter" class="text-sm font-playfair font-semibold" style="color: #333333;">Color</label>
									</div>
									<div class="relative">
										<select id="colorFilter" name="colorFilter" class="inset-input px-3 py-3 pr-8 font-roboto text-sm min-w-28 appearance-none" aria-label="Filter flowers by color">
											<option value="">All</option>
											<option value="red">Red</option>
											<option value="pink">Pink</option>
											<option value="white">White</option>
											<option value="yellow">Yellow</option>
											<option value="purple">Purple</option>
											<option value="orange">Orange</option>
											<option value="blue">Blue</option>
										</select>
										<div class="absolute right-2 top-1/2 transform -translate-y-1/2 pointer-events-none">
											<svg class="w-4 h-4" style="color: #999;" fill="currentColor" viewBox="0 0 20 20">
												<path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"></path>
											</svg>
										</div>
									</div>
								</div>

								<div>
									<div class="mb-2">
										<label for="occasionFilter" class="text-sm font-playfair font-semibold" style="color: #333333;">Occasion</label>
									</div>
									<div class="relative">
										<select id="occasionFilter" name="occasionFilter" class="inset-input px-3 py-3 pr-8 font-roboto text-sm min-w-32 appearance-none" aria-label="Filter flowers by occasion">
											<option value="">All</option>
											<option value="wedding">Wedding</option>
											<option value="birthday">Birthday</option>
											<option value="anniversary">Anniversary</option>
											<option value="sympathy">Sympathy</option>
											<option value="everyday">Everyday</option>
										</select>
										<div class="absolute right-2 top-1/2 transform -translate-y-1/2 pointer-events-none">
											<svg class="w-4 h-4" style="color: #999;" fill="currentColor" viewBox="0 0 20 20">
												<path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"></path>
											</svg>
										</div>
									</div>
								</div>

								<div>
									<div class="mb-2">
										<label for="seasonFilter" class="text-sm font-playfair font-semibold" style="color: #333333;">Season</label>
									</div>
									<div class="relative">
										<select id="seasonFilter" name="seasonFilter" class="inset-input px-3 py-3 pr-8 font-roboto text-sm min-w-32 appearance-none" aria-label="Filter flowers by season">
											<option value="">All Year</option>
											<option value="current">Available Now</option>
											<option value="6">June</option>
											<option value="7">July</option>
											<option value="8">August</option>
											<option value="9">September</option>
											<option value="10">October</option>
										</select>
										<div class="absolute right-2 top-1/2 transform -translate-y-1/2 pointer-events-none">
											<svg class="w-4 h-4" style="color: #999;" fill="currentColor" viewBox="0 0 20 20">
												<path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"></path>
											</svg>
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>

			<!-- Mobile Carousel View -->
			<div id="mobileCarousel" class="lg:hidden">
				<div class="relative">
					<!-- Carousel Container -->
					<div class="overflow-x-auto scrollbar-hide touch-scroll px-4" style="scroll-snap-type: x mandatory; scroll-behavior: smooth;">
						<div id="carouselTrack" class="flex gap-4 pb-2" role="region" aria-label="Flower carousel" tabindex="0">
							<!-- Flower cards will be inserted here by JavaScript -->
						</div>
					</div>

					<!-- Carousel Controls -->
					<div class="flex justify-between items-center mt-6" role="group" aria-label="Carousel navigation">
						<button id="prevBtn" class="p-3 rounded-lg vintage-border min-w-12 min-h-12" style="background-color: #FAF7F4; color: #E8B4B8;" disabled aria-label="Previous flower">
							<svg class="w-6 h-6" fill="currentColor" viewBox="0 0 20 20" aria-hidden="true">
								<path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd"></path>
							</svg>
						</button>

						<!-- Flower Navigation Dropdown -->
						<div class="relative">
							<button id="flowerNavBtn" class="px-4 py-2 rounded-lg vintage-border font-roboto text-sm min-h-12 flex items-center space-x-2" style="background-color: #FAF7F4; color: #333333; border-color: #E8B4B8;" aria-label="Select flower to view">
								<span id="flowerNavText">1 of 15</span>
								<svg class="w-4 h-4" style="color: #E8B4B8;" fill="currentColor" viewBox="0 0 20 20" aria-hidden="true">
									<path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"></path>
								</svg>
							</button>

							<!-- Dropdown Menu -->
							<div id="flowerNavDropdown" class="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 w-64 max-h-60 overflow-y-auto bg-white rounded-lg shadow-lg border-2 hidden z-20" style="border-color: #E8B4B8;">
								<div class="p-2">
									<div id="flowerNavList" class="space-y-1">
										<!-- Flower list will be populated by JavaScript -->
									</div>
								</div>
							</div>
						</div>

						<button id="nextBtn" class="p-3 rounded-lg vintage-border min-w-12 min-h-12" style="background-color: #FAF7F4; color: #E8B4B8;" aria-label="Next flower">
							<svg class="w-6 h-6" fill="currentColor" viewBox="0 0 20 20" aria-hidden="true">
								<path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
							</svg>
						</button>
					</div>
				</div>
			</div>



			<!-- Desktop Grid View -->
			<div id="desktopGrid" class="hidden lg:grid lg:grid-cols-4 xl:grid-cols-4 gap-6">
				<!-- Grid items will be inserted here by JavaScript -->
			</div>

			<!-- No Results / Request Form -->
			<div id="noResults" class="hidden text-center py-12">
				<div class="max-w-2xl mx-auto">
					<div class="mb-8">
						<svg class="w-16 h-16 mx-auto mb-4" style="color: #E8B4B8;" fill="currentColor" viewBox="0 0 20 20">
							<path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd"></path>
						</svg>
						<h3 class="text-2xl font-playfair font-bold mb-4" style="color: #333333;">No flowers found matching your search.</h3>
						<p class="font-roboto mb-6" style="color: #333333;">
							We may still be able to help. Request your flower below!
						</p>

						<!-- Reset Search Button -->
						<button id="resetSearchBtn" class="mb-8 px-6 py-3 border-2 rounded-lg font-playfair font-semibold transition-all duration-200 hover:bg-shabby-pink" style="border-color: #E8B4B8; color: #E8B4B8; background-color: #FAF7F4;">
							Reset Search
						</button>
					</div>

					<!-- Flower Request Form -->
					<div class="shabby-card p-6 distressed-shadow">
						<h4 class="text-xl font-playfair font-bold mb-4" style="color: #333333;">Request a Flower</h4>

						<!-- Flower Request Form Container -->
						<div id="flower-request-form-container" class="transition-all duration-500 ease-in-out">
							<form id="flowerRequestForm" class="space-y-4" aria-label="Request a flower">
								<div class="grid md:grid-cols-2 gap-4">
									<div>
										<label for="requestedFlower" class="sr-only">Flower name</label>
										<input
											type="text"
											id="requestedFlower"
											name="requestedFlower"
											placeholder="Flower name"
											class="shabby-input px-3 py-2 font-roboto"
											required
											aria-describedby="flower-help"
										>
									</div>
									<div>
										<label for="requesterEmail" class="sr-only">Your email</label>
										<input
											type="email"
											id="requesterEmail"
											name="requesterEmail"
											placeholder="Your email"
											class="shabby-input px-3 py-2 font-roboto"
											required
											aria-describedby="email-help"
										>
									</div>
								</div>
								<div>
									<label for="requestNotes" class="sr-only">Additional notes</label>
									<textarea
										id="requestNotes"
										name="requestNotes"
										placeholder="Tell us more about what you're looking for..."
										rows="3"
										class="w-full shabby-input px-3 py-2 font-roboto"
										aria-describedby="notes-help"
									></textarea>
								</div>
								<div id="flower-help" class="sr-only">Enter the name of the flower you're looking for</div>
								<div id="email-help" class="sr-only">We'll contact you about availability</div>
								<div id="notes-help" class="sr-only">Optional additional details about your flower request</div>
								<div class="flex flex-col sm:flex-row gap-3 justify-center">
									<button type="submit" id="flower-request-submit-btn" class="vintage-button px-6 py-3 font-playfair font-semibold relative">
										<span id="flower-request-btn-text">Send Request</span>
										<span id="flower-request-spinner" class="hidden absolute inset-0 items-center justify-center">
											<svg class="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
												<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
												<path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
											</svg>
										</span>
									</button>
								</div>
							</form>
						</div>

						<!-- Success Message (hidden by default) -->
						<div id="flower-request-success-message" class="hidden text-center space-y-6 py-8">
							<!-- Success Icon -->
							<div class="w-16 h-16 mx-auto rounded-full flex items-center justify-center" style="background-color: #F8E7E8;">
								<svg class="w-8 h-8" style="color: #E8B4B8;" fill="currentColor" viewBox="0 0 20 20">
									<path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 13.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
								</svg>
							</div>

							<!-- Success Message -->
							<div class="space-y-3">
								<h3 class="text-2xl font-playfair font-bold text-charcoal">Request Sent!</h3>
								<p id="flower-request-success-text" class="font-roboto text-charcoal">Thank you for your flower request! We'll get back to you about availability.</p>
							</div>

							<!-- Call-to-Action Button -->
							<div class="pt-4">
								<button id="flower-request-send-another" class="vintage-button px-6 py-3 text-sm lg:text-base font-playfair font-semibold rounded-sm transition-all duration-200 hover:transform hover:scale-105">
									Send Another Request
								</button>
							</div>
						</div>
					</div>
				</div>
			</div>


		</div>
	</section>

	<!-- About Section -->
	<section id="about" class="py-20 bg-white" style="position: relative;">
		<!--- WTF -->
		<div class="py-20 white-background-container">
		</div>
		<!--- WTF -->
		<div class="max-w-6xl mx-auto px-4" style="z-index: 2; position: relative;">
			<div class="text-center mb-16">
				<h2 class="text-4xl md:text-5xl font-playfair font-bold mb-6" style="color: #333333;">About Our Garden</h2>
				<p class="text-xl font-roboto max-w-3xl mx-auto" style="color: #333333;">
					Our bouquet garden is a carefully curated collection of the most beautiful flowers,
					designed to inspire and delight visitors of all ages.
				</p>
			</div>

			<div class="grid lg:grid-cols-2 gap-12 items-center">
				<!-- Story Content -->
				<div class="shabby-card p-8 distressed-shadow">
					<h3 class="text-2xl font-playfair font-bold mb-6 center-mobile-text keep-centered" style="color: #333333;">Our Story</h3>
					<div class="space-y-4">
						<p class="font-roboto leading-relaxed center-mobile-text" style="color: #333333;">
							BG Bouquets is a welcoming, cut-your-own bouquet farm tucked in the sunny foothills of Southern Alberta, only minutes from Hill Spring, Cardston, and Waterton Lakes National Park. Whether you're local or just passing through, our flower field is a place to slow down, breathe deep, and build something beautiful with your own hands.
						</p>
						<p class="font-roboto leading-relaxed center-mobile-text" style="color: #333333;">
							We're proud to share the simple joys of our family farm in full bloom. Pick from a wide variety of seasonal flowers, including sunflowers, sweet peas, snapdragons, lavender, roses, and more. All grown with care in our prairie soil and perfect for creating your own custom bouquet.
						</p>
					</div>

					<!-- Features Grid -->
					<div class="grid md:grid-cols-2 gap-4 mt-8">
						<div class="flex items-center space-x-3">
							<div class="w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0" style="background-color: #F8E7E8;">
								<svg class="w-4 h-4" style="color: #E8B4B8;" fill="currentColor" viewBox="0 0 20 20">
									<path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 13.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
								</svg>
							</div>
							<span class="font-roboto text-sm" style="color: #333333;">Family-owned farm</span>
						</div>
						<div class="flex items-center space-x-3">
							<div class="w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0" style="background-color: #F8E7E8;">
								<svg class="w-4 h-4" style="color: #E8B4B8;" fill="currentColor" viewBox="0 0 20 20">
									<path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 13.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
								</svg>
							</div>
							<span class="font-roboto text-sm" style="color: #333333;">Seasonal varieties</span>
						</div>
						<div class="flex items-center space-x-3">
							<div class="w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0" style="background-color: #F8E7E8;">
								<svg class="w-4 h-4" style="color: #E8B4B8;" fill="currentColor" viewBox="0 0 20 20">
									<path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 13.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
								</svg>
							</div>
							<span class="font-roboto text-sm" style="color: #333333;">Mountain views</span>
						</div>
						<div class="flex items-center space-x-3">
							<div class="w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0" style="background-color: #F8E7E8;">
								<svg class="w-4 h-4" style="color: #E8B4B8;" fill="currentColor" viewBox="0 0 20 20">
									<path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 13.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
								</svg>
							</div>
							<span class="font-roboto text-sm" style="color: #333333;">All ages welcome</span>
						</div>
					</div>
				</div>

				<!-- Image Placeholder -->
				<div class="shabby-card p-8 distressed-shadow">
					<div class="bg-gray-200 h-64 rounded-lg flex items-center justify-center">
						<span class="text-gray-500 font-roboto">Garden Image Placeholder</span>
					</div>
				</div>
			</div>
		</div>
	</section>

	<!-- Location Section -->
	<section id="location" class="py-20 bg-white">
		<div class="max-w-6xl mx-auto px-4">
			<div class="text-center mb-16">
				<h2 class="text-4xl md:text-5xl font-playfair font-bold mb-6" style="color: #333333;">Visit Us</h2>
				<p class="text-xl font-roboto max-w-3xl mx-auto" style="color: #333333;">
					Find us in the heart of the southern Alberta countryside, on the way to Waterton National Park.
				</p>
			</div>

			<div id="mobile-reverse-column" class="grid lg:grid-cols-2 gap-12">
				<!-- Location Details -->
				<div class="shabby-card p-8 distressed-shadow">
					<h3 class="text-2xl font-playfair font-bold mb-6" style="color: #333333;">Location Details</h3>
					<div class="space-y-6">
						<div class="flex items-start space-x-4">
							<div class="w-12 h-12 rounded-full flex items-center justify-center flex-shrink-0" style="background-color: #F8E7E8;">
								<svg class="w-6 h-6" style="color: #E8B4B8;" fill="currentColor" viewBox="0 0 20 20">
									<path fill-rule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clip-rule="evenodd"></path>
								</svg>
							</div>
							<div>
								<p class="font-playfair font-semibold mb-1" style="color: #333333;">Location</p>
								<p class="font-roboto" style="color: #333333;">Hill Spring Area, Southern Alberta</p>
								<p class="font-roboto text-sm" style="color: #666;">49°20'00.5"N 113°38'03.9"W</p>
							</div>
						</div>

						<div class="flex items-start space-x-4">
							<div class="w-12 h-12 rounded-full flex items-center justify-center flex-shrink-0" style="background-color: #F8E7E8;">
								<svg class="w-6 h-6" style="color: #E8B4B8;" fill="currentColor" viewBox="0 0 20 20">
									<path fill-rule="evenodd" d="M5.05 3.05A7 7 0 1119 10a7 7 0 01-13.95-6.95zM10 12a2 2 0 100-4 2 2 0 000 4z" clip-rule="evenodd"></path>
								</svg>
							</div>
							<div>
								<p class="font-playfair font-semibold mb-1" style="color: #333333;">Distances</p>
								<div class="font-roboto text-sm space-y-1" style="color: #333333;">
									<p>• Cardston: 25 minutes (30 km)</p>
									<p>• Pincher Creek: 35 minutes (45 km)</p>
									<p>• Lethbridge: 45 minutes (60 km)</p>
									<p>• Waterton National Park: 20 minutes</p>
								</div>
							</div>
						</div>

						<div class="flex items-start space-x-4">
							<div class="w-12 h-12 rounded-full flex items-center justify-center flex-shrink-0" style="background-color: #F8E7E8;">
								<svg class="w-6 h-6" style="color: #E8B4B8;" fill="currentColor" viewBox="0 0 20 20">
									<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clip-rule="evenodd"></path>
								</svg>
							</div>
							<div>
								<p class="font-playfair font-semibold mb-1" style="color: #333333;">Hours</p>
								<p class="font-roboto mb-1" style="color: #333333;">Thursday, Friday, Saturday</p>
								<p class="font-roboto text-sm" style="color: #333333;">10:00 AM - 1:00 PM & 6:00 PM - 9:00 PM</p>
								<p class="font-roboto text-sm italic" style="color: #666;">Closed Monday, Tuesday, Wednesday, Sunday</p>
							</div>
						</div>

						<div class="flex items-start space-x-4">
							<div class="w-12 h-12 rounded-full flex items-center justify-center flex-shrink-0" style="background-color: #F8E7E8;">
								<svg class="w-6 h-6" style="color: #E8B4B8;" fill="currentColor" viewBox="0 0 20 20">
									<path d="M8 16.5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0zM15 16.5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0z"></path>
									<path d="M3 4a1 1 0 00-1 1v10a1 1 0 001 1h1.05a2.5 2.5 0 014.9 0H10a1 1 0 001-1V5a1 1 0 00-1-1H3zM14 7a1 1 0 00-1 1v6.05A2.5 2.5 0 0115.95 16H17a1 1 0 001-1V8a1 1 0 00-1-1h-3z"></path>
								</svg>
							</div>
							<div>
								<p class="font-playfair font-semibold mb-1" style="color: #333333;">Parking</p>
								<p class="font-roboto" style="color: #333333;">Free parking available on-site</p>
								<p class="font-roboto text-sm" style="color: #666;">Easy access with mountain views</p>
							</div>
						</div>
					</div>

					<!-- Driving Directions -->
					<div class="mt-8 pt-6 border-t-2" style="border-color: #F8E7E8;">
						<h4 class="text-lg font-playfair font-semibold mb-4" style="color: #333333;">Driving Directions</h4>
						<div class="space-y-3 font-roboto text-sm" style="color: #333333;">
							<div class="flex items-start space-x-3">
								<div class="w-6 h-6 rounded-full flex items-center justify-center flex-shrink-0 text-xs font-bold text-white" style="background-color: #E8B4B8;">1</div>
								<p><strong>From Lethbridge:</strong> Take Highway 5 south, then Highway 6 south towards Waterton National Park, then take Highway 505 east, then range road 280 north</p>
							</div>
							<div class="flex items-start space-x-3">
								<div class="w-6 h-6 rounded-full flex items-center justify-center flex-shrink-0 text-xs font-bold text-white" style="background-color: #E8B4B8;">2</div>
								<p><strong>From Cardston:</strong> Take Highway 2 north, then Highway 505 west towards Waterton National Park, then range road 280 north</p>
							</div>
							<div class="flex items-start space-x-3">
								<div class="w-6 h-6 rounded-full flex items-center justify-center flex-shrink-0 text-xs font-bold text-white" style="background-color: #E8B4B8;">3</div>
								<p><strong>From Pincher Creek:</strong> Take Highway 6 south, then Highway 2 north, then highway 505 west, then north on range road 280</p>
							</div>
							<div class="flex items-start space-x-3">
								<div class="w-6 h-6 rounded-full flex items-center justify-center flex-shrink-0 text-xs font-bold text-white" style="background-color: #E8B4B8;">4</div>
								<p><strong>Look for:</strong> Range road entrance off Highway 505 near Hill Spring on the way to Waterton Reservoir and Waterton National Park</p>
							</div>
						</div>
					</div>
				</div>

				<!-- Interactive Map -->
				<div class="shabby-card p-8 distressed-shadow">
					<div class="relative">
						<!-- Static Map Image -->
						<div class="map-container relative overflow-hidden rounded-lg" style="height: 400px; width: 100%; display: block;">
							<img
								src="/images/bg-bouquet-location.webp?v=2"
								alt="BG Bouquet Garden Location Map - Hill Spring Area, Alberta"
								class="w-full h-full object-cover cursor-pointer transition-transform duration-300 hover:scale-105 block"
								onclick="openMaps()"
								loading="lazy"
								style="min-height: 100%; min-width: 100%;"
							/>
						</div>
					</div>

					<!-- Navigation Buttons -->
					<div class="mt-6 grid grid-cols-1 sm:grid-cols-2 gap-4">
						<button
							onclick="openGoogleMaps()"
							class="vintage-button px-4 py-3 text-sm font-playfair font-semibold rounded-sm flex items-center justify-center space-x-2"
						>
							<svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
								<path d="M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7zm0 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z"/>
							</svg>
							<span>Google Maps</span>
						</button>

						<button
							onclick="openAppleMaps()"
							class="vintage-button px-4 py-3 text-sm font-playfair font-semibold rounded-sm flex items-center justify-center space-x-2"
						>
							<svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
								<path d="M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7zm0 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z"/>
							</svg>
							<span>Apple Maps</span>
						</button>
					</div>
				</div>
			</div>
		</div>
	</section>

	<!-- Contact Section -->
	<section id="contact" class="py-20 bg-white">

		<div class="max-w-7xl mx-auto px-4">

			<!-- Header -->
			<div class="text-center mb-16">
				<h2 class="text-4xl md:text-5xl font-bold font-playfair text-gray-900 mb-6">FAQ & Contact</h2>
				<p class="text-xl text-gray-600 max-w-3xl mx-auto">
					Have questions or want to plan a special event? We'd love to hear from you.
				</p>
			</div>

			<!-- Two Column Layout: FAQ + Contact Form -->
			<div class="grid lg:grid-cols-2 gap-12 mb-16">
				
				<!-- FAQ Section -->
				<div>

					<!-- Header -->
					<div class="mb-8">
						<h3 class="text-3xl font-playfair font-bold mb-4" style="color: #333333;">Frequently Asked Questions</h3>
						<p class="text-lg font-roboto" style="color: #333333;">Everything you need to know about your bouquet experience</p>
					</div>

					<div class="shabby-card p-6 distressed-shadow">
						<!-- FAQ Items -->
						<div class="space-y-4">
							
							<!-- FAQ Item 1 -->
							<div class="faq-item border-b border-shabby-pink pb-4">
								<button class="faq-question w-full text-left flex justify-between items-center py-3 focus:outline-none focus-visible:ring-2 focus-visible:ring-dusty-rose focus-visible:ring-offset-2" aria-expanded="false">
									<span class="text-lg font-playfair font-semibold" style="color: #333333;">What's included in the price?</span>
									<svg class="faq-arrow w-5 h-5 transform transition-transform duration-200" style="color: #E8B4B8;" fill="currentColor" viewBox="0 0 20 20">
										<path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"></path>
									</svg>
								</button>
								<div class="faq-answer hidden overflow-hidden">
									<div class="pt-2 pb-4">
										<p class="font-roboto" style="color: #333333;">Your $35 bouquet experience includes all cutting tools (professional shears), a collection vessel for gathering your flowers, expert guidance on flower selection and care, and detailed care instructions to keep your bouquet fresh longer. Free on-site parking is also included.</p>
									</div>
								</div>
							</div>

							<!-- FAQ Item 2 -->
							<div class="faq-item border-b border-shabby-pink pb-4">
								<button class="faq-question w-full text-left flex justify-between items-center py-3 focus:outline-none focus-visible:ring-2 focus-visible:ring-dusty-rose focus-visible:ring-offset-2" aria-expanded="false">
									<span class="text-lg font-playfair font-semibold" style="color: #333333;">Do you provide scissors/tools/vessels?</span>
									<svg class="faq-arrow w-5 h-5 transform transition-transform duration-200" style="color: #E8B4B8;" fill="currentColor" viewBox="0 0 20 20">
										<path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"></path>
									</svg>
								</button>
								<div class="faq-answer hidden overflow-hidden">
									<div class="pt-2 pb-4">
										<p class="font-roboto" style="color: #333333;">Yes! We provide everything you need. Professional-grade cutting shears are available for all visitors, along with collection vessels (buckets or baskets) to gather your flowers. You don't need to bring any tools - just come ready to enjoy the experience!</p>
									</div>
								</div>
							</div>

							<!-- FAQ Item 3 -->
							<div class="faq-item border-b border-shabby-pink pb-4">
								<button class="faq-question w-full text-left flex justify-between items-center py-3 focus:outline-none focus-visible:ring-2 focus-visible:ring-dusty-rose focus-visible:ring-offset-2" aria-expanded="false">
									<span class="text-lg font-playfair font-semibold" style="color: #333333;">What happens if it rains or there is bad weather?</span>
									<svg class="faq-arrow w-5 h-5 transform transition-transform duration-200" style="color: #E8B4B8;" fill="currentColor" viewBox="0 0 20 20">
										<path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"></path>
									</svg>
								</button>
								<div class="faq-answer hidden overflow-hidden">
									<div class="pt-2 pb-4">
										<p class="font-roboto" style="color: #333333;">Light rain doesn't stop the flower picking fun! However, in case of severe weather (thunderstorms, heavy rain, or dangerous conditions), we may need to reschedule your visit for safety reasons. We'll contact you as soon as possible if weather conditions require rescheduling, and we'll work with you to find a new date that works for everyone.</p>
									</div>
								</div>
							</div>

							<!-- FAQ Item 4 -->
							<div class="faq-item border-b border-shabby-pink pb-4">
								<button class="faq-question w-full text-left flex justify-between items-center py-3 focus:outline-none focus-visible:ring-2 focus-visible:ring-dusty-rose focus-visible:ring-offset-2" aria-expanded="false">
									<span class="text-lg font-playfair font-semibold" style="color: #333333;">Can I bring children?</span>
									<svg class="faq-arrow w-5 h-5 transform transition-transform duration-200" style="color: #E8B4B8;" fill="currentColor" viewBox="0 0 20 20">
										<path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"></path>
									</svg>
								</button>
								<div class="faq-answer hidden overflow-hidden">
									<div class="pt-2 pb-4">
										<p class="font-roboto" style="color: #333333;">Absolutely! Children are welcome and we love seeing families enjoy the garden together. Please supervise little ones at all times, especially around the cutting tools and in the flower beds. We recommend staying on marked paths to protect both the flowers and ensure everyone's safety. It's a wonderful educational experience for kids to learn about flowers and nature!</p>
									</div>
								</div>
							</div>

							<!-- FAQ Item 5 -->
							<div class="faq-item border-b border-shabby-pink pb-4">
								<button class="faq-question w-full text-left flex justify-between items-center py-3 focus:outline-none focus-visible:ring-2 focus-visible:ring-dusty-rose focus-visible:ring-offset-2" aria-expanded="false">
									<span class="text-lg font-playfair font-semibold" style="color: #333333;">Can I bring pets?</span>
									<svg class="faq-arrow w-5 h-5 transform transition-transform duration-200" style="color: #E8B4B8;" fill="currentColor" viewBox="0 0 20 20">
										<path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"></path>
									</svg>
								</button>
								<div class="faq-answer hidden overflow-hidden">
									<div class="pt-2 pb-4">
										<p class="font-roboto" style="color: #333333;">We love pets, but to protect our flowers and ensure the safety of all visitors, we ask that pets remain in the parking area. This helps preserve the flower beds and prevents any accidents. You're welcome to bring your furry friends along for the car ride - they can enjoy the fresh country air while you create your beautiful bouquet!</p>
									</div>
								</div>
							</div>

							<!-- FAQ Item 6 -->
							<div class="faq-item">
								<button class="faq-question w-full text-left flex justify-between items-center py-3 focus:outline-none focus-visible:ring-2 focus-visible:ring-dusty-rose focus-visible:ring-offset-2" aria-expanded="false">
									<span class="text-lg font-playfair font-semibold" style="color: #333333;">What is your cancellation and refund policy?</span>
									<svg class="faq-arrow w-5 h-5 transform transition-transform duration-200" style="color: #E8B4B8;" fill="currentColor" viewBox="0 0 20 20">
										<path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"></path>
									</svg>
								</button>
								<div class="faq-answer hidden overflow-hidden">
									<div class="pt-2 pb-4">
										<p class="font-roboto mb-3" style="color: #333333;">We understand that plans can change! Cancellations made 24+ hours in advance are typically eligible for full refunds, while late cancellations may receive partial refunds. All refund decisions for online payments are at our discretion, though we're considerate of circumstances beyond your control.</p>
										<p class="font-roboto" style="color: #333333;">For complete details including rescheduling options and special circumstances, please see our <a href="/refund-policy" class="text-dusty-rose hover:underline font-medium">full refund policy</a>.</p>
									</div>
								</div>
							</div>

						</div>
					</div>

				</div>

				<!-- Contact Form Section -->
				<div>

					<!-- Header -->
					<div class="mb-8">
						<h3 class="text-3xl font-playfair font-bold mb-4" style="color: #333333;">Send us a Message</h3>
						<p class="text-lg font-roboto" style="color: #333333;">Have a question not covered in our FAQ? We'd love to help!</p>
					</div>

					<!-- Contact Form -->
					<div class="shabby-card p-6 distressed-shadow">
						<!-- Contact Form Container -->
						<div id="contact-form-container" class="transition-all duration-500 ease-in-out">
							<form id="contact-form" class="space-y-4">
								<div>
									<label for="contact-name" class="block text-sm font-playfair font-medium mb-1" style="color: #333333;">Name *</label>
									<input type="text" id="contact-name" name="name" required class="w-full px-3 py-2.5 shabby-input text-sm font-roboto rounded-sm" placeholder="Your full name">
								</div>
								<div>
									<label for="contact-email" class="block text-sm font-playfair font-medium mb-1" style="color: #333333;">Email *</label>
									<input type="email" id="contact-email" name="email" required class="w-full px-3 py-2.5 shabby-input text-sm font-roboto rounded-sm" placeholder="your@email.com">
								</div>
								<div>
									<label for="contact-subject" class="block text-sm font-playfair font-medium mb-1" style="color: #333333;">Subject</label>
									<input type="text" id="contact-subject" name="subject" class="w-full px-3 py-2.5 shabby-input text-sm font-roboto rounded-sm" placeholder="What's this about?">
								</div>
								<div>
									<label for="contact-message" class="block text-sm font-playfair font-medium mb-1" style="color: #333333;">Message *</label>
									<textarea id="contact-message" name="message" rows="5" required class="w-full px-3 py-2.5 shabby-input text-sm font-roboto rounded-sm resize-none" placeholder="Tell us how we can help..."></textarea>
								</div>
								<button type="submit" id="contact-submit-btn" class="w-full vintage-button px-6 py-3 text-sm font-playfair font-semibold rounded-sm relative">
									<span id="contact-btn-text">Send Message</span>
									<span id="contact-spinner" class="hidden absolute inset-0 items-center justify-center">
										<svg class="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
											<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
											<path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
										</svg>
									</span>
								</button>
							</form>
						</div>

						<!-- Success Message (hidden by default) -->
						<div id="contact-success-message" class="hidden text-center space-y-6 py-8">
							<!-- Success Icon -->
							<div class="w-16 h-16 mx-auto rounded-full flex items-center justify-center" style="background-color: #F8E7E8;">
								<svg class="w-8 h-8" style="color: #E8B4B8;" fill="currentColor" viewBox="0 0 20 20">
									<path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 13.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
								</svg>
							</div>

							<!-- Success Message -->
							<div class="space-y-3">
								<h3 class="text-2xl font-playfair font-bold text-charcoal">Message Sent!</h3>
								<p class="font-roboto text-charcoal">Thank you for reaching out. We'll get back to you soon.</p>
							</div>

							<!-- Call-to-Action Button -->
							<div class="pt-4">
								<button id="contact-send-another" class="vintage-button px-6 py-3 text-sm lg:text-base font-playfair font-semibold rounded-sm transition-all duration-200 hover:transform hover:scale-105">
									Send Another Message
								</button>
							</div>
						</div>
					</div>

				</div>

			</div>


		</div>

			<!-- Contact Information Section -->
			<div class="text-center">
				<div class="grid md:grid-cols-3 gap-8 max-w-4xl mx-auto">
					<div class="flex flex-col items-center">
						<div class="w-12 h-12 rounded-full flex items-center justify-center mb-3" style="background-color: #F8E7E8;">
							<svg class="w-6 h-6" style="color: #E8B4B8;" fill="currentColor" viewBox="0 0 20 20">
								<path d="M2 3a1 1 0 011-1h2.153a1 1 0 01.986.836l.74 4.435a1 1 0 01-.54 1.06l-1.548.773a11.037 11.037 0 006.105 6.105l.774-1.548a1 1 0 011.059-.54l4.435.74a1 1 0 01.836.986V17a1 1 0 01-1 1h-2C7.82 18 2 12.18 2 5V3z"></path>
							</svg>
						</div>
						<h4 class="font-playfair font-semibold mb-2" style="color: #333333;">Phone</h4>
						<p class="font-roboto" style="color: #333333;">(403) 393-8285</p>
					</div>

					<div class="flex flex-col items-center">
						<div class="w-12 h-12 rounded-full flex items-center justify-center mb-3" style="background-color: #F8E7E8;">
							<svg class="w-6 h-6" style="color: #E8B4B8;" fill="currentColor" viewBox="0 0 20 20">
								<path d="M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z"></path>
								<path d="M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z"></path>
							</svg>
						</div>
						<h4 class="font-playfair font-semibold mb-2" style="color: #333333;">Email</h4>
						<p class="font-roboto" style="color: #333333;">bev@bgbouquet.com</p>
					</div>

					<div class="flex flex-col items-center">
						<div class="w-12 h-12 rounded-full flex items-center justify-center mb-3" style="background-color: #F8E7E8;">
							<svg class="w-6 h-6" style="color: #E8B4B8;" fill="currentColor" viewBox="0 0 20 20">
								<path fill-rule="evenodd" d="M18 10c0 3.866-3.582 7-8 7a8.841 8.841 0 01-4.083-.98L2 17l1.338-3.123C2.493 12.767 2 11.434 2 10c0-3.866 3.582-7 8-7s8 3.134 8 7zM7 9H5v2h2V9zm8 0h-2v2h2V9zM9 9h2v2H9V9z" clip-rule="evenodd"></path>
							</svg>
						</div>
						<h4 class="font-playfair font-semibold mb-2" style="color: #333333;">Social Media</h4>
						<p class="font-roboto" style="color: #333333;">Follow us @bouquetgarden</p>
					</div>
				</div>
			</div>

	</section>

	<!-- Footer -->
	<footer class="bg-charcoal text-white py-8">
		<div class="max-w-7xl mx-auto px-4">
			<div class="text-center">
				<div class="mb-4">
					<span class="font-playfair font-bold text-xl">BG Bouquet Garden</span>
				</div>
				<div class="flex flex-wrap justify-center gap-6 text-sm font-roboto mb-4">
					<a href="/refund-policy" class="hover:text-dusty-rose transition-colors duration-300">Refund Policy</a>
					<a href="/#contact" class="hover:text-dusty-rose transition-colors duration-300">Contact</a>
					<a href="/#about" class="hover:text-dusty-rose transition-colors duration-300">About</a>
					<a href="/#location" class="hover:text-dusty-rose transition-colors duration-300">Location</a>
				</div>
				<div class="text-xs text-gray-400">
					<p>&copy; 2025 BG Bouquet Garden. All rights reserved.</p>
				</div>
			</div>
		</div>
	</footer>
</Layout>

<!-- Calendar styles moved to global.css for better organization -->

<script>
	// FAQ Accordion functionality
	function initializeFAQ() {
		const faqItems = document.querySelectorAll('.faq-item');

		faqItems.forEach(item => {
			const question = item.querySelector('.faq-question') as HTMLButtonElement;
			const answer = item.querySelector('.faq-answer') as HTMLElement;
			const arrow = item.querySelector('.faq-arrow') as HTMLElement;

			if (question && answer && arrow) {
				question.addEventListener('click', () => {
					const isOpen = question.getAttribute('aria-expanded') === 'true';

					// Close all other FAQ items
					faqItems.forEach(otherItem => {
						if (otherItem !== item) {
							const otherQuestion = otherItem.querySelector('.faq-question') as HTMLButtonElement;
							const otherAnswer = otherItem.querySelector('.faq-answer') as HTMLElement;
							const otherArrow = otherItem.querySelector('.faq-arrow') as HTMLElement;

							if (otherQuestion && otherAnswer && otherArrow) {
								otherQuestion.setAttribute('aria-expanded', 'false');
								otherAnswer.classList.add('hidden');
								otherArrow.style.transform = 'rotate(0deg)';
							}
						}
					});

					// Toggle current item
					if (isOpen) {
						question.setAttribute('aria-expanded', 'false');
						answer.classList.add('hidden');
						arrow.style.transform = 'rotate(0deg)';
					} else {
						question.setAttribute('aria-expanded', 'true');
						answer.classList.remove('hidden');
						arrow.style.transform = 'rotate(180deg)';
					}
				});
			}
		});
	}

	// Contact form functionality
	function initializeContactForm() {
		const contactForm = document.getElementById('contact-form') as HTMLFormElement;
		const contactFormContainer = document.getElementById('contact-form-container') as HTMLElement;
		const contactSuccessMessage = document.getElementById('contact-success-message') as HTMLElement;
		const contactSubmitBtn = document.getElementById('contact-submit-btn') as HTMLButtonElement;
		const contactBtnText = document.getElementById('contact-btn-text') as HTMLElement;
		const contactSpinner = document.getElementById('contact-spinner') as HTMLElement;
		const sendAnotherBtn = document.getElementById('contact-send-another') as HTMLButtonElement;

		if (!contactForm || !contactFormContainer || !contactSuccessMessage ||
			!contactSubmitBtn || !contactBtnText || !contactSpinner || !sendAnotherBtn) {
			console.error('Contact form elements not found');
			return;
		}

		// Form validation
		function validateContactForm(): boolean {
			let valid = true;
			const requiredFields = ['contact-name', 'contact-email', 'contact-message'];

			requiredFields.forEach(id => {
				const el = document.getElementById(id) as HTMLInputElement | HTMLTextAreaElement;
				if (!el.value.trim()) {
					el.classList.add('border-red-500');
					valid = false;
				} else {
					el.classList.remove('border-red-500');
				}
			});

			// Email validation
			const emailInput = document.getElementById('contact-email') as HTMLInputElement;
			const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
			if (emailInput.value && !emailRegex.test(emailInput.value)) {
				emailInput.classList.add('border-red-500');
				valid = false;
			}

			return valid;
		}

		// Show loading state
		function showLoadingState() {
			contactSubmitBtn.disabled = true;
			contactBtnText.classList.add('invisible');
			contactSpinner.classList.remove('hidden');
			contactSpinner.classList.add('flex');
		}

		// Hide loading state
		function hideLoadingState() {
			contactSubmitBtn.disabled = false;
			contactBtnText.classList.remove('invisible');
			contactSpinner.classList.add('hidden');
			contactSpinner.classList.remove('flex');
		}

		// Show success message
		function showSuccessMessage() {
			contactFormContainer.classList.add('hidden');
			contactSuccessMessage.classList.remove('hidden');
		}

		// Show form (hide success message)
		function showForm() {
			contactFormContainer.classList.remove('hidden');
			contactSuccessMessage.classList.add('hidden');
			contactForm.reset();
			// Remove any error styling
			const inputs = contactForm.querySelectorAll('input, textarea');
			inputs.forEach(input => input.classList.remove('border-red-500'));
		}

		// Form submission
		contactForm.addEventListener('submit', async (e) => {
			e.preventDefault();

			if (!validateContactForm()) {
				alert('Please complete all required fields correctly.');
				return;
			}

			showLoadingState();

			try {
				const formData = new FormData(contactForm);
				const contactData = {
					name: formData.get('name'),
					email: formData.get('email'),
					subject: formData.get('subject'),
					message: formData.get('message')
				};

				console.log('Submitting contact form:', contactData);

				const response = await fetch('/api/contact', {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					},
					body: JSON.stringify(contactData),
				});

				const result = await response.json();

				if (!response.ok) {
					throw new Error(result.error || 'Failed to send message');
				}

				console.log('Contact form submitted successfully:', result);
				showSuccessMessage();

			} catch (error) {
				console.error('Contact form submission error:', error);
				alert(error instanceof Error ? error.message : 'Failed to send message. Please try again.');
			} finally {
				hideLoadingState();
			}
		});

		// Send another message button
		sendAnotherBtn.addEventListener('click', showForm);
	}

	// Modern Multi-Step Booking Form Functionality
	document.addEventListener('DOMContentLoaded', () => {
		// Initialize FAQ accordion
		initializeFAQ();

		// Initialize contact form
		initializeContactForm();

		// Multi-step booking form elements
		const bookingForm = document.getElementById('booking-form') as HTMLFormElement;
		const bookNowBtn = document.getElementById('bookNowBtn') as HTMLButtonElement;
		const bookingBtnText = document.getElementById('bookingBtnText') as HTMLElement;
		const bookingSpinner = document.getElementById('bookingSpinner') as HTMLElement;

		// Step elements (2-step flow)
		const step1 = document.getElementById('step-1') as HTMLElement;
		const step2 = document.getElementById('step-2') as HTMLElement;

		// Step indicators (2-step flow)
		const step1Indicator = document.getElementById('step-1-indicator') as HTMLElement;
		const step2Indicator = document.getElementById('step-2-indicator') as HTMLElement;
		const step1Label = document.getElementById('step-1-label') as HTMLElement;
		const step2Label = document.getElementById('step-2-label') as HTMLElement;

		// Navigation buttons
		const step1Next = document.getElementById('step-1-next') as HTMLButtonElement;
		const step2Back = document.getElementById('step-2-back') as HTMLButtonElement;

		// Form inputs
		const visitDateInput = document.getElementById('visitDate') as HTMLInputElement;
		const preferredTimeInput = document.getElementById('preferredTime') as HTMLInputElement;
		const visitorsSelect = document.getElementById('numberOfVisitors') as HTMLSelectElement;
		const fullNameInput = document.getElementById('fullName') as HTMLInputElement;
		const emailInput = document.getElementById('email') as HTMLInputElement;
		const phoneInput = document.getElementById('phone') as HTMLInputElement;

		// Always-visible calendar elements
		const currentMonthEl = document.getElementById('currentMonth') as HTMLElement;
		const calendarDaysContainer = document.getElementById('calendarDaysContainer') as HTMLElement;
		const prevMonthBtn = document.getElementById('prevMonth') as HTMLButtonElement;
		const nextMonthBtn = document.getElementById('nextMonth') as HTMLButtonElement;
		const timeSlotsContainer = document.getElementById('time-slots') as HTMLElement;
		const noDateSelected = document.getElementById('no-date-selected') as HTMLElement;

		// Mobile slide transition elements
		const bookingColumns = document.getElementById('booking-columns') as HTMLElement;
		const mobileBackBtn = document.getElementById('mobile-back-btn') as HTMLButtonElement;

		// Counter elements
		const counterMinusBtn = document.getElementById('counter-minus') as HTMLButtonElement;
		const counterPlusBtn = document.getElementById('counter-plus') as HTMLButtonElement;
		const counterPrice = document.getElementById('counter-price') as HTMLElement;
		const counterMessage = document.getElementById('counter-message') as HTMLElement;



		const PRICE_PER_BOUQUET = 35;

		// Global variables for multi-step form
		let currentStep = 1;
		let availabilityData: Record<string, string[]> = {};
		let currentDate = new Date();
		let selectedDate = '';
		let selectedTime = '';
		let isInitializing = false;

		// Business timezone helper - Alberta, Canada (Mountain Time)
		function getBusinessToday(): string {
			return new Date().toLocaleDateString('en-CA', {
				timeZone: 'America/Edmonton'
			}); // Returns YYYY-MM-DD format
		}

		// Modern Multi-step form management with smooth slide transitions
		function showStep(stepNumber: number, shouldFocus: boolean = true) {
			const stepsContainer = document.querySelector('.booking-steps-container') as HTMLElement;
			const steps = [step1, step2];

			if (!stepsContainer) return;

			// Add transitioning class for smooth opacity effect
			steps.forEach(step => step.classList.add('transitioning'));

			// Update container class for slide transition
			stepsContainer.classList.remove('show-step-1', 'show-step-2');
			stepsContainer.classList.add(`show-step-${stepNumber}`);

			// Update aria attributes for accessibility
			steps.forEach((step, index) => {
				if (index + 1 === stepNumber) {
					step.setAttribute('aria-hidden', 'false');
					step.classList.add('active');
				} else {
					step.setAttribute('aria-hidden', 'true');
					step.classList.remove('active');
				}
			});

			// Update step indicators and progress
			updateStepIndicators(stepNumber);

			// Update progress bar
			const progressBar = document.getElementById('step-progress');
			if (progressBar) {
				progressBar.setAttribute('aria-valuenow', stepNumber.toString());
			}

			currentStep = stepNumber;

			// Remove transitioning class and focus management after transition
			setTimeout(() => {
				steps.forEach(step => step.classList.remove('transitioning'));

				// Focus management for accessibility (only when explicitly requested)
				if (shouldFocus) {
					const currentStepElement = steps[stepNumber - 1];
					const firstInput = currentStepElement.querySelector('input, select, button') as HTMLElement;
					if (firstInput) {
						firstInput.focus();
					}
				}
			}, 400); // Match CSS transition duration
		}

		function updateStepIndicators(activeStep: number) {
			const indicators = [step1Indicator, step2Indicator];
			const labels = [step1Label, step2Label];

			indicators.forEach((indicator, index) => {
				const stepNum = index + 1;
				indicator.classList.remove('active', 'completed');
				labels[index].classList.remove('active');

				if (stepNum === activeStep) {
					indicator.classList.add('active');
					labels[index].classList.add('active');
				} else if (stepNum < activeStep) {
					indicator.classList.add('completed');
				}
			});
		}

		function validateStep1(): boolean {
			return !!(selectedDate && selectedTime);
		}

		function validateStep2(): boolean {
			const name = fullNameInput.value.trim();
			const email = emailInput.value.trim();
			const phone = phoneInput.value.trim();

			// Clear previous errors
			[fullNameInput, emailInput, phoneInput].forEach(input => {
				input.classList.remove('border-red-500');
			});

			let valid = true;

			if (!name) {
				fullNameInput.classList.add('border-red-500');
				valid = false;
			}

			if (!email) {
				emailInput.classList.add('border-red-500');
				valid = false;
			} else {
				const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
				if (!emailRegex.test(email)) {
					emailInput.classList.add('border-red-500');
					valid = false;
				}
			}

			// Phone is now optional - only validate format if provided
			if (phone && phone.length > 0) {
				const phoneRegex = /^[\d\s\-\(\)\.]+$/;
				if (!phoneRegex.test(phone)) {
					phoneInput.classList.add('border-red-500');
					valid = false;
				}
			}

			return valid;
		}



		function updateTotalPrice() {
			const count = parseInt(visitorsSelect.value) || 1;
			const total = count * PRICE_PER_BOUQUET;

			// Update counter price with pulse animation
			if (counterPrice) {
				counterPrice.classList.add('updating');
				counterPrice.textContent = `$${total} CAD`;
				setTimeout(() => counterPrice.classList.remove('updating'), 500);
			}

			// Handle 30+ bouquet message
			if (counterMessage) {
				if (count >= 30) {
					counterMessage.classList.remove('hidden');
				} else {
					counterMessage.classList.add('hidden');
				}
			}

			// Update button states
			updateCounterButtons(count);
		}

		// Update counter button states
		function updateCounterButtons(count: number) {
			if (counterMinusBtn) {
				counterMinusBtn.disabled = count <= 1;
			}
			if (counterPlusBtn) {
				counterPlusBtn.disabled = count >= 30;
			}
		}

		// Counter increment function
		function incrementCounter() {
			const currentValue = parseInt(visitorsSelect.value) || 1;
			const newValue = Math.min(currentValue + 1, 30);
			visitorsSelect.value = newValue.toString();
			updateTotalPrice();
		}

		// Counter decrement function
		function decrementCounter() {
			const currentValue = parseInt(visitorsSelect.value) || 1;
			const newValue = Math.max(currentValue - 1, 1);
			visitorsSelect.value = newValue.toString();
			updateTotalPrice();
		}

		// Create time slot cards
		function createTimeSlotCards(times: string[]) {
			// Clear previous time slots
			timeSlotsContainer.innerHTML = '';

			if (times.length === 0) {
				// Show "no slots available" message
				noDateSelected.style.display = 'none';
				timeSlotsContainer.classList.add('hidden');
				timeSlotsContainer.innerHTML = '<div class="text-center py-8 px-4"><div class="text-gray-400 mb-2"><svg class="w-12 h-12 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg></div><h4 class="font-playfair font-medium text-charcoal mb-1">No available times</h4><p class="text-sm font-roboto text-gray-500">This date is fully booked. Please select another date.</p></div>';
				timeSlotsContainer.classList.remove('hidden');
				return;
			}

			// Hide the "select a date" message and show time slots
			noDateSelected.style.display = 'none';
			timeSlotsContainer.classList.remove('hidden');
			timeSlotsContainer.className = 'grid gap-3';

			// Trigger mobile slide transition to time slots
			showMobileTimeSlots();

			// Set up mobile scroll indicators after a brief delay
			setTimeout(() => {
				setupMobileScrollIndicators();
			}, 100);

			times.forEach((time) => {
				const card = document.createElement('div');
				card.className = 'time-slot-card';
				card.setAttribute('role', 'radio');
				card.setAttribute('aria-checked', 'false');
				card.setAttribute('tabindex', '0');
				card.setAttribute('aria-label', `Select ${time} time slot`);
				card.innerHTML = `
					<div class="font-playfair font-semibold text-lg">${time}</div>
					<div class="text-sm font-roboto mt-1">Available</div>
				`;

				// Click handler
				const selectTimeSlot = () => {
					// Remove selection from other cards
					document.querySelectorAll('.time-slot-card').forEach(c => {
						c.classList.remove('selected');
						c.setAttribute('aria-checked', 'false');
					});
					// Select this card
					card.classList.add('selected');
					card.setAttribute('aria-checked', 'true');
					selectedTime = time;
					preferredTimeInput.value = time;

					// Enable next button
					step1Next.disabled = false;
				};

				card.addEventListener('click', selectTimeSlot);

				// Keyboard navigation
				card.addEventListener('keydown', (e) => {
					if (e.key === 'Enter' || e.key === ' ') {
						e.preventDefault();
						selectTimeSlot();
					} else if (e.key === 'ArrowRight' || e.key === 'ArrowDown') {
						e.preventDefault();
						const nextCard = card.nextElementSibling as HTMLElement;
						if (nextCard) nextCard.focus();
					} else if (e.key === 'ArrowLeft' || e.key === 'ArrowUp') {
						e.preventDefault();
						const prevCard = card.previousElementSibling as HTMLElement;
						if (prevCard) prevCard.focus();
					}
				});

				timeSlotsContainer.appendChild(card);
			});
		}

		// Show the "select a date" prompt
		function showSelectDatePrompt() {
			noDateSelected.style.display = 'flex';
			timeSlotsContainer.classList.add('hidden');
			step1Next.disabled = true;

			// Reset mobile view to calendar on mobile
			if (window.innerWidth <= 767) {
				showMobileCalendar();
			}
		}

		// Mobile slide transition functions
		function showMobileTimeSlots() {
			if (window.innerWidth <= 767 && bookingColumns) {
				bookingColumns.classList.add('show-time-slots');
				// Add ARIA live region announcement
				const announcement = document.createElement('div');
				announcement.setAttribute('aria-live', 'polite');
				announcement.setAttribute('aria-atomic', 'true');
				announcement.className = 'sr-only';
				announcement.textContent = 'Time slots view loaded';
				document.body.appendChild(announcement);
				setTimeout(() => document.body.removeChild(announcement), 1000);

				// Ensure consistent column heights after transition
				setTimeout(() => {
					ensureConsistentColumnHeight();
				}, 350); // After slide transition completes
			}
		}

		function showMobileCalendar() {
			if (window.innerWidth <= 767 && bookingColumns) {
				bookingColumns.classList.remove('show-time-slots');
			}
		}

		// Set up mobile scroll indicators for time slots
		function setupMobileScrollIndicators() {
			if (window.innerWidth > 767) return; // Only on mobile

			const timeSlotsContent = document.getElementById('time-slots-content');
			const timeSlotsContainer = document.getElementById('time-slots-container');
			if (!timeSlotsContent || !timeSlotsContainer) return;

			// Check if content is scrollable
			const isScrollable = timeSlotsContent.scrollHeight > timeSlotsContent.clientHeight;

			if (isScrollable) {
				timeSlotsContent.classList.add('has-scroll');

				// Add scroll event listener to hide indicator when scrolled to bottom
				const handleScroll = () => {
					const { scrollTop, scrollHeight, clientHeight } = timeSlotsContent;
					const isScrolledToBottom = scrollTop + clientHeight >= scrollHeight - 10; // 10px tolerance

					if (isScrolledToBottom) {
						timeSlotsContent.classList.add('scrolled-to-bottom');
					} else {
						timeSlotsContent.classList.remove('scrolled-to-bottom');
					}
				};

				timeSlotsContent.addEventListener('scroll', handleScroll, { passive: true });

				// Initial check
				handleScroll();
			} else {
				timeSlotsContent.classList.remove('has-scroll', 'scrolled-to-bottom');
			}

			// Ensure consistent height regardless of content
			ensureConsistentColumnHeight();
		}

		// Ensure time slots column maintains same height as calendar column
		function ensureConsistentColumnHeight() {
			if (window.innerWidth > 767) return; // Only on mobile

			const calendarColumn = document.querySelector('.calendar-column') as HTMLElement;
			const timeSlotsColumn = document.querySelector('.time-slots-column') as HTMLElement;
			const timeSlotsContainer = document.getElementById('time-slots-container') as HTMLElement;

			if (!calendarColumn || !timeSlotsColumn || !timeSlotsContainer) return;

			// Get the calendar column height
			const calendarHeight = calendarColumn.offsetHeight;

			// Only adjust time slots column height, leave calendar column alone
			// This prevents interference with calendar touch events
			timeSlotsContainer.style.height = `${calendarHeight}px`;
		}

		// Mobile back button handler
		if (mobileBackBtn) {
			mobileBackBtn.addEventListener('click', () => {
				showMobileCalendar();
				// Clear time selection when going back
				selectedTime = '';
				preferredTimeInput.value = '';
				step1Next.disabled = true;
				// Remove selection from time slot cards
				document.querySelectorAll('.time-slot-card').forEach(card => {
					card.classList.remove('selected');
					card.setAttribute('aria-checked', 'false');
				});
			});
		}

		// Window resize handler to reset mobile transitions on desktop
		window.addEventListener('resize', () => {
			if (window.innerWidth > 767 && bookingColumns) {
				// Reset mobile transitions when switching to desktop
				bookingColumns.classList.remove('show-time-slots');
			}
		});

		// Step navigation handlers
		step1Next.addEventListener('click', () => {
			if (validateStep1()) {
				showStep(2);
			} else {
				alert('Please select both a date and time slot.');
			}
		});

		step2Back.addEventListener('click', () => {
			showStep(1);
		});



		// Counter button event listeners
		if (counterPlusBtn) {
			counterPlusBtn.addEventListener('click', incrementCounter);

			// Keyboard support
			counterPlusBtn.addEventListener('keydown', (e) => {
				if (e.key === 'Enter' || e.key === ' ') {
					e.preventDefault();
					incrementCounter();
				}
			});
		}

		if (counterMinusBtn) {
			counterMinusBtn.addEventListener('click', decrementCounter);

			// Keyboard support
			counterMinusBtn.addEventListener('keydown', (e) => {
				if (e.key === 'Enter' || e.key === ' ') {
					e.preventDefault();
					decrementCounter();
				}
			});
		}

		// Initialize counter state
		updateTotalPrice();

		// Phone formatting
		phoneInput.addEventListener('input', (e: Event) => {
			const input = e.target as HTMLInputElement;
			let v = input.value.replace(/\D/g, '');
			if (v.length > 6) v = v.replace(/(\d{3})(\d{3})(\d+)/, '($1) $2-$3');
			else if (v.length > 3) v = v.replace(/(\d{3})(\d+)/, '($1) $2');
			input.value = v;
		});

		// Fetch availability from API and initialize custom calendar
		async function loadAvailability() {
			try {
				console.log('Loading availability...');
				const response = await fetch('/api/availability');
				availabilityData = await response.json();
				console.log('Availability data loaded:', availabilityData);

				// Get available dates
				const validDates = Object.keys(availabilityData);
				console.log('Valid dates:', validDates);

				// Initialize always-visible calendar
				initializeCustomCalendar();

				// Show "select a date" prompt (no auto-selection)
				showSelectDatePrompt();

			} catch (error) {
				console.error('Error loading availability:', error);
			}
		}

		// Initialize custom calendar
		function initializeCustomCalendar() {
			setupCalendarState();
			setupCalendarEventListeners();
		}

		// Set up calendar state (can be called multiple times)
		function setupCalendarState() {
			// Start with a month that has available dates
			const validDates = Object.keys(availabilityData);
			if (validDates.length > 0) {
				const firstValidDate = new Date(validDates[0]);
				currentDate = new Date(firstValidDate.getFullYear(), firstValidDate.getMonth(), 1);
			}

			// Show current month
			renderCalendar();
		}

		// Set up calendar event listeners (should only be called once)
		let calendarEventListenersSetup = false;
		function setupCalendarEventListeners() {
			if (calendarEventListenersSetup) return;

			// Event listeners for always-visible calendar with animations
			prevMonthBtn.addEventListener('click', () => {
				if (!prevMonthBtn.disabled && !prevMonthBtn.classList.contains('cursor-not-allowed')) {
					animateMonthChange(-1, 'right');
				}
			});

			nextMonthBtn.addEventListener('click', () => {
				if (!nextMonthBtn.disabled && !nextMonthBtn.classList.contains('cursor-not-allowed')) {
					animateMonthChange(1, 'left');
				}
			});

			// Set up swipe navigation for mobile
			setupSwipeNavigation();

			calendarEventListenersSetup = true;
		}

		// Swipe navigation setup
		function setupSwipeNavigation() {
			const calendarGrid = document.getElementById('calendarGrid');
			// Try to get the calendar container (the white box containing the calendar)
			const calendarContainer = calendarGrid?.closest('.bg-white') as HTMLElement;
			if (!calendarGrid || !calendarContainer) return;

			// Use the calendar container as the touch target for better coverage
			const touchTarget = calendarContainer;

			let touchStartX = 0;
			let touchStartY = 0;
			let touchEndX = 0;
			let touchEndY = 0;

			// Minimum swipe distance (in pixels) - reduced for easier detection
			const minSwipeDistance = 30;
			// Maximum vertical movement allowed for horizontal swipe
			const maxVerticalMovement = 150;



			touchTarget.addEventListener('touchstart', (e) => {
				touchStartX = e.changedTouches[0].clientX;
				touchStartY = e.changedTouches[0].clientY;
				calendarGrid.classList.add('swiping');
			}, { passive: true });

			touchTarget.addEventListener('touchend', (e) => {
				touchEndX = e.changedTouches[0].clientX;
				touchEndY = e.changedTouches[0].clientY;
				calendarGrid.classList.remove('swiping');
				handleSwipeGesture();
			}, { passive: true });

			touchTarget.addEventListener('touchcancel', () => {
				calendarGrid.classList.remove('swiping');
			}, { passive: true });

			function handleSwipeGesture() {
				const horizontalDistance = touchEndX - touchStartX;
				const verticalDistance = Math.abs(touchEndY - touchStartY);

				// Check if this is a horizontal swipe (not vertical scroll)
				if (Math.abs(horizontalDistance) < minSwipeDistance || verticalDistance > maxVerticalMovement) {
					return;
				}

				// Determine swipe direction and navigate
				if (horizontalDistance > 0) {
					// Swipe right - go to previous month
					if (prevMonthBtn && !prevMonthBtn.disabled && !prevMonthBtn.classList.contains('cursor-not-allowed')) {
						animateMonthChange(-1, 'right');
					}
				} else if (horizontalDistance < 0) {
					// Swipe left - go to next month
					if (nextMonthBtn && !nextMonthBtn.disabled && !nextMonthBtn.classList.contains('cursor-not-allowed')) {
						animateMonthChange(1, 'left');
					}
				}
			}

		}

		// Animate month change with slide effect (shared function)
		function animateMonthChange(direction: number, swipeDirection: string) {
			const calendarGrid = document.getElementById('calendarGrid');
			if (!calendarGrid) return;

			const currentMonthEl = document.getElementById('currentMonth');
			const calendarContainer = calendarGrid.closest('.bg-white');

			// Add pulse feedback to calendar container
			if (calendarContainer) {
				calendarContainer.classList.add('swipe-feedback');
				setTimeout(() => {
					calendarContainer.classList.remove('swipe-feedback');
				}, 100);
			}

			// Add changing class to month header
			if (currentMonthEl) {
				currentMonthEl.classList.add('changing');
			}

			// Add slide out animation
			const slideOutClass = swipeDirection === 'left' ? 'slide-left' : 'slide-right';
			calendarGrid.classList.add(slideOutClass);

			// After slide out animation, change month and slide in
			setTimeout(() => {
				if (!calendarGrid) return;

				// Remove slide out class
				calendarGrid.classList.remove(slideOutClass);

				// Navigate to new month
				navigateToMonth(direction);

				// Add slide in animation
				const slideInClass = swipeDirection === 'left' ? 'slide-in-left' : 'slide-in-right';
				calendarGrid.classList.add(slideInClass);

				// Remove month header changing class
				if (currentMonthEl) {
					currentMonthEl.classList.remove('changing');
				}

				// Clean up slide in animation
				setTimeout(() => {
					if (calendarGrid) {
						calendarGrid.classList.remove(slideInClass);
					}
				}, 300);
			}, 300);
		}

		// Render calendar for current month
		function renderCalendar() {
			const year = currentDate.getFullYear();
			const month = currentDate.getMonth();

			// Update month header
			currentMonthEl.textContent = new Date(year, month).toLocaleDateString('en-US', {
				month: 'long',
				year: 'numeric'
			});

			// Update navigation button states
			updateNavigationButtons();

			// Clear previous days
			calendarDaysContainer.innerHTML = '';

			// Get first day of month and number of days
			const firstDay = new Date(year, month, 1).getDay();
			const daysInMonth = new Date(year, month + 1, 0).getDate();

			// Calculate previous month info for filling empty cells
			const prevMonth = month === 0 ? 11 : month - 1;
			const prevYear = month === 0 ? year - 1 : year;
			const daysInPrevMonth = new Date(prevYear, prevMonth + 1, 0).getDate();

			// Add previous month days to fill the first week
			for (let i = firstDay - 1; i >= 0; i--) {
				const prevDay = daysInPrevMonth - i;
				const dayEl = document.createElement('div');
				dayEl.className = 'calendar-day prev-next-month';
				dayEl.textContent = prevDay.toString();
				calendarDaysContainer.appendChild(dayEl);
			}

			// Add days of the current month
			for (let day = 1; day <= daysInMonth; day++) {
				const dayEl = document.createElement('button');
				dayEl.type = 'button';
				dayEl.textContent = day.toString();

				const dateStr = `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;

				// Base styling using new CSS classes
				dayEl.className = 'calendar-day';

				// Check if date is available
				if (availabilityData[dateStr]) {
					// Available date styling
					dayEl.className += ' available';
					dayEl.addEventListener('click', () => selectDate(dateStr));

					// Highlight selected date
					if (dateStr === selectedDate) {
						dayEl.className += ' selected';
					}
				} else {
					// Unavailable date styling
					dayEl.className += ' unavailable';
					dayEl.disabled = true;
				}

				calendarDaysContainer.appendChild(dayEl);
			}

			// Fill remaining cells with next month days to complete 6 weeks (42 total cells)
			const totalCells = 42;
			const cellsUsed = firstDay + daysInMonth;
			const remainingCells = totalCells - cellsUsed;

			for (let day = 1; day <= remainingCells; day++) {
				const dayEl = document.createElement('div');
				dayEl.className = 'calendar-day prev-next-month';
				dayEl.textContent = day.toString();
				calendarDaysContainer.appendChild(dayEl);
			}

			// Ensure consistent column heights on mobile
			setTimeout(() => {
				ensureConsistentColumnHeight();
			}, 50);
		}

		// Navigate to next/previous month with available dates
		function navigateToMonth(direction: number) {
			const maxAttempts = 24; // Prevent infinite loops (2 years)
			let attempts = 0;

			do {
				currentDate.setMonth(currentDate.getMonth() + direction);
				attempts++;

				// Check if this month has any available dates
				if (monthHasAvailableDates(currentDate) || attempts >= maxAttempts) {
					break;
				}
			} while (attempts < maxAttempts);

			renderCalendar();
		}

		// Check if a month has any available dates
		function monthHasAvailableDates(date: Date): boolean {
			const year = date.getFullYear();
			const month = date.getMonth();
			const daysInMonth = new Date(year, month + 1, 0).getDate();

			// Check each day of the month
			for (let day = 1; day <= daysInMonth; day++) {
				const dateStr = `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
				if (availabilityData[dateStr]) {
					return true;
				}
			}

			return false;
		}

		// Update navigation button states
		function updateNavigationButtons() {
			const validDates = Object.keys(availabilityData);
			if (validDates.length === 0) {
				prevMonthBtn.disabled = true;
				nextMonthBtn.disabled = true;
				return;
			}

			// Get the range of available months
			const firstDate = new Date(validDates[0]);
			const lastDate = new Date(validDates[validDates.length - 1]);

			const currentYear = currentDate.getFullYear();
			const currentMonth = currentDate.getMonth();

			// Check if we can go to previous month
			const canGoPrev = currentYear > firstDate.getFullYear() ||
							 (currentYear === firstDate.getFullYear() && currentMonth > firstDate.getMonth());

			// Check if we can go to next month
			const canGoNext = currentYear < lastDate.getFullYear() ||
							 (currentYear === lastDate.getFullYear() && currentMonth < lastDate.getMonth());

			prevMonthBtn.disabled = !canGoPrev;
			nextMonthBtn.disabled = !canGoNext;

			// Update visual styling
			if (canGoPrev) {
				prevMonthBtn.classList.remove('opacity-50', 'cursor-not-allowed');
				prevMonthBtn.classList.add('cursor-pointer');
			} else {
				prevMonthBtn.classList.add('opacity-50', 'cursor-not-allowed');
				prevMonthBtn.classList.remove('cursor-pointer');
			}

			if (canGoNext) {
				nextMonthBtn.classList.remove('opacity-50', 'cursor-not-allowed');
				nextMonthBtn.classList.add('cursor-pointer');
			} else {
				nextMonthBtn.classList.add('opacity-50', 'cursor-not-allowed');
				nextMonthBtn.classList.remove('cursor-pointer');
			}
		}

		// Select a date
		function selectDate(dateStr: string) {
			selectedDate = dateStr;
			visitDateInput.value = dateStr;
			handleDateChange(dateStr);
			renderCalendar(); // Re-render to update selection
		}

		function handleDateChange(selectedDateStr: string) {
			console.log('handleDateChange called with:', selectedDateStr);

			// Check if date is provided
			if (!selectedDateStr) {
				createTimeSlotCards([]);
				return;
			}

			// Parse the selected date - use a more reliable method
			const [year, month, day] = selectedDateStr.split('-').map(Number);
			const selectedDateObj = new Date(year, month - 1, day); // month is 0-indexed
			const selectedYear = selectedDateObj.getFullYear();
			const businessToday = getBusinessToday();
			const currentYear = parseInt(businessToday.split('-')[0]);

			// Create today's date for comparison (using business timezone)
			const [todayYear, todayMonth, todayDay] = businessToday.split('-').map(Number);
			const todayDateOnly = new Date(todayYear, todayMonth - 1, todayDay);

			// Create selected date for comparison (date only, no time)
			const selectedDateOnly = new Date(year, month - 1, day);

			console.log('Date comparison debug:', {
				selectedDateStr,
				selectedDateOnly: selectedDateOnly.toISOString().split('T')[0],
				todayDateOnly: todayDateOnly.toISOString().split('T')[0],
				isPast: selectedDateOnly < todayDateOnly,
				isToday: selectedDateOnly.getTime() === todayDateOnly.getTime()
			});

			// Check if date is in the past (skip alert during initialization)
			if (selectedDateOnly < todayDateOnly) {
				if (!isInitializing) {
					alert('You cannot book a date in the past. Please select a future date.');
				}
				visitDateInput.value = '';
				selectedDate = '';
				createTimeSlotCards([]);
				return;
			}

			// Check if date is in the past (before current year) - skip alert during initialization
			if (selectedYear < currentYear) {
				if (!isInitializing) {
					const yearDiff = currentYear - selectedYear;
					const message = `You've selected a date from ${yearDiff} year${yearDiff > 1 ? 's' : ''} ago (${selectedYear}). Please select a date from the current flower season.`;
					alert(message);
				}
				visitDateInput.value = '';
				selectedDate = '';
				createTimeSlotCards([]);
				return;
			}

			// Check if date is too far in the future (more than next year) - skip alert during initialization
			if (selectedYear > currentYear + 1) {
				if (!isInitializing) {
					const yearDiff = selectedYear - currentYear;
					const message = `You've selected a date ${yearDiff} year${yearDiff > 1 ? 's' : ''} in the future (${selectedYear}). Bookings are only available for the current and next flower season.`;
					alert(message);
				}
				visitDateInput.value = '';
				selectedDate = '';
				createTimeSlotCards([]);
				return;
			}

			// Check if date is in next year - ask for confirmation (skip during initialization)
			if (selectedYear > currentYear && !isInitializing) {
				const confirmed = confirm(
					`You've selected a date in ${selectedYear}, which is next year's flower season.\n\n` +
					`Are you sure you want to book for ${selectedDateOnly.toLocaleDateString('en-US', {
						weekday: 'long',
						year: 'numeric',
						month: 'long',
						day: 'numeric'
					})}?\n\n` +
					`Click OK to confirm, or Cancel to select a different date.`
				);

				if (!confirmed) {
					visitDateInput.value = '';
					selectedDate = '';
					createTimeSlotCards([]);
					return;
				}
			}

			// Check if the selected date is available in our system (skip alert during initialization)
			if (!availabilityData[selectedDateStr]) {
				// Date is not available - show error and clear selection
				if (!isInitializing) {
					alert('Sorry, this date is not available for bookings. Please select a different date.');
				}
				visitDateInput.value = '';
				selectedDate = '';
				showSelectDatePrompt();
				return;
			}

			// Date is valid - create time slot cards
			createTimeSlotCards(availabilityData[selectedDateStr] || []);

			// Reset time selection when date changes
			selectedTime = '';
			preferredTimeInput.value = '';
			step1Next.disabled = true;
		}

		// Payment method selection handling
		const paymentRadios = document.querySelectorAll('input[name="paymentMethod"]') as NodeListOf<HTMLInputElement>;
		paymentRadios.forEach(radio => {
			radio.addEventListener('change', function() {
				// Update visual state of payment options
				const allLabels = document.querySelectorAll('label') as NodeListOf<HTMLLabelElement>;
				allLabels.forEach(label => {
					const input = label.querySelector('input[name="paymentMethod"]') as HTMLInputElement;
					if (input) {
						if (input.checked) {
							label.style.borderColor = '#E8B4B8';
							label.style.backgroundColor = 'rgba(232, 180, 184, 0.1)';
						} else {
							label.style.borderColor = '#E8B4B8';
							label.style.backgroundColor = 'transparent';
						}
					}
				});
			});
		});

		// Final form validation for submission
		function validateForm(): boolean {
			// All validation is now handled in individual steps
			// This is just a final check before submission
			return validateStep1() && validateStep2();
		}

		// Phone formatting
		document.getElementById('phone')?.addEventListener('input', (e) => {
			const input = e.target as HTMLInputElement;
			let v = input.value.replace(/\D/g, '');
			if (v.length > 6) v = v.replace(/(\d{3})(\d{3})(\d+)/, '($1) $2-$3');
			else if (v.length > 3) v = v.replace(/(\d{3})(\d+)/, '($1) $2');
			input.value = v;
		});

		// Form submission
		bookingForm.addEventListener('submit', async (e) => {
			e.preventDefault();
			if (!validateForm()) return alert('Please complete all required fields.');

			const formData = new FormData(bookingForm);
			const numberOfVisitors = parseInt(formData.get('numberOfVisitors') as string) || 1;
			const paymentMethod = formData.get('paymentMethod') as string || 'pay_on_arrival';

			const booking = {
				fullName: formData.get('fullName'),
				email: formData.get('email'),
				phone: formData.get('phone'),
				visitDate: formData.get('visitDate'),
				preferredTime: formData.get('preferredTime'),
				numberOfVisitors,
				totalAmount: numberOfVisitors * PRICE_PER_BOUQUET,
				paymentMethod
			};

			// Loading state
			bookNowBtn.disabled = true;
			bookingBtnText.classList.add('hidden');
			bookingSpinner.classList.remove('hidden');

			try {
				const res = await fetch('/api/bookings', {
					method: 'POST',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify(booking)
				});

				const result = await res.json();

				if (!res.ok) {
					// Show specific error message from server
					alert(result.error || 'There was an error with your booking. Please try again.');
					return;
				}

				// Check if this is a Square payment that requires redirect
				if (result.requiresPayment && result.paymentUrl) {
					// Show loading message and redirect to Square payment
					alert(result.message || 'Redirecting to payment...');
					window.location.href = result.paymentUrl;
					return; // Don't continue with normal success flow
				}

				// Success for pay_on_arrival bookings
				showBookingSuccess(booking, result.message);
				await loadAvailability(); // Refresh times if needed

			} catch (err) {
				console.error('Booking error:', err);
				alert('There was a network error. Please check your connection and try again.');
			} finally {
				bookNowBtn.disabled = false;
				bookingBtnText.classList.remove('hidden');
				bookingSpinner.classList.add('hidden');
			}
		});

		// Initialize multi-step form (without auto-focus to prevent page jumping)
		showStep(1, false);
		updateTotalPrice();

		// Show initial "select a date" prompt
		showSelectDatePrompt();

		// Load available slots initially
		loadAvailability();

		// Success state management functions
		function showBookingSuccess(booking: any, message: string) {
			const bookingFormContainer = document.getElementById('booking-form-container');
			const bookingSuccess = document.getElementById('booking-success');
			const successDateTime = document.getElementById('success-date-time');
			const successVisitors = document.getElementById('success-visitors');
			const successEmailMessage = document.getElementById('success-email-message');

			// Format date and time for display
			// Parse the date string as local date to avoid timezone issues
			const [year, month, day] = booking.visitDate.split('-').map(Number);
			const visitDate = new Date(year, month - 1, day); // month is 0-indexed
			const formattedDate = visitDate.toLocaleDateString('en-US', {
				weekday: 'long',
				year: 'numeric',
				month: 'long',
				day: 'numeric'
			});

			// Update success message content
			if (successDateTime) {
				successDateTime.textContent = `${formattedDate} at ${booking.preferredTime}`;
			}
			if (successVisitors) {
				const visitorText = booking.numberOfVisitors === 1 ? 'bouquet' : 'bouquets';
				successVisitors.textContent = `${booking.numberOfVisitors} ${visitorText} ($${booking.totalAmount} CAD)`;
			}
			if (successEmailMessage) {
				successEmailMessage.textContent = message || 'You\'ll receive a confirmation email shortly.';
			}

			// Hide form with smooth transition
			if (bookingFormContainer) {
				bookingFormContainer.style.opacity = '0';
				bookingFormContainer.style.transform = 'translateY(-20px)';

				setTimeout(() => {
					bookingFormContainer.classList.add('hidden');

					// Show success message
					if (bookingSuccess) {
						bookingSuccess.classList.remove('hidden');
						// Trigger reflow to ensure the element is rendered
						bookingSuccess.offsetHeight;
						bookingSuccess.classList.remove('opacity-0', 'translate-y-4');
						bookingSuccess.classList.add('opacity-100', 'translate-y-0');
					}
				}, 300);
			}
		}

		function resetBookingForm() {
			const bookingFormContainer = document.getElementById('booking-form-container');
			const bookingSuccess = document.getElementById('booking-success');

			// Hide success message
			if (bookingSuccess) {
				bookingSuccess.classList.add('opacity-0', 'translate-y-4');
				bookingSuccess.classList.remove('opacity-100', 'translate-y-0');

				setTimeout(() => {
					bookingSuccess.classList.add('hidden');

					// Show form again
					if (bookingFormContainer) {
						bookingFormContainer.classList.remove('hidden');
						bookingFormContainer.style.opacity = '1';
						bookingFormContainer.style.transform = 'translateY(0)';

						// Reset form fields
						bookingForm.reset();
						updateTotalPrice();

						// Clear any validation errors
						const errorFields = document.querySelectorAll('.border-red-500');
						errorFields.forEach(field => field.classList.remove('border-red-500'));

						// Reset calendar state and clear selection
						selectedDate = '';
						setupCalendarState();
					}
				}, 300);
			}
		}

		// Set up "Make Another Booking" button
		const makeAnotherBookingBtn = document.getElementById('make-another-booking');
		makeAnotherBookingBtn?.addEventListener('click', resetBookingForm);
	});

	// Initialize flower section
	initializeFlowerSection();

	// Flower Section Implementation
	function initializeFlowerSection() {
		// Flower data with seasonal availability for Southern Alberta
		const flowers = [
			{
				id: 1,
				name: "Aster",
				description: "Star-shaped blooms in purple, pink, and white that add texture to arrangements",
				colors: ["purple", "pink", "white"],
				occasions: ["wedding", "birthday", "everyday"],
				image: "aster_thumbnail.webp",
				seasons: ["late-summer", "fall"], // August-October
				months: [8, 9, 10],
				peakMonths: [9, 10]
			},
			{
				id: 2,
				name: "Baby's Breath",
				description: "Delicate white clouds that create airy, romantic arrangements",
				colors: ["white"],
				occasions: ["wedding", "anniversary", "everyday"],
				image: "babys-breath_thumbnail.webp",
				seasons: ["summer", "fall"], // June-September
				months: [6, 7, 8, 9],
				peakMonths: [7, 8]
			},
			{
				id: 3,
				name: "Bachelor Buttons",
				description: "Charming cornflower blooms in brilliant blue and mixed colors",
				colors: ["blue", "pink", "white", "purple"],
				occasions: ["wedding", "birthday", "everyday"],
				image: "bachelor-buttons_thumbnail.webp",
				seasons: ["summer"], // June-August
				months: [6, 7, 8],
				peakMonths: [7, 8]
			},
			{
				id: 4,
				name: "Daisies",
				description: "Classic white petals with sunny yellow centers, perfect for cheerful bouquets",
				colors: ["white", "yellow"],
				occasions: ["birthday", "everyday"],
				image: "daisies_thumbnail.webp",
				seasons: ["summer", "fall"], // June-September
				months: [6, 7, 8, 9],
				peakMonths: [7, 8]
			},
			{
				id: 5,
				name: "Eucalyptus",
				description: "Silvery-green foliage that adds fragrance and texture to any arrangement",
				colors: ["green"],
				occasions: ["wedding", "anniversary", "everyday"],
				image: "eucalyptus_thumbnail.webp",
				seasons: ["summer", "fall"], // Available all season as foliage
				months: [6, 7, 8, 9, 10],
				peakMonths: [7, 8, 9]
			},
			{
				id: 6,
				name: "Foxgloves",
				description: "Tall spikes of tubular blooms in purple, pink, and white",
				colors: ["purple", "pink", "white"],
				occasions: ["wedding", "everyday"],
				image: "foxgloves_thumbnail.webp",
				seasons: ["summer"], // June-July (early summer)
				months: [6, 7],
				peakMonths: [6, 7]
			},
			{
				id: 7,
				name: "Lavender",
				description: "Aromatic purple spikes perfect for rustic, fragrant arrangements",
				colors: ["purple"],
				occasions: ["wedding", "everyday"],
				image: "lavender_thumbnail.webp",
				seasons: ["summer"], // July-August
				months: [7, 8],
				peakMonths: [7, 8]
			},
			{
				id: 8,
				name: "Lupin",
				description: "Dramatic tall spikes in vibrant blues, purples, and mixed colors",
				colors: ["blue", "purple", "pink", "white"],
				occasions: ["wedding", "birthday", "everyday"],
				image: "lupin_thumbnail.webp",
				seasons: ["summer"], // June-July (early summer)
				months: [6, 7],
				peakMonths: [6, 7]
			},
			{
				id: 9,
				name: "Marigolds",
				description: "Bright, cheerful blooms in warm oranges and yellows",
				colors: ["orange", "yellow"],
				occasions: ["birthday", "everyday"],
				image: "marigolds_thumbnail.webp",
				seasons: ["summer", "fall"], // June-October (frost tolerant)
				months: [6, 7, 8, 9, 10],
				peakMonths: [7, 8, 9]
			},
			{
				id: 10,
				name: "Peonies",
				description: "Luxurious, full-bodied blooms with incredible fragrance",
				colors: ["pink", "white", "red"],
				occasions: ["wedding", "anniversary"],
				image: "peonies_thumbnail.webp",
				seasons: ["early-summer"], // June only (short season)
				months: [6],
				peakMonths: [6]
			},
			{
				id: 11,
				name: "Roses",
				description: "Classic and hybrid roses in various colors and fragrances",
				colors: ["red", "pink", "white", "yellow"],
				occasions: ["wedding", "anniversary", "everyday"],
				image: "roses_thumbnail.webp",
				seasons: ["summer", "fall"], // June-September
				months: [6, 7, 8, 9],
				peakMonths: [7, 8]
			},
			{
				id: 12,
				name: "Snapdragons",
				description: "Tall spikes of colorful blooms that add height and drama",
				colors: ["red", "pink", "white", "yellow", "purple"],
				occasions: ["wedding", "birthday", "everyday"],
				image: "snapdragons_thumbnail.webp",
				seasons: ["summer", "fall"], // June-September
				months: [6, 7, 8, 9],
				peakMonths: [7, 8]
			},
			{
				id: 13,
				name: "Sunflowers",
				description: "Bright, cheerful sunflowers that bring joy to any bouquet",
				colors: ["yellow", "orange"],
				occasions: ["birthday", "everyday"],
				image: "sunflower_thumbnail.webp",
				seasons: ["late-summer", "fall"], // August-September
				months: [8, 9],
				peakMonths: [8, 9]
			},
			{
				id: 14,
				name: "Sweet Peas",
				description: "Delicate, fragrant climbers in soft pastel shades",
				colors: ["pink", "purple", "white"],
				occasions: ["wedding", "birthday"],
				image: "sweatpea_thumbnail.webp",
				seasons: ["early-summer"], // June-July (cool weather)
				months: [6, 7],
				peakMonths: [6, 7]
			},
			{
				id: 15,
				name: "Zinnia",
				description: "Vibrant, long-lasting blooms in every color imaginable",
				colors: ["red", "orange", "yellow", "pink", "purple"],
				occasions: ["birthday", "everyday"],
				image: "zinnia_thumbnail.webp",
				seasons: ["summer", "fall"], // July-October
				months: [7, 8, 9, 10],
				peakMonths: [8, 9]
			}
		];

		let filteredFlowers = [...flowers];
		let currentCardIndex = 0;

		// Animation and scroll sync state
		let isAnimating = false;
		let scrollSyncTimeout: NodeJS.Timeout;

		// Store original classes for restoration
		let originalClasses = {
			mobileCarousel: '',
			desktopGrid: ''
		};

		// Create autocomplete suggestions from flower names
		const commonTypos = {
			'rose': ['roses', 'ros', 'roze'],
			'sunflower': ['sunflowers', 'sun flower', 'sunflowr'],
			'lavender': ['lavendar', 'lavander', 'lavnder'],
			'peony': ['peonies', 'peonie', 'piony'],
			'zinnia': ['zinia', 'zinea', 'zinnea'],
			'marigold': ['marigolds', 'marigol', 'merigold'],
			'snapdragon': ['snapdragons', 'snap dragon', 'snapdragn'],
			'sweet pea': ['sweet peas', 'sweetpea', 'sweetpeas'],
			'baby\'s breath': ['babys breath', 'babies breath', 'baby breath'],
			'bachelor button': ['bachelor buttons', 'batchelor button', 'bachelor botton']
		};

		// DOM elements
		const searchInput = document.getElementById('flowerSearch') as HTMLInputElement;
		const searchClear = document.getElementById('searchClear') as HTMLElement;
		const searchSuggestions = document.getElementById('searchSuggestions') as HTMLElement;
		const colorFilter = document.getElementById('colorFilter') as HTMLSelectElement;
		const occasionFilter = document.getElementById('occasionFilter') as HTMLSelectElement;
		const seasonFilter = document.getElementById('seasonFilter') as HTMLSelectElement;
		const mobileCarousel = document.getElementById('mobileCarousel') as HTMLElement;
		const desktopGrid = document.getElementById('desktopGrid') as HTMLElement;
		const carouselTrack = document.getElementById('carouselTrack') as HTMLElement;
		const prevBtn = document.getElementById('prevBtn') as HTMLButtonElement;
		const nextBtn = document.getElementById('nextBtn') as HTMLButtonElement;
		const flowerNavBtn = document.getElementById('flowerNavBtn') as HTMLButtonElement;
		const flowerNavText = document.getElementById('flowerNavText') as HTMLElement;
		const flowerNavDropdown = document.getElementById('flowerNavDropdown') as HTMLElement;
		const flowerNavList = document.getElementById('flowerNavList') as HTMLElement;
		const noResults = document.getElementById('noResults') as HTMLElement;
		const resetSearchBtn = document.getElementById('resetSearchBtn') as HTMLButtonElement;
		const flowerRequestForm = document.getElementById('flowerRequestForm') as HTMLFormElement;

		// Initialize
		storeOriginalClasses();
		updateDisplay();
		setupEventListeners();

		function storeOriginalClasses() {
			// Store the original classes for later restoration
			if (mobileCarousel) {
				originalClasses.mobileCarousel = mobileCarousel.className;
			}
			if (desktopGrid) {
				originalClasses.desktopGrid = desktopGrid.className;
			}
		}

		function setupEventListeners() {
			// Search functionality
			searchInput?.addEventListener('input', debounce(handleSearch, 300));
			searchInput?.addEventListener('focus', showSuggestions);
			searchInput?.addEventListener('blur', debounce(hideSuggestions, 200));
			searchClear?.addEventListener('click', clearSearch);

			// Filter functionality
			colorFilter?.addEventListener('change', applyFilters);
			occasionFilter?.addEventListener('change', applyFilters);
			seasonFilter?.addEventListener('change', applyFilters);



			// Carousel controls
			prevBtn?.addEventListener('click', () => navigateCarousel(-1));
			nextBtn?.addEventListener('click', () => navigateCarousel(1));

			// Reset search button
			resetSearchBtn?.addEventListener('click', resetSearch);

			// Flower navigation dropdown
			flowerNavBtn?.addEventListener('click', toggleFlowerNavDropdown);

			// Keyboard support for dropdown
			flowerNavBtn?.addEventListener('keydown', (e: any) => {
				if (e.key === 'Enter' || e.key === ' ') {
					e.preventDefault();
					toggleFlowerNavDropdown();
				} else if (e.key === 'Escape') {
					hideFlowerNavDropdown();
				}
			});

			// Close dropdown when clicking outside
			document.addEventListener('click', (e) => {
				if (!flowerNavBtn?.contains(e.target as Node) && !flowerNavDropdown?.contains(e.target as Node)) {
					hideFlowerNavDropdown();
				}
			});

			// Enhanced touch/swipe support for carousel
			let startX = 0;
			let currentX = 0;
			let isDragging = false;
			let startTime = 0;

			const carouselContainer = mobileCarousel?.querySelector('.overflow-x-auto');

			// Add scroll event listener to sync indicator with actual scroll position
			carouselContainer?.addEventListener('scroll', () => {
				// Clear any pending sync timeout
				clearTimeout(scrollSyncTimeout);

				// Debounce the sync to avoid excessive updates during smooth scrolling
				scrollSyncTimeout = setTimeout(() => {
					syncIndicatorWithScroll();
				}, 100);
			}, { passive: true });

			function syncIndicatorWithScroll() {
				if (!carouselContainer || isAnimating || filteredFlowers.length === 0) return;

				const cardWidth = 336; // w-80 (320px) + gap-4 (16px) = 336px
				const scrollLeft = carouselContainer.scrollLeft;
				const calculatedIndex = Math.round(scrollLeft / cardWidth);

				// Only update if the calculated index is different and valid
				if (calculatedIndex !== currentCardIndex &&
					calculatedIndex >= 0 &&
					calculatedIndex < filteredFlowers.length) {
					currentCardIndex = calculatedIndex;
					updateFlowerNavigation();
				}
			}

			carouselContainer?.addEventListener('touchstart', (e: any) => {
				startX = e.touches[0].clientX;
				startTime = Date.now();
				isDragging = true;
				// Clear any pending scroll sync to prevent conflicts
				clearTimeout(scrollSyncTimeout);
			}, { passive: true });

			carouselContainer?.addEventListener('touchmove', (e: any) => {
				if (!isDragging) return;
				currentX = e.touches[0].clientX;
			}, { passive: true });

			carouselContainer?.addEventListener('touchend', () => {
				if (!isDragging) return;
				const diff = startX - currentX;
				const timeDiff = Date.now() - startTime;
				const velocity = Math.abs(diff) / timeDiff;

				// Lower threshold for faster swipes, higher for slower ones
				const threshold = velocity > 0.5 ? 30 : 80;

				if (Math.abs(diff) > threshold) {
					// Navigate in the appropriate direction
					if (diff > 0) {
						navigateCarousel(1); // Swipe left = next flower
					} else {
						navigateCarousel(-1); // Swipe right = previous flower
					}
				}
				isDragging = false;
			}, { passive: true });

			// Keyboard navigation support
			carouselContainer?.addEventListener('keydown', (e: any) => {
				if (e.key === 'ArrowLeft') {
					e.preventDefault();
					navigateCarousel(-1);
				} else if (e.key === 'ArrowRight') {
					e.preventDefault();
					navigateCarousel(1);
				}
			});

			// Flower request form
			flowerRequestForm?.addEventListener('submit', handleFlowerRequest);
		}

		// Utility functions
		function debounce(func: Function, wait: number) {
			let timeout: NodeJS.Timeout;
			return function executedFunction(...args: any[]) {
				const later = () => {
					clearTimeout(timeout);
					func(...args);
				};
				clearTimeout(timeout);
				timeout = setTimeout(later, wait);
			};
		}

		function handleSearch() {
			const query = searchInput?.value.toLowerCase() || '';

			if (query.length > 0) {
				searchClear?.classList.remove('hidden');
			} else {
				searchClear?.classList.add('hidden');
			}

			applyFilters();
		}

		function clearSearch() {
			if (searchInput) {
				searchInput.value = '';
			}
			searchClear?.classList.add('hidden');
			applyFilters();
		}

		function applyFilters() {
			const query = searchInput?.value.toLowerCase() || '';
			const color = colorFilter?.value || '';
			const occasion = occasionFilter?.value || '';
			const season = seasonFilter?.value || '';

			// Get current month for "Available Now" filter
			const currentMonth = new Date().getMonth() + 1; // JavaScript months are 0-indexed

			if (query.length > 0) {
				// Search mode: filter by flower name only
				filteredFlowers = flowers.filter(flower => {
					return flower.name.toLowerCase().includes(query);
				});

				// If we have name matches, apply other filters
				if (filteredFlowers.length > 0) {
					filteredFlowers = filteredFlowers.filter(flower => {
						const matchesColor = !color || flower.colors.includes(color);
						const matchesOccasion = !occasion || flower.occasions.includes(occasion);
						const matchesSeason = !season ||
							(season === 'current' ? flower.months.includes(currentMonth) :
							 flower.months.includes(parseInt(season)));
						return matchesColor && matchesOccasion && matchesSeason;
					});
				}
			} else {
				// No search query: show all flowers with filters applied
				filteredFlowers = flowers.filter(flower => {
					const matchesColor = !color || flower.colors.includes(color);
					const matchesOccasion = !occasion || flower.occasions.includes(occasion);
					const matchesSeason = !season ||
						(season === 'current' ? flower.months.includes(currentMonth) :
						 flower.months.includes(parseInt(season)));
					return matchesColor && matchesOccasion && matchesSeason;
				});
			}

			// Always sort alphabetically (default behavior)
			filteredFlowers.sort((a, b) => a.name.localeCompare(b.name));

			currentCardIndex = 0;
			updateDisplay();
		}

		function showSuggestions() {
			const query = searchInput?.value.toLowerCase() || '';
			if (query.length < 2) {
				hideSuggestions();
				return;
			}

			const suggestions = getSuggestions(query);
			if (suggestions.length === 0) {
				hideSuggestions();
				return;
			}

			if (searchSuggestions) {
				searchSuggestions.innerHTML = suggestions.map(suggestion => `
					<div class="px-4 py-2 hover:bg-shabby-pink cursor-pointer font-roboto text-sm" style="color: #333333;" onclick="selectSuggestion('${suggestion}')">
						${suggestion}
					</div>
				`).join('');
				searchSuggestions.classList.remove('hidden');
			}
		}

		function hideSuggestions() {
			searchSuggestions?.classList.add('hidden');
		}

		function getSuggestions(query: string): string[] {
			const suggestions: string[] = [];

			// Direct flower name matches
			flowers.forEach(flower => {
				if (flower.name.toLowerCase().includes(query)) {
					suggestions.push(flower.name);
				}
			});

			// Typo corrections - check if query matches any known typos
			Object.entries(commonTypos).forEach(([correct, typos]) => {
				// Check if the query matches any of the typos for this correct word
				if (typos.some(typo => typo.includes(query) || query.includes(typo))) {
					// Find flowers that contain the correct word
					flowers.forEach(flower => {
						if (flower.name.toLowerCase().includes(correct) && !suggestions.includes(flower.name)) {
							suggestions.push(flower.name);
						}
					});
				}
			});

			// Remove duplicates and limit to 5 suggestions
			return [...new Set(suggestions)].slice(0, 5);
		}

		function resetSearch() {
			if (searchInput) {
				searchInput.value = '';
			}
			searchClear?.classList.add('hidden');
			hideSuggestions();

			// Reset all filters
			if (colorFilter) colorFilter.value = '';
			if (occasionFilter) occasionFilter.value = '';
			if (seasonFilter) seasonFilter.value = '';

			applyFilters();
		}

		// Global function for suggestion selection
		(window as any).selectSuggestion = function(suggestion: string) {
			if (searchInput) {
				searchInput.value = suggestion;
			}
			hideSuggestions();
			applyFilters();
		};



		function navigateCarousel(direction: number) {
			if (filteredFlowers.length === 0) return;

			// Prevent rapid navigation during animation to avoid jarring resets
			if (isAnimating) return;

			// Circular navigation - wrap around when reaching ends
			currentCardIndex += direction;
			if (currentCardIndex >= filteredFlowers.length) {
				currentCardIndex = 0; // Loop back to start
			} else if (currentCardIndex < 0) {
				currentCardIndex = filteredFlowers.length - 1; // Loop to end
			}

			updateDisplay();
		}

		function updateDisplay() {
			const query = searchInput?.value.toLowerCase() || '';
			const hasSearchQuery = query.length > 0;
			const hasResults = filteredFlowers.length > 0;

			if (hasSearchQuery && !hasResults) {
				// Search query but no name matches - show only request form
				showNoResults();
				disableFiltersAndControls();
				return;
			}

			// Either no search query (show all) or search with results
			hideNoResults();
			enableFiltersAndControls();

			if (window.innerWidth >= 1024) {
				updateDesktopGrid();
			} else {
				updateMobileCarousel();
			}
		}

		function showNoResults() {
			// Hide all view containers
			if (mobileCarousel) {
				mobileCarousel.className = 'hidden';
			}
			if (desktopGrid) {
				desktopGrid.className = 'hidden';
			}

			// Show the no results section
			noResults?.classList.remove('hidden');

			// Pre-fill the search term in the request form with exactly what user typed (including typos)
			const requestedFlowerInput = document.getElementById('requestedFlower') as HTMLInputElement;
			if (requestedFlowerInput && searchInput?.value) {
				requestedFlowerInput.value = searchInput.value; // Exact user input, typos included
			}
		}

		function hideNoResults() {
			noResults?.classList.add('hidden');

			// Restore original classes to containers
			if (mobileCarousel && originalClasses.mobileCarousel) {
				mobileCarousel.className = originalClasses.mobileCarousel;
			}
			if (desktopGrid && originalClasses.desktopGrid) {
				desktopGrid.className = originalClasses.desktopGrid;
			}

			// Apply current view state
			if (window.innerWidth >= 1024) {
				desktopGrid?.classList.remove('hidden');
				mobileCarousel?.classList.add('hidden');
			} else {
				desktopGrid?.classList.add('hidden');
				mobileCarousel?.classList.remove('hidden');
			}
		}

		function disableFiltersAndControls() {
			// Disable filters (but keep them visible)
			if (colorFilter) {
				colorFilter.disabled = true;
				colorFilter.style.opacity = '0.5';
				colorFilter.style.cursor = 'not-allowed';
			}
			if (occasionFilter) {
				occasionFilter.disabled = true;
				occasionFilter.style.opacity = '0.5';
				occasionFilter.style.cursor = 'not-allowed';
			}
			if (seasonFilter) {
				seasonFilter.disabled = true;
				seasonFilter.style.opacity = '0.5';
				seasonFilter.style.cursor = 'not-allowed';
			}
		}

		function enableFiltersAndControls() {
			// Enable filters
			if (colorFilter) {
				colorFilter.disabled = false;
				colorFilter.style.opacity = '1';
				colorFilter.style.cursor = 'pointer';
			}
			if (occasionFilter) {
				occasionFilter.disabled = false;
				occasionFilter.style.opacity = '1';
				occasionFilter.style.cursor = 'pointer';
			}
			if (seasonFilter) {
				seasonFilter.disabled = false;
				seasonFilter.style.opacity = '1';
				seasonFilter.style.cursor = 'pointer';
			}
		}

		function createFlowerCard(flower: any, isDesktop = false) {
			const cardClass = isDesktop ?
				'flower-card shabby-card distressed-shadow p-6 hover:scale-105 hover:shadow-lg transition-all duration-300 cursor-pointer group' :
				'flower-card shabby-card distressed-shadow p-5 flex-shrink-0 w-80 sm:w-72 snap-center min-h-96 group';

			return `
				<div class="${cardClass}">
					<div class="relative mb-4 overflow-hidden rounded-lg">
						<div class="w-full h-48 bg-gradient-to-br from-shabby-pink to-dusty-blue">
							<img class="flower-image w-full h-full object-cover transition-transform duration-300 group-hover:scale-110" src="./images/flowers/${flower.image}" alt="${flower.name}" />
						</div>
					</div>

					<div class="space-y-3">
						<div>
							<h3 class="text-xl font-playfair font-bold mb-2 group-hover:text-dusty-rose transition-colors duration-200" style="color: #333333;">${flower.name}</h3>
							<p class="text-sm font-roboto leading-relaxed" style="color: #666; line-height: 1.4;">${flower.description}</p>
						</div>

						<!-- Color palette -->
						<div class="flex flex-wrap gap-1.5">
							${flower.colors.map((color: string) => `
								<div class="w-4 h-4 rounded-full" style="background-color: ${getColorHex(color)}; ${color.toLowerCase() === 'white' ? 'border: 1px solid #E8B4B8;' : ''}" title="${color}"></div>
							`).join('')}
						</div>

						<!-- Occasions tags -->
						<div class="flex flex-wrap gap-1.5 pt-2">
							${flower.occasions.slice(0, 3).map((occasion: string) => `
								<span class="px-2.5 py-1 rounded-full text-xs font-roboto font-medium capitalize transition-colors duration-200 hover:bg-dusty-rose" style="background-color: #FAF7F4; color: #333333; border: 1px solid #E8B4B8;">
									${occasion}
								</span>
							`).join('')}
						</div>

						<!-- Seasonal availability -->
						<div class="pt-2 border-t border-shabby-pink">
							<div class="flex items-center gap-2 mb-1">
								<svg class="w-4 h-4" style="color: #E8B4B8;" fill="currentColor" viewBox="0 0 20 20">
									<path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd"></path>
								</svg>
								<span class="text-xs font-roboto font-medium" style="color: #666;">Available:</span>
							</div>
							<div class="text-xs font-roboto" style="color: #666;">
								${getSeasonalDisplay(flower)}
							</div>
						</div>
					</div>
				</div>
			`;
		}

		// Helper function to get color hex values
		function getColorHex(colorName: string): string {
			const colorMap: Record<string, string> = {
				'red': '#EF4444',
				'pink': '#EC4899',
				'white': '#FFFFFF',
				'yellow': '#EAB308',
				'purple': '#A855F7',
				'orange': '#F97316',
				'blue': '#3B82F6',
				'green': '#22C55E',
				'lavender': '#C084FC',
				'coral': '#FF7F7F'
			};
			return colorMap[colorName.toLowerCase()] || '#E8B4B8';
		}

		// Helper function to display seasonal availability
		function getSeasonalDisplay(flower: any): string {
			const monthNames = ['', 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
			const currentMonth = new Date().getMonth() + 1;

			if (!flower.months || flower.months.length === 0) {
				return 'Season varies';
			}

			// Check if currently in season
			const isCurrentlyAvailable = flower.months.includes(currentMonth);
			const availabilityStatus = isCurrentlyAvailable ?
				'<span style="color: #22C55E; font-weight: 600;">● Available now</span>' :
				'<span style="color: #F97316;">○ Out of season</span>';

			// Format month range
			const sortedMonths = [...flower.months].sort((a, b) => a - b);
			const monthRanges = [];
			let rangeStart = sortedMonths[0];
			let rangeEnd = sortedMonths[0];

			for (let i = 1; i < sortedMonths.length; i++) {
				if (sortedMonths[i] === rangeEnd + 1) {
					rangeEnd = sortedMonths[i];
				} else {
					// End current range and start new one
					if (rangeStart === rangeEnd) {
						monthRanges.push(monthNames[rangeStart]);
					} else {
						monthRanges.push(`${monthNames[rangeStart]}-${monthNames[rangeEnd]}`);
					}
					rangeStart = rangeEnd = sortedMonths[i];
				}
			}

			// Add final range
			if (rangeStart === rangeEnd) {
				monthRanges.push(monthNames[rangeStart]);
			} else {
				monthRanges.push(`${monthNames[rangeStart]}-${monthNames[rangeEnd]}`);
			}

			return `${availabilityStatus}<br><span style="color: #999;">${monthRanges.join(', ')}</span>`;
		}



		function updateMobileCarousel() {
			if (!carouselTrack) return;

			// Show all filtered flowers in carousel
			carouselTrack.innerHTML = filteredFlowers.map(flower => createFlowerCard(flower)).join('');

			// Scroll to current card position
			const carouselContainer = mobileCarousel?.querySelector('.overflow-x-auto');
			if (carouselContainer && filteredFlowers.length > 0) {
				const cardWidth = 336; // w-80 (320px) + gap-4 (16px) = 336px
				const scrollPosition = currentCardIndex * cardWidth;

				// Set animation flag to prevent scroll sync conflicts
				isAnimating = true;

				carouselContainer.scrollTo({
					left: scrollPosition,
					behavior: 'smooth'
				});

				// Clear animation flag after scroll completes (smooth scroll typically takes ~300ms)
				setTimeout(() => {
					isAnimating = false;
				}, 350);
			}

			updateCarouselControls();
			updateFlowerNavigation();
		}



		function updateDesktopGrid() {
			if (!desktopGrid) return;
			desktopGrid.innerHTML = filteredFlowers.map(flower => createFlowerCard(flower, true)).join('');
		}

		function updateCarouselControls() {
			// For circular navigation, buttons are always enabled when there are flowers
			const hasFlowers = filteredFlowers.length > 0;

			if (prevBtn) {
				prevBtn.disabled = !hasFlowers;
				prevBtn.style.opacity = hasFlowers ? '1' : '0.5';
			}

			if (nextBtn) {
				nextBtn.disabled = !hasFlowers;
				nextBtn.style.opacity = hasFlowers ? '1' : '0.5';
			}
		}

		function updateFlowerNavigation() {
			if (!flowerNavText || !flowerNavList) return;

			const totalFlowers = filteredFlowers.length;
			const currentFlower = filteredFlowers[currentCardIndex];

			// Update the button text
			if (totalFlowers > 0 && currentFlower) {
				flowerNavText.textContent = `${currentFlower.name} (${currentCardIndex + 1} of ${totalFlowers})`;
			} else {
				flowerNavText.textContent = '0 of 0';
			}

			// Update the dropdown list
			flowerNavList.innerHTML = '';
			filteredFlowers.forEach((flower, index) => {
				const item = document.createElement('button');
				item.className = `w-full text-left px-3 py-2 rounded font-roboto text-sm transition-colors duration-200 ${
					index === currentCardIndex
						? 'font-semibold'
						: 'hover:bg-shabby-pink'
				}`;
				item.style.backgroundColor = index === currentCardIndex ? '#F8E7E8' : 'transparent';
				item.style.color = '#333333';
				item.textContent = `${index + 1}. ${flower.name}`;
				item.setAttribute('aria-label', `Go to ${flower.name}`);

				item.addEventListener('click', () => {
					currentCardIndex = index;
					hideFlowerNavDropdown();
					updateDisplay();
				});

				flowerNavList.appendChild(item);
			});
		}

		function toggleFlowerNavDropdown() {
			if (!flowerNavDropdown) return;

			if (flowerNavDropdown.classList.contains('hidden')) {
				showFlowerNavDropdown();
			} else {
				hideFlowerNavDropdown();
			}
		}

		function showFlowerNavDropdown() {
			flowerNavDropdown?.classList.remove('hidden');
		}

		function hideFlowerNavDropdown() {
			flowerNavDropdown?.classList.add('hidden');
		}

		async function handleFlowerRequest(e: Event) {
			e.preventDefault();

			// Get form elements
			const flowerRequestFormContainer = document.getElementById('flower-request-form-container') as HTMLElement;
			const flowerRequestSuccessMessage = document.getElementById('flower-request-success-message') as HTMLElement;
			const flowerRequestSubmitBtn = document.getElementById('flower-request-submit-btn') as HTMLButtonElement;
			const flowerRequestBtnText = document.getElementById('flower-request-btn-text') as HTMLElement;
			const flowerRequestSpinner = document.getElementById('flower-request-spinner') as HTMLElement;
			const flowerRequestSuccessText = document.getElementById('flower-request-success-text') as HTMLElement;
			const sendAnotherFlowerBtn = document.getElementById('flower-request-send-another') as HTMLButtonElement;

			if (!flowerRequestFormContainer || !flowerRequestSuccessMessage ||
				!flowerRequestSubmitBtn || !flowerRequestBtnText || !flowerRequestSpinner ||
				!flowerRequestSuccessText || !sendAnotherFlowerBtn) {
				console.error('Flower request form elements not found');
				return;
			}

			// Validate form
			const formData = new FormData(flowerRequestForm);
			const flower = formData.get('requestedFlower') as string;
			const email = formData.get('requesterEmail') as string;
			const notes = formData.get('requestNotes') as string;

			if (!flower?.trim() || !email?.trim()) {
				alert('Please fill in both flower name and email address.');
				return;
			}

			// Email validation
			const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
			if (!emailRegex.test(email)) {
				alert('Please enter a valid email address.');
				return;
			}

			// Show loading state
			flowerRequestSubmitBtn.disabled = true;
			flowerRequestBtnText.classList.add('invisible');
			flowerRequestSpinner.classList.remove('hidden');
			flowerRequestSpinner.classList.add('flex');

			try {
				const requestData = {
					flower: flower.trim(),
					email: email.trim(),
					notes: notes?.trim() || undefined
				};

				console.log('Submitting flower request:', requestData);

				const response = await fetch('/api/flower-request', {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					},
					body: JSON.stringify(requestData),
				});

				const result = await response.json();

				if (!response.ok) {
					throw new Error(result.error || 'Failed to send flower request');
				}

				console.log('Flower request submitted successfully:', result);

				// Update success message with specific flower name
				flowerRequestSuccessText.textContent = result.message || `Thank you for your flower request! We'll get back to you about "${flower}" availability.`;

				// Show success message
				flowerRequestFormContainer.classList.add('hidden');
				flowerRequestSuccessMessage.classList.remove('hidden');

			} catch (error) {
				console.error('Flower request submission error:', error);
				alert(error instanceof Error ? error.message : 'Failed to send flower request. Please try again.');
			} finally {
				// Hide loading state
				flowerRequestSubmitBtn.disabled = false;
				flowerRequestBtnText.classList.remove('invisible');
				flowerRequestSpinner.classList.add('hidden');
				flowerRequestSpinner.classList.remove('flex');
			}

			// Setup send another request button
			sendAnotherFlowerBtn.onclick = () => {
				flowerRequestFormContainer.classList.remove('hidden');
				flowerRequestSuccessMessage.classList.add('hidden');
				flowerRequestForm.reset();
				// Remove any error styling
				const inputs = flowerRequestForm.querySelectorAll('input, textarea');
				inputs.forEach(input => input.classList.remove('border-red-500'));
			};
		}

		// Handle window resize
		window.addEventListener('resize', debounce(() => {
			updateDisplay();
		}, 250));
	}
</script>

<!-- Modern modular approach for better performance -->
<script type="module" is:inline>
	// Import modular functionality for better code splitting
	// Note: This is a progressive enhancement - the legacy code above provides fallback

	// Lazy load modules when needed
	async function initializeModernFeatures() {
		try {
			// Only load if modules are supported
			if ('noModule' in HTMLScriptElement.prototype) return;

			// Dynamic imports for code splitting
			const [{ BookingManager }, { FlowerManager }] = await Promise.all([
				import('../scripts/booking.ts'),
				import('../scripts/flowers.js')
			]);

			// Initialize modern implementations
			new BookingManager();
			new FlowerManager();

			console.log('Modern modular features loaded');
		} catch (error) {
			console.log('Falling back to legacy implementation:', error);
		}
	}

	// Map Navigation Functions
	function openMaps() {
		// Default to Google Maps
		openGoogleMaps();
	}

	function openGoogleMaps() {
		const lat = 49.333472;
		const lng = -113.634417;
		const url = `https://www.google.com/maps/search/?api=1&query=${lat},${lng}`;
		window.open(url, '_blank');
	}

	function openAppleMaps() {
		const lat = 49.333472;
		const lng = -113.634417;
		// Use the proper Apple Maps URL format with pin
		const url = `https://maps.apple.com/?ll=${lat},${lng}&q=Pin`;
		window.open(url, '_blank');
	}

	// Make functions globally available
	window.openMaps = openMaps;
	window.openGoogleMaps = openGoogleMaps;
	window.openAppleMaps = openAppleMaps;

	// Initialize when DOM is ready
	if (document.readyState === 'loading') {
		document.addEventListener('DOMContentLoaded', initializeModernFeatures);
	} else {
		initializeModernFeatures();
	}
</script>
